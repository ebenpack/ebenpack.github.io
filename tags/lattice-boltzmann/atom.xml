<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Eben Packwood - Lattice Boltzmann</title>
    <subtitle>TODO</subtitle>
    <link href="https://ebenpackwood.com/tags/lattice-boltzmann/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://ebenpackwood.com"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2014-07-30T21:00:00+00:00</updated>
    <id>https://ebenpackwood.com/tags/lattice-boltzmann/atom.xml</id>
    <entry xml:lang="en">
        <title>Too Much Recursion!</title>
        <published>2014-07-30T21:00:00+00:00</published>
        <updated>2014-07-30T21:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://ebenpackwood.com/posts/too-much-recursion.html/" type="text/html"/>
        <id>https://ebenpackwood.com/posts/too-much-recursion.html/</id>
        
        <content type="html">&lt;p&gt;I was reading &#x27;Data Structures and Algorithms in JavaScript&#x27; by Michael McMillan the other day. While the book as a
whole is absolutely riddled with errors, this passage struck me as being particularly egregious.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is customary, though not necessary, to implement Mergesort as a recursive algorithm. However, &lt;strong&gt;it is not possible
to do so in JavaScript, as the recursion goes too deep for the language to handle&lt;&#x2F;strong&gt;. [emphasis mine]&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;!--more--&gt;
&lt;p&gt;It is not possible to implement recursive mergesort in JavaScript! Because the recursion goes too deep! What utter
nonsense.&lt;&#x2F;p&gt;
&lt;p&gt;To see why this is such a patently absurd claim, we must first establish a few facts. First, what is the stack depth for
JavaScript? This isn&#x27;t something that is defined by the specification, so it&#x27;s going to be implementation dependent.
User josh3736 reported the stack depths of several browsers in his StackOverflow answer
&lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;7826992&#x2F;browser-javascript-stack-size-limit#7828803&quot;&gt;here&lt;&#x2F;a&gt;. A quick check of the
browsers easily available to hand suggests his assessment to be more or less in the right neighborhood. At worst, we
have a stack depth of ~1,000 (insert IE6 joke here), and at best it could be as high as ~65,000. The mean seems to be
somewhere around ~20,000-30,000.&lt;&#x2F;p&gt;
&lt;p&gt;The next fact we need to establish is how large can a JavaScript array be? This is a lot more straightforward than the
stack depth. The ECMA standard clearly defines the maximum length of an array to be 2&lt;sup&gt;32&lt;&#x2F;sup&gt;-1, or 4,294,967,295.
Which is just a hair north of 4 billion. That&#x27;s a very large array.&lt;&#x2F;p&gt;
&lt;p&gt;So, now that we&#x27;ve sorted out our facts, why is McMillan&#x27;s claim so absurd? To understand that, we need to take a closer
look at mergesort. Mergesort is a textbook divide-and-conquer algorithm. It works by splitting an array in half, then
calling mergesort recursively on each half until it reaches the base case. Then it merges each half back together such
that the result is sorted. For any given array of sufficient size, mergesort will be called twice, once on the lower
half, and once on the upper half. For each of those halves, mergesort will then potentially be called twice again, and
so on.&lt;&#x2F;p&gt;
&lt;p&gt;It should be evident that the number of times an array can be divided in this fashion will be log&lt;sub&gt;2&lt;&#x2F;sub&gt;(n). Not
coincidentally, this is the maximum recursive depth mergesort will reach. Put another way, mergesort will reach a
recursive depth of n when called on an array of length 2&lt;sup&gt;n&lt;&#x2F;sup&gt;. It follows from this that, given our maximum array
length, the maximum recursive depth that mergesort can possibly reach is 32 calls deep (maybe 33 if you count the
original call). This is nowhere close to reaching even the shallowest possible stack depth.&lt;&#x2F;p&gt;
&lt;p&gt;I quickly knocked up a recursive mergesort implementation (which I am including below) and set it to work sorting ever
larger arrays. My implementation (which I&#x27;m sure leaves much room for improvement) crapped out after trying to sort an
array of 2&lt;sup&gt;25&lt;&#x2F;sup&gt; items. Not because of what Firefox rather endearingly refers to as &amp;quot;too much recursion&amp;quot;, but
rather because it takes a heck of a lot of work to sort an array with tens of millions of items. Heck, forget sorting,
Chrome wouldn&#x27;t even let me push more than 2&lt;sup&gt;26&lt;&#x2F;sup&gt; items into an array. So, while it&#x27;s true that mergesort in
JavaScript might have some trouble with arrays of 2&lt;sup&gt;25&lt;&#x2F;sup&gt; items, this has nought to do with the depth of
recursion or the call stack. I&#x27;ll repeat that: any problems mergesort might have with very large arrays are wholly
unrelated to the depth of recursion or the call stack, and any claims otherwise suggest a fundamental misunderstanding
of either how the algorithm works, the basic fundamentals of JavaScript, or both.&lt;&#x2F;p&gt;
&lt;p&gt;Just as a thought experiment, though, how large would an array actually need to be to reach or exceed the stack depth
of, say, IE6? If you recall, IE6 has a stack depth of ~1,000. Let&#x27;s just call it 1,000 even. As we demonstrated, in
order to reach this recursive depth with mergesort, the array would have to have a length of 2&lt;sup&gt;1,000&lt;&#x2F;sup&gt;. In
base-10 this is ~10&lt;sup&gt;301&lt;&#x2F;sup&gt;. This translates to a one followed by 301 other numbers. It looks exactly like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code style=&quot;display:block;white-space: pre-wrap;line-break: anywhere;&quot;&gt;10715086071862673209484250490600018105614048117055336074437503883703510511249361224931983788156958581275946729175531468251871452856923140435984577574698574803934567774824230985421074605062371141877954182153046474983581941267398767559165543946077062914571196477686542167660429831652624386837205668069376
&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s a pretty big number. To give an idea of the scale of this number, it&#x27;s greater than the number of atoms in the
observable universe, which, in case you were wondering, there are approx. 10&lt;sup&gt;80&lt;&#x2F;sup&gt; of, give or take a few orders
of magnitude. So to be a bit technical for a moment, it&#x27;s actually much, much, much greater than the number of atoms in
the universe. In fact, any description I could attempt to give w&#x2F;r&#x2F;t just how much greater than the number of atoms in
the universe this number really is, would just be such a colossal understatement that it would only be an affront to
large numbers, and indeed to the very concept of largeness in general. Just believe me when I say that it&#x27;s wowie big.&lt;&#x2F;p&gt;
&lt;p&gt;The point is, there&#x27;s a good chance you&#x27;re not going to be reaching the maximum call stack depth with mergesort, even
if you really, really believe your array is well above average size. I would actually go so far as to say it is
completely impossible to exceed the stack depth with mergesort in JavaScript, assuming you&#x27;re sorting a standard
JavaScript array and you&#x27;re using a well implemented mergesort function. So there&#x27;s a good chance that anyone who
claims that&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is not possible to [implement Mergesort as a recursive algorithm] in JavaScript, as the recursion goes too deep for
the language to handle.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;might not know what they&#x27;re talking about. Like, at all.&lt;&#x2F;p&gt;
&lt;p&gt;While this certainly is one of the more flagrant errors in the book, it is just one of many. If you&#x27;re on the fence
about getting this book, I would recommend you give it a pass.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, here&#x27;s some code:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; The number of stack traces that will be logged in the console.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; We call console.log() when we reach the base case in our
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; mergesort function, which will be the maximum recursive depth.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; We&amp;#39;re only going to call this the first few times, as
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; it can really bog things down otherwise.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;stacktraces &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; The array we will be sorting.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;big_array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[];
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Build our array with numbers going in descending order.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; The array size, max, can be larger, but things slow down
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;13&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; and start to get wonky at about 2^25.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;14&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;max &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;Math&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;pow&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;15&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;max; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    big_array.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(max &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;i);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;18&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;19&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;big_array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;mergesort&lt;&#x2F;span&gt;&lt;span&gt;(big_array);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;21&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Standard merge
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;22&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;merge&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;23&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[];
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;alen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;a.length;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;25&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;blen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;b.length;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;26&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(alen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span&gt;blen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;27&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(alen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span&gt;blen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;28&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(a[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;b[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;29&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;shift&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;30&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                alen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;31&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;32&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(b[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span&gt;a[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;33&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;shift&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;34&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                blen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;35&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;36&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;37&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(alen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;38&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;shift&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;39&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            alen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;40&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;41&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(blen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;42&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;shift&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;43&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            blen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;44&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;45&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;46&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;result;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;47&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;48&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;49&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Standard recursive mergesort
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;50&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;mergesort&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;lst&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;51&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;lst.length;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;52&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;53&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(stacktraces &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;54&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; This will print a call stack to the console the
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;55&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; first ten times our mergesort reaches the base case.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;56&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; It should be clear that the maximum recursive depth
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;57&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; of our mergesort function is n+1, where our array
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;58&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; has on the order of 2^n items.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;59&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;trace&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;60&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            stacktraces&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;61&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;62&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;lst;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;63&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;64&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;q &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;Math&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;floor&lt;&#x2F;span&gt;&lt;span&gt;(length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;65&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;left &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;mergesort&lt;&#x2F;span&gt;&lt;span&gt;(lst.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;slice&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,q));
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;66&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;right &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;mergesort&lt;&#x2F;span&gt;&lt;span&gt;(lst.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;slice&lt;&#x2F;span&gt;&lt;span&gt;(q));
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;67&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;merge&lt;&#x2F;span&gt;&lt;span&gt;(left, right);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;68&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Addendum: I was curious about the relative performance of the iterative and recursive mergesort implementations.
As you can see, the iterative approach is much faster, and I believe it uses quite a bit less memory as well.&lt;&#x2F;p&gt;
&lt;div id=&quot;graph&quot;&gt;
&lt;style scoped&gt;
    path {
        stroke-width: 3;
        fill: none;
    }
&lt;pre style=&quot;background-color:#272822;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;.iter{
&lt;&#x2F;span&gt;&lt;span&gt;    stroke: steelblue;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;.recurse{
&lt;&#x2F;span&gt;&lt;span&gt;    stroke: rgb(223, 94, 98);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;.axis {
&lt;&#x2F;span&gt;&lt;span&gt;  shape-rendering: crispEdges;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;.x.axis line {
&lt;&#x2F;span&gt;&lt;span&gt;  stroke: lightgrey;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;.x.axis .minor {
&lt;&#x2F;span&gt;&lt;span&gt;  stroke-opacity: .5;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;.x.axis path {
&lt;&#x2F;span&gt;&lt;span&gt;  display: none;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;.y.axis line, .y.axis path {
&lt;&#x2F;span&gt;&lt;span&gt;  fill: none;
&lt;&#x2F;span&gt;&lt;span&gt;  stroke: #000;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;style&gt;
&lt;svg viewBox=&quot;0 0 1000 400&quot;&gt;
    &lt;g transform=&quot;translate(80,80)&quot;&gt;
        &lt;g class=&quot;x axis&quot; transform=&quot;translate(0,240)&quot;&gt;
            &lt;g class=&quot;tick&quot; transform=&quot;translate(0,0)&quot;&gt;
                &lt;line y2=&quot;-240&quot; x2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text y=&quot;10&quot; x=&quot;0&quot; dy=&quot;.71em&quot; style=&quot;text-anchor: middle;&quot;&gt;2⁹&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;g class=&quot;tick&quot; transform=&quot;translate(120,0)&quot;&gt;
                &lt;line y2=&quot;-240&quot; x2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text y=&quot;10&quot; x=&quot;0&quot; dy=&quot;.71em&quot; style=&quot;text-anchor: middle;&quot;&gt;2¹⁰&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;g class=&quot;tick&quot; transform=&quot;translate(240,0)&quot;&gt;
                &lt;line y2=&quot;-240&quot; x2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text y=&quot;10&quot; x=&quot;0&quot; dy=&quot;.71em&quot; style=&quot;text-anchor: middle;&quot;&gt;2¹¹&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;g class=&quot;tick&quot; transform=&quot;translate(360,0)&quot;&gt;
                &lt;line y2=&quot;-240&quot; x2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text y=&quot;10&quot; x=&quot;0&quot; dy=&quot;.71em&quot; style=&quot;text-anchor: middle;&quot;&gt;2¹²&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;g class=&quot;tick&quot; transform=&quot;translate(480,0)&quot;&gt;
                &lt;line y2=&quot;-240&quot; x2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text y=&quot;10&quot; x=&quot;0&quot; dy=&quot;.71em&quot; style=&quot;text-anchor: middle;&quot;&gt;2¹³&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;g class=&quot;tick&quot; transform=&quot;translate(599.9999999999999,0)&quot;&gt;
                &lt;line y2=&quot;-240&quot; x2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text y=&quot;10&quot; x=&quot;0&quot; dy=&quot;.71em&quot; style=&quot;text-anchor: middle;&quot;&gt;2¹⁴&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;g class=&quot;tick&quot; transform=&quot;translate(720,0)&quot;&gt;
                &lt;line y2=&quot;-240&quot; x2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text y=&quot;10&quot; x=&quot;0&quot; dy=&quot;.71em&quot; style=&quot;text-anchor: middle;&quot;&gt;2¹⁵&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;g class=&quot;tick&quot; transform=&quot;translate(840,0)&quot;&gt;
                &lt;line y2=&quot;-240&quot; x2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text y=&quot;10&quot; x=&quot;0&quot; dy=&quot;.71em&quot; style=&quot;text-anchor: middle;&quot;&gt;2¹⁶&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;path class=&quot;domain&quot; d=&quot;M0,-240V0H840V-240&quot;&gt;&lt;&#x2F;path&gt;
        &lt;&#x2F;g&gt;
        &lt;text class=&quot;y label&quot; text-anchor=&quot;end&quot; y=&quot;6&quot; dy=&quot;.75em&quot; transform=&quot;rotate(-90)&quot;&gt;execution time (milliseconds)&lt;&#x2F;text&gt;
        &lt;text class=&quot;x label&quot; text-anchor=&quot;end&quot; x=&quot;200&quot; y=&quot;280&quot; dx=&quot;.75em&quot;&gt;array length&lt;&#x2F;text&gt;
        &lt;rect x=&quot;140&quot; y=&quot;55&quot; width=&quot;10&quot; height=&quot;10&quot; style=&quot;fill: steelblue;&quot;&gt;&lt;&#x2F;rect&gt;
        &lt;rect x=&quot;140&quot; y=&quot;25&quot; width=&quot;10&quot; height=&quot;10&quot; style=&quot;fill: rgb(223, 94, 98);&quot;&gt;&lt;&#x2F;rect&gt;
        &lt;text text-anchor=&quot;start&quot; x=&quot;160&quot; y=&quot;65&quot;&gt;Iterative&lt;&#x2F;text&gt;
        &lt;text text-anchor=&quot;start&quot; x=&quot;160&quot; y=&quot;35&quot;&gt;Recursive&lt;&#x2F;text&gt;
        &lt;g class=&quot;y axis&quot; transform=&quot;translate(-25,0)&quot;&gt;
            &lt;g class=&quot;tick&quot; transform=&quot;translate(0,240)&quot;&gt;
                &lt;line x2=&quot;-6&quot; y2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text x=&quot;-9&quot; y=&quot;0&quot; dy=&quot;.32em&quot; style=&quot;text-anchor: end;&quot;&gt;0&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;g class=&quot;tick&quot; transform=&quot;translate(0,188.4978540772532)&quot;&gt;
                &lt;line x2=&quot;-6&quot; y2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text x=&quot;-9&quot; y=&quot;0&quot; dy=&quot;.32em&quot; style=&quot;text-anchor: end;&quot;&gt;100&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;g class=&quot;tick&quot; transform=&quot;translate(0,136.99570815450642)&quot;&gt;
                &lt;line x2=&quot;-6&quot; y2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text x=&quot;-9&quot; y=&quot;0&quot; dy=&quot;.32em&quot; style=&quot;text-anchor: end;&quot;&gt;200&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;g class=&quot;tick&quot; transform=&quot;translate(0,85.49356223175965)&quot;&gt;
                &lt;line x2=&quot;-6&quot; y2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text x=&quot;-9&quot; y=&quot;0&quot; dy=&quot;.32em&quot; style=&quot;text-anchor: end;&quot;&gt;300&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;g class=&quot;tick&quot; transform=&quot;translate(0,33.99141630901286)&quot;&gt;
                &lt;line x2=&quot;-6&quot; y2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text x=&quot;-9&quot; y=&quot;0&quot; dy=&quot;.32em&quot; style=&quot;text-anchor: end;&quot;&gt;400&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;path class=&quot;domain&quot; d=&quot;M-6,0H0V240H-6&quot;&gt;&lt;&#x2F;path&gt;
        &lt;&#x2F;g&gt;
        &lt;path class=&quot;iter&quot; d=&quot;M0,240L0,240L0,240L0,240L0,240L0,240L0,240L0,240L0,240L0,239.48497854077254L120,238.96995708154506L240,236.90987124463518L360,233.8197424892704L480,228.6695278969957L599.9999999999999,215.27896995708156L720,195.1931330472103L840,146.78111587982832&quot;&gt;&lt;&#x2F;path&gt;
        &lt;path class=&quot;recurse&quot; d=&quot;M0,240L0,240L0,240L0,240L0,240L0,239.48497854077254L0,240L0,240L0,239.48497854077254L0,238.4549356223176L120,237.42489270386267L240,233.3047210300429L360,225.57939914163092L480,214.24892703862662L599.9999999999999,185.40772532188842L720,121.54506437768241L840,0&quot;&gt;&lt;&#x2F;path&gt;
    &lt;&#x2F;g&gt;
&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Computational Fluid Dynamics in Under 1K: How I Made My JS1K Entry</title>
        <published>2014-02-17T12:49:00+00:00</published>
        <updated>2014-02-17T12:49:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://ebenpackwood.com/posts/wavybits.html/" type="text/html"/>
        <id>https://ebenpackwood.com/posts/wavybits.html/</id>
        
        <content type="html">&lt;p&gt;&lt;em&gt;Being an attempt to write a computational fluid dynamics simulation using no more than two raised to the power ten bytes.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;First, before I begin, N.B: apparently the extreme brevity required by this project has put me in rather a garrulous
mood, so I apologize for the length of this post-mortem. If you&#x27;re interested in maybe learning a few byte shaving
tricks for your own js1k, though, read on. Also, verbose variable names will be used for the sake of clarity, though
keep in mind that all variables here have a single letter identifier in the final program.&lt;&#x2F;p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;what-it-is&quot;&gt;What it is&lt;&#x2F;h2&gt;
&lt;p&gt;This project, written for the &lt;a href=&quot;http:&#x2F;&#x2F;js1k.com&#x2F;2014-dragons&#x2F;&quot;&gt;JS1K competition&lt;&#x2F;a&gt;
(&lt;a href=&quot;&#x2F;pages&#x2F;projects&#x2F;js1k.html&quot;&gt;demo here&lt;&#x2F;a&gt;), is essentially a complete rewrite of an
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ebenpack&#x2F;lattice-boltzmann.js&quot;&gt;earlier, much more feature rich project&lt;&#x2F;a&gt;. You can
have a look at the &lt;a href=&quot;&#x2F;pages&#x2F;projects&#x2F;lattice-boltzmann.html&quot;&gt;demo&lt;&#x2F;a&gt;, which is probably more interesting
than this 1K version, but which is an order of magnitude larger in the bytes department. If you&#x27;re not familiar with
the lattice Boltzmann method, there&#x27;s a fairly nice introduction
&lt;a href=&quot;http:&#x2F;&#x2F;physics.weber.edu&#x2F;schroeder&#x2F;fluids&#x2F;FluidSimulationsForUndergrads.pdf&quot;&gt;here (pdf)&lt;&#x2F;a&gt;, or you can read
&lt;a href=&quot;&#x2F;posts&#x2F;lattice-boltzmann.html&quot;&gt;my explanation&lt;&#x2F;a&gt;. The TL;DR version, though, is that this is a 2D
computational fluid dynamics simulation. You can think of it as the surface of a pond that you&#x27;re dragging your finger
through.&lt;&#x2F;p&gt;
&lt;p&gt;So what does this have to do with the contest&#x27;s theme, &#x27;here be dragons&#x27;? Well, nothing, really. It&#x27;s just an
interesting problem I was working on recently, and I thought it would be fun to see if it was possible to achieve in 1K.
So let&#x27;s get to it, shall we.&lt;&#x2F;p&gt;
&lt;p&gt;I started this project with a slightly modified version of the original program mentioned earlier. The original program
clocked in just north of 20000 bytes, uncompressed, and the modified version was around about 4000 bytes. It fairly
quickly became clear, though, that I wasn&#x27;t going to be able to cut the size by three-quarters, and a fresh start was
required. I wasn&#x27;t quite so quick to accept this, though, and wasted a few commits trying to make it work. But once I
had started fresh with just the core features (starting at about 1900 bytes), from there it was pretty rough sledding
down to 1K. Strangely, as difficult as it was initially to trim away bytes, once I hit 1K the bytes seemed to keep
melting off. The smallest size I achieved was 944 bytes, although this version was mostly an attempt to test the limits,
and, while it &#x27;worked&#x27;, it had some serious issues. From this low-byte point, I began to add features and improve
performance, while continuing to strip away any extra bytes I could. At this stage, the program oscillated between ~990
and ~1200 bytes. As I added each new feature, the size of the program would balloon up over 1K, and I then had to fret
over whether to keep the feature, swap it for another one, or else find some other way to strip away a few spare bytes.
If I can coin an analogy, the whole process was a bit like throwing tic-tacs and pennies out the window of your Chrysler
K-car to make it go faster. Anyway, here&#x27;s a little of what I learned.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-things-i-m-most-proud-ashamed-of-or-speedups-and-speedbumps&quot;&gt;The things I&#x27;m most proud&#x2F;ashamed of, or, speedups and speedbumps:&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;flatten-all-the-things&quot;&gt;Flatten all the things&lt;&#x2F;h3&gt;
&lt;p&gt;One of the early significant breakthroughs came with flattening every possible nested loop. As the lattice Boltzmann
method makes use of a lattice (shocking, I know), it&#x27;s perhaps most natural to represent this with a multi-dimensional
array. In this case, where we are working with a two-dimensional lattice, a two-dimensional array would be most
appropriate. In JavaScript, this would be represented by an n-length array, each element of which being an m-length
array, where n and m are the width and height respectively (in this program, width and height are equal, to save from
having to cache both the width and the height; further, it was decided that width and height would be 99, as this saves
a single byte vs a triple digit array size... seriously). Accessing this array would look like this: &lt;code&gt;lattice[x][y]&lt;&#x2F;code&gt;.
The simplest way to loop over each of the elements of the lattice would be two nested loops, like so:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;lattice_width; x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;lattice_height; y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        lattice[x][y];
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The lattice Boltzmann method requires looping over the array at least twice per tick, once for the streaming phase, and
once for the collision phase (although it &lt;em&gt;may&lt;&#x2F;em&gt; be possible to do it in a single loop with some additional storage on
each node and some more complicated logic to shuffle around distributions, I never looked into it closely enough to
determine the feasibility of this option, so I leave it as an exercise for the reader). However, while it is necessary
to iterate over the array at least twice, these iterations needn&#x27;t be performed with nested loops. It is possible to
loop over any n-by-m array with a single loop. To do this, you loop from 0 to the total number of items in the the array
(n*m), and determine the x and y coordinates on the fly, like so:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;(lattice_width &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;lattice_height); i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span&gt;lattice_width; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; x-coordinate
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;Math&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;floor&lt;&#x2F;span&gt;&lt;span&gt;(i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span&gt;lattice_width); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; y-coordinate
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    lattice[x][y];
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If it&#x27;s not clear why this works, think of it this way: &lt;code&gt;y&lt;&#x2F;code&gt; is increasing by one every time we go through another
&lt;code&gt;lattice_width&lt;&#x2F;code&gt; values. This corresponds exactly to the row numbers. And &lt;code&gt;x&lt;&#x2F;code&gt; is cycling between 0 and &lt;code&gt;lattice_width&lt;&#x2F;code&gt;,
which corresponds to the column numbers.&lt;&#x2F;p&gt;
&lt;p&gt;Although calculating the x and y coordinates does take a few extra bytes, the elimination of the inner loop more than
makes up for this. For the most part, flattening these nested loops was fairly straightforward. However, I did have some
problems flattening the draw loop. This loop iterates over a square region of the canvas image, and draws a colored
square for each lattice node. Originally this loop looked like this:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;ypx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;y_pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;px_per_node; ypx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;(y_pos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;px_per_node; ypx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;xpx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;x_pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;px_per_node; xpx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;(x_pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;px_per_node; xpx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(xpx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;ypx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;image.width) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            image.data[index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;color.red;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            image.data[index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;color.green;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            image.data[index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;color.blue;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            image.data[index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;color.alpha;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The additional logic in each loop initialization and condition, and in calculating the index, made this one a little
more difficult to figure out. At its core, though, this loop is merely iterating over a square region of the image.
Since I decided to fix the width and height of the image that&#x27;s drawn to the canvas (which also simplified many other
areas of the program and saved quite a few bytes), this loop eventually boiled down to this:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;36&lt;&#x2F;span&gt;&lt;span&gt;; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;Math&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;floor&lt;&#x2F;span&gt;&lt;span&gt;(i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;(x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;x_pos) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;image.width &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;(y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;y_pos)));
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;where 36 is the fixed area of the square to be drawn, and 6 is the width and height of that square (AKA &lt;code&gt;px_per_node&lt;&#x2F;code&gt;).
You may recognize the method of calculating x and y from earlier. The rest of the logic merely calculates the image
index, and is an implementation detail of the image data array. When I was working on this late at night, this extra
logic confounded the problem immensely, but after breaking it down into its essential components it became clear enough.&lt;&#x2F;p&gt;
&lt;p&gt;A related trick that gained a few extra bytes was to flatten the two dimensional array representing the lattice into a
one-dimensional array. This complicates lookup slightly (each node is accessed via &lt;code&gt;lattice[x+y*width]&lt;&#x2F;code&gt; instead of
&lt;code&gt;lattice[x][y]&lt;&#x2F;code&gt;), and you may notice that, even when the width variable is squashed to a single letter, lookup with this
method actually takes one more byte. The small extra lookup cost was worth it, however, as I was able to eliminate an
&lt;code&gt;if&lt;&#x2F;code&gt; test during initialization, which was checking to see if the initialization loop had reached a new column in the
array, and adding a new array if it had (which looked like this):&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(y_pos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    lattice[x_pos]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;[];
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;flows-of-data-more-vast-than-anything-the-world-has-seen&quot;&gt;Flows of data more vast than anything the world has seen&lt;&#x2F;h2&gt;
&lt;p&gt;If you&#x27;re trying to shave bytes, one of the most important things is efficient data storage. If you can eliminate the
need for data storage altogether (e.g. with procedural generation), so much the better. But for this project, there was
a small amount of data that was absolutely critical, and which, so far as I can tell, cannot be succinctly
programmatically generated. These were, namely, the velocities associated with each distribution function (DF) and the
distribution function weights. In the lattice Boltzmann method, each node has a number of distribution functions, each
representing a distribution of particle densities. In this program (which uses the D2Q9 discretization... which just
means a two-dimensional lattice, with 9 velocities per node), each node has nine of these distribution functions.
These are numbered from zero to eight. Zero represents the &#x27;at-rest&#x27; velocity, one through four represent the cardinal
direction velocities, and five through eight represent the ordinal direction velocities. In order for these
distributions to stream in their direction of travel (i.e. move from one node another), each must have some notion of
what that direction is. Originally I had stored these directions as an 8-by-2 array, where each inner array represented
the delta x and y for its respective distribution to travel. This looked something like this:
&lt;code&gt;ND = [[0,0],[1,0],[0,-1],[-1,0],[0,1],[1,-1],[-1,-1],[-1,1],[1,1]]&lt;&#x2F;code&gt;. So, for example, the &#x27;6&#x27; distribution travels -1
in the x direction, and -1 in the y direction. For a node at coordinates (100,100), after streaming the &#x27;6&#x27; distribution
from (100,100) would end up at coordinates (99,99). You may notice that the data above contains a fair number of
non-data characters in the form of brackets and commas. Altogether, this array takes up 61 bytes. My initial solution to
reduce the size of this data, which was one of my largest blunders on this project, was to represent this data as a
string. I will give you a moment to allow that to sink in. If it strikes you that this is an utterly inane solution, you
are correct, but I think there&#x27;s a lesson to be learned here, so let&#x27;s have a look at how I came to it. With this
method, the data would look like this &lt;code&gt;ND = &amp;quot; 0 0 1 0 0-1-1 0 0 1 1-1-1-1-1 1 1 1&amp;quot;&lt;&#x2F;code&gt;. Note the extra spaces, which are
used to pad non negative numbers to a string length of 2. This makes lookup much simpler. Now granted, this storage
method is much more compact (it&#x27;s only 38 bytes), but lookup is more complicated and verbose. It would look something
like this &lt;code&gt;ND.slice(x*4,x*4+2),ND.slice(x*4+2,x*4+4)&lt;&#x2F;code&gt;, where x is the distribution we are looking at from 0 to 8.
Although &lt;code&gt;slice&lt;&#x2F;code&gt; might seem quite expensive, when I was employing this method I was caching the string &#x27;slice&#x27; once and
using bracket notation, like this: &lt;code&gt;X=&#x27;slice&#x27;;ND[X](x*4,x*4+2)&lt;&#x2F;code&gt;, so overall it wasn&#x27;t too terrible, and the extra bytes
needed for lookup were still made up by the relative compactness of the storage method. However, a quick
&lt;a href=&quot;http:&#x2F;&#x2F;jsperf.com&#x2F;string-slice-vs-array-lookup&quot;&gt;jsperf&lt;&#x2F;a&gt; revealed that this method was over 90% slower than a simple
array lookup. Perhaps some of you have by now come to the realization that took me far, far too long. This data can be
stored in a single dimensional array for a few extra bytes (43 total), but with the dual benefits of significantly
faster lookup time, and of saving several bytes per lookup (&lt;code&gt;ND[x*2]&lt;&#x2F;code&gt; vs &lt;code&gt;ND[X](x*4,x*4+2)&lt;&#x2F;code&gt;; keep in mind that the
latter example would almost certainly have cached &lt;code&gt;x*4&lt;&#x2F;code&gt;, and in reality would be &lt;code&gt;ND[X](x,x+2)&lt;&#x2F;code&gt;). Additionally, another
10 bytes are saved by not having to cache &#x27;slice&#x27;. Perhaps the worst part of this whole ordeal is how inordinately
clever I thought I was being at the time. So the lesson here, if there is one, is that you&#x27;re almost certainly never as
clever as you think you are. If you get myopia about a problem and lock into your initial solution, you can close
yourself off to the easier, more elegant solution.&lt;&#x2F;p&gt;
&lt;p&gt;There was also one more savings on data. Each DF has a weight associated with it. Zero has its own weight
(&lt;code&gt;one9th=1&#x2F;9&lt;&#x2F;code&gt;), the cardinal directions share another weight (&lt;code&gt;four9ths=4&#x2F;9&lt;&#x2F;code&gt;), and the ordinal directions share yet
another (&lt;code&gt;one36th=1&#x2F;36&lt;&#x2F;code&gt;). Originally I was storing these velocities in their own array. Of course this was very costly.
Even though tacking them onto the node directions array saved a few extra bytes, there was still a lot of unnecessary
repetition (&lt;code&gt;four9ths&lt;&#x2F;code&gt; and &lt;code&gt;one36th&lt;&#x2F;code&gt; were each stored in four separate locations, each of those instances requiring an
extra comma in the array). Since this data is only used once, in the equilibrium function, it is hard to justify
spending so many bytes on storage. So it was a very obvious candidate for some form of simplification or compression.
The most succinct method I was able to find was to use an if&#x2F;else statement inside the loop over the DFs
(i.e. from 0 to 8), which fails if zero (thus setting else &lt;code&gt;weight&lt;&#x2F;code&gt; to 4&#x2F;9), and otherwise evaluates a conditional
operator. If we are looking at velocities one through four, the weight is 1&#x2F;9, otherwise it is 1&#x2F;36. So like this:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(i) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        weight &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;36&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        weight &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Google&#x27;s closure compiler further compacts this piece of logic in a way I myself probably wouldn&#x27;t have thought of
(&lt;code&gt;weight=i?5&amp;gt;i?1&#x2F;9:1&#x2F;36:4&#x2F;9&lt;&#x2F;code&gt;). Overall a significant byte savings was realized over storing this data in its own array.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sound-trumpets-let-our-bloody-colours-wave&quot;&gt;Sound trumpets! let our bloody colours wave!&lt;&#x2F;h2&gt;
&lt;p&gt;This is a brief point, but I think it&#x27;s an important one. Visually, the program originally drew green &#x27;waves&#x27; on a
black background. In my opinion, this doesn&#x27;t look too bad. Working with any more colors than this was pretty much off
the table, as it would not have been within my byte budget, and there were many more things besides that would have
taken precedence if I had the bytes to spare. For a long time, I was achieving this effect by setting the background
style property of the canvas to black (at a cost of 26 bytes). Eventually, though, it became clear that this was too
expensive, and would have to go. So for a while I was drawing green waves on a white background. This looked... less
nice. I experimented with different colored waves—red, black, blue, everything... light blue—still on a white
background, but they were all lacking. Eventually I realized that I could achieve the exact same effect as I had been
without using any extra bytes. I had been setting the green channel of each pixel to 255 (well, 600, actually, as I
already had 600 cached in a variable anyway, to use for the width and height of the image... setting this well above
the allowed maximum hasn&#x27;t seemed to have any ill effects, and 2 bytes is 2 bytes), and varying the alpha channel
based on speed. This has the effect of drawing each lattice node green, with the alpha channel being proportional to the
speed at that node. Like this:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;image.data[index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Green channel
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;image.data[index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;speed; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Alpha channel
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using this method, if a node has low or no speed, it is essentially transparent. In other words, the background color
can and will shine through. Eventually I came to realize that if I swapped these (in other words, set the alpha channel
to a constant (i.e. fully opaque), and vary the green channel proportionally with the speed at the node), that I could
achieve the same green on black effect I had wanted, but at absolutely no additional cost over what I was already using.
This works primarily because the different channels are defaulted to 0. So when speed is 0, the node would be colored
&lt;code&gt;{r: 0, g: 0, b: 0, a: 255}&lt;&#x2F;code&gt; (black), and when speed is high, it would be &lt;code&gt;{r: 0, g: 255, b: 0, a: 255}&lt;&#x2F;code&gt; (green).
Somewhat embarrassingly, this realization came when trying random color combinations. It was not a stroke of insight so
much as it was a happy accident. The takeaway here being, if something isn&#x27;t working for you, there very well may be
more than one way to achieve the same effect. Don&#x27;t give up on something just because your first attempt failed or was
too costly. Keep experimenting. You&#x27;re almost certainly not so smart that you can&#x27;t stumble your way into something, at
some point, that you couldn&#x27;t have thought your way into.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-point-of-no-returns&quot;&gt;The point of no &lt;code&gt;return&lt;&#x2F;code&gt;s&lt;&#x2F;h2&gt;
&lt;p&gt;This was a small-ish savings, but if you look at my program, you may notice that there isn&#x27;t a single return statement.
Not one. After all, &lt;code&gt;return&lt;&#x2F;code&gt; is pretty costly. To return anything meaningful requires at least nine bytes, plus two more
for assignment upon calling. Streaming and collision don&#x27;t really require a &lt;code&gt;return&lt;&#x2F;code&gt; (they both manipulate the &lt;code&gt;lattice&lt;&#x2F;code&gt;
array which is in the global scope). The mouse function doesn&#x27;t require one. The equilibrium function originally did
return the equilibrium array, but ultimately it didn&#x27;t require one either. To achieve this, an &lt;code&gt;eq&lt;&#x2F;code&gt; array was put into
the global scope. When it is necessary to calculate the equilibrium of a node, the &lt;code&gt;equilibrium&lt;&#x2F;code&gt; function is called on
it&#x27;s own, and on the next line the equilibrium values are accessed from the now updated &lt;code&gt;eq&lt;&#x2F;code&gt; variable. In other words,
it&#x27;s all about the side-effects. In the following example, the equilibrium values are calculated using the node&#x27;s
density and fixed x and y velocity values (0.1); the node&#x27;s streaming array (which is just a place to store streaming
values, to save us having to throw out and rebuild every single node on every single tick) is then set to the recently
calculated equilibrium values.&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Here eq holds outdated values
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;equilibrium&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;, node.density); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; eq values are up to date after this executes
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;node.stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;eq; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Set streaming array to new equilibrium values
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The one important thing to note here is that, since the &lt;code&gt;eq&lt;&#x2F;code&gt; variable is shared quite promiscuously, it is imperative
that a new array be created each and every time the equilibrium value is calculated, otherwise every node would share a
reference to the same array, and madness would ensue. This is the inherent danger of mutable state, but there&#x27;s no way
around it if you want to trim some bytes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;i-ain-t-got-time-to-var&quot;&gt;I ain&#x27;t got time to &lt;code&gt;var&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;If you look carefully at the fully minified version of this program, you may notice something interesting. Every single
variable is in the global scope. Every. Single. One. Well... aside from the arguments to the &lt;code&gt;equilibrium&lt;&#x2F;code&gt; and
&lt;code&gt;mousemove&lt;&#x2F;code&gt; functions. But the point is, there isn&#x27;t a single instance of &lt;code&gt;var&lt;&#x2F;code&gt; in the entire program. Now, Google&#x27;s
closure compiler doesn&#x27;t rename globals, as this could cause serious issues, so this was one of the more difficult
optimizations to achieve. Since the compiler would not have any qualms about using, for example, the local variable
identifier &lt;code&gt;a&lt;&#x2F;code&gt; in two separate functions (as they would each belong to their own scope, neither would ever be in danger
of overwriting the data of the other), it isn&#x27;t possible to simply delete all &lt;code&gt;var&lt;&#x2F;code&gt;&#x27;s from the compiled program without
risking dangerous name collisions. While this may work coincidentally in certain instances, it&#x27;s not a technique that
can be consistently relied upon. So in order to eliminate all local variables, I had to manually rename virtually all
variables to single letter identifiers, making certain that there were no name clashes. This was particularly difficult,
as it required some careful bookkeeping to keep the different variables straight. It is probably best to perform this
step as late as possible, once your program is functioning properly and the functionality has been more or less locked
down, as once this is performed your program will become significantly more difficult to understand and follow, even in
its uncompiled state. Before you reach this step, though, you can make this process much easier for yourself by only
using unique, easily searchable, and easily mechanically replacable identifiers for all your different variables. So as
an example, having the variables &lt;code&gt;lattice&lt;&#x2F;code&gt; and &lt;code&gt;lattice_width&lt;&#x2F;code&gt; could present problems if you were to search&#x2F;replace
&lt;code&gt;lattice&lt;&#x2F;code&gt; before &lt;code&gt;lattice_width&lt;&#x2F;code&gt;. Also, loop variables can generally be reused with impunity, although it&#x27;s best to
perform a quick sanity check to make certain there won&#x27;t ever be conflicts when reusing them before renaming. As an
example, if you are using the loop variable &lt;code&gt;i&lt;&#x2F;code&gt; in both your &lt;code&gt;update&lt;&#x2F;code&gt; function and your &lt;code&gt;stream&lt;&#x2F;code&gt; function, if &lt;code&gt;update&lt;&#x2F;code&gt;
were to call &lt;code&gt;stream&lt;&#x2F;code&gt; inside of a loop using this &lt;code&gt;i&lt;&#x2F;code&gt; variable, this could lead to problems. One other thing that was
helpful was to put the entire program in an immediately invoked function expression. This provides your program with its
own scope, and allows Google&#x27;s closure compiler to freely rename variables therein.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;requestanimationframe-captain&quot;&gt;&lt;code&gt;requestAnimationFrame&lt;&#x2F;code&gt;, captain&lt;&#x2F;h2&gt;
&lt;p&gt;Finally, it&#x27;s important to know when you can&#x27;t get away with trimming bytes. For a long time, I was using &lt;code&gt;setTimeout&lt;&#x2F;code&gt;
instead of either the much superior but much more verbose &lt;code&gt;requestAnimationFrame&lt;&#x2F;code&gt; or the probably not much better but
slightly more verbose &lt;code&gt;setInterval&lt;&#x2F;code&gt;. I thought this was an easy 11 bytes. It worked pretty well in chrome, which is what
I was primarily developing in, but it put firefox into an absolute fit. When it came time to test my program in Firefox,
it took me a while to determine what the actual issue was, and I wasted a fair amount of time chasing red herrings. When
I finally realized that &lt;code&gt;requestAnimationFrame&lt;&#x2F;code&gt; was not optional, it was pretty rough. The program was hovering right
around 1K, and &lt;code&gt;requestAnimationFrame&lt;&#x2F;code&gt; sent it over the top. I had to make some hard decisions as a result, and I had to
dig in even deeper to keep shaving off more bytes. If I had started with &lt;code&gt;requestAnimationFrame&lt;&#x2F;code&gt;, I still would have had
to shave the same number of bytes, but I might have saved myself a mini heartache of going from ~1K up into the 1040
range. That was pretty demoralizing. Now, I&#x27;m not saying every program absolutely needs to use &lt;code&gt;requestAnimationFrame&lt;&#x2F;code&gt;.
I believe it was only essential to this program because of the relatively high computational complexity of the
algorithm. I&#x27;m sure a less taxing program could easily get away with &lt;code&gt;setInterval&lt;&#x2F;code&gt;. The important takeaway here, though,
is that, whenever possible, you should find those things that are absolutely essential to your program as early as you
can, and make them nonnegotiable in your byte-budget. So if you determine early on that you absolutely need
&lt;code&gt;requestAnimationFrame&lt;&#x2F;code&gt; and &lt;code&gt;a.onmousemove=function(){}&lt;&#x2F;code&gt;, then you really only have 977 bytes to play with, not 1024.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;odds-and-bobs&quot;&gt;Odds and bobs&lt;&#x2F;h2&gt;
&lt;p&gt;A few random bits of advice:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Set up a build&#x2F;compile process early, especially if you&#x27;re using a mechanical minification service like Google&#x27;s
closure compiler. They have an easy to use API, and a little regex knowledge should do the rest. I manually
search&#x2F;replaced variables and things far more often than I really should have before I set up a compile script. I set
mine up to send to Google&#x27;s closure compiler, knock some variables off the response that I only kept around to keep the
closure compiler from using those identifiers, wipe out the IIFE I was using for scoping, and then finally print the
final length to the terminal. There were a few more steps I never bothered to automate, too, so I always knew that the
reported length was going to be ~10 bytes higher than the fully minified program.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;If you dig through my repo, you&#x27;ll find one commit message made early in the morning that reads &amp;quot;Had a few beers,
somehow gained 36 bytes?!?; 1100 bytes&amp;quot;. This was prior to reaching 1K, and at the time it was a pretty significant
step towards that goal. It wasn&#x27;t even that many beers, either. Who knows how many bytes could have been shed if it had
been tequila. So, I guess the point is, that it can&#x27;t hurt to get a little drunk? Maybe? Or even just step away for a
minute, take a walk, do whatever you need to to take your mind off the problem, and you might return to it with a new
perspective.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion-or-whatever&quot;&gt;Conclusion, or whatever&lt;&#x2F;h2&gt;
&lt;p&gt;Though this project certainly had its low points, and there were a few moments when I seriously questioned whether what
I had set out to do was even possible, ultimately I achieved my goal: I made a program that was far more functional and
polished than I would have thought possible in such a small number of bytes, I learned a few interesting and useful
things about JavaScript (and a couple of dirty, dirty hacks), and I got a different perspective on programming in
general.&lt;&#x2F;p&gt;
&lt;p&gt;The French Oulipo are a group of writers and mathematicians who are primarily known for their constrained writing.
Georges Perec, for example, wrote a 300 page lipogram novel, &lt;em&gt;La disparition&lt;&#x2F;em&gt;, in which the letter &#x27;e&#x27; is never used.
Like, at all. Ever. In French, the letter &#x27;e&#x27; has a slightly higher frequency than it does in English, so this was no
small feat. While it can be maddening at times, as the Oulipo realized, imposing an arbitrary constraint upon yourself
can force you to focus more clearly on what you are doing, and can lead to brilliant insights you might never have
realized otherwise, as well as a deeper understanding of the boundaries of the system you&#x27;re working in.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Computational Fluid Dynamics Made Easy</title>
        <published>2014-02-16T12:49:00+00:00</published>
        <updated>2014-02-16T12:49:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://ebenpackwood.com/posts/lattice-boltzmann.html/" type="text/html"/>
        <id>https://ebenpackwood.com/posts/lattice-boltzmann.html/</id>
        
        <content type="html">&lt;div style=&quot;height:0&quot;&gt;
    &lt;svg width=&quot;0&quot; height=&quot;0&quot;&gt;
        &lt;!-- Definitions --&gt;
        &lt;defs&gt;
            &lt;!-- Hatching pattern --&gt;
            &lt;pattern id=&quot;diagonalHatch&quot; patternUnits=&quot;userSpaceOnUse&quot; width=&quot;50&quot; height=&quot;50&quot; patternTransform=&quot;rotate(-45)&quot;&gt;
            &lt;rect x=&quot;0&quot; y=&quot;0&quot; width=&quot;100&quot; height=&quot;100&quot; fill=&quot;white&quot;&#x2F;&gt;
            &lt;path d=&quot;M -1,50 H 200&quot; stroke=&quot;#000000&quot; stroke-width=&quot;20&quot;&#x2F;&gt;
            &lt;&#x2F;pattern&gt;
        &lt;&#x2F;defs&gt;
        &lt;defs&gt;
            &lt;g id=&quot;arrow-group&quot;&gt;
                &lt;line x1=&quot;0&quot; y1=&quot;0&quot; x2=&quot;125&quot; y2=&quot;125&quot; stroke-width=&quot;10&quot;&gt;&lt;&#x2F;line&gt;
                &lt;polygon points=&quot;155,155 145,105 105,145&quot;&gt;&lt;&#x2F;polygon&gt;
            &lt;&#x2F;g&gt;
        &lt;&#x2F;defs&gt;
        &lt;defs&gt;
            &lt;g id=&quot;arrow-group-short&quot;&gt;
                &lt;line x1=&quot;0&quot; y1=&quot;0&quot; x2=&quot;85&quot; y2=&quot;85&quot; stroke-width=&quot;10&quot;&gt;&lt;&#x2F;line&gt;
                &lt;polygon points=&quot;110,110 100,60 60,100&quot;&gt;&lt;&#x2F;polygon&gt;
            &lt;&#x2F;g&gt;
        &lt;&#x2F;defs&gt;
        &lt;defs&gt;
            &lt;g id=&quot;triangle&quot;&gt;
                &lt;line x1=&quot;200&quot; y1=&quot;0&quot; x2=&quot;0&quot; y2=&quot;347&quot; stroke-width=&quot;10&quot;&gt;&lt;&#x2F;line&gt;
                &lt;line x1=&quot;200&quot; y1=&quot;0&quot; x2=&quot;400&quot; y2=&quot;347&quot; stroke-width=&quot;10&quot;&gt;&lt;&#x2F;line&gt;
                &lt;line x1=&quot;0&quot; y1=&quot;347&quot; x2=&quot;400&quot; y2=&quot;347&quot; stroke-width=&quot;10&quot;&gt;&lt;&#x2F;line&gt;
            &lt;&#x2F;g&gt;
        &lt;&#x2F;defs&gt;
        &lt;defs&gt;
            &lt;g id=&quot;particle-arrow&quot;&gt;
                &lt;circle cx=&quot;0&quot; cy=&quot;0&quot; r=&quot;30&quot;&gt;&lt;&#x2F;circle&gt;
                &lt;line x1=&quot;0&quot; y1=&quot;0&quot; x2=&quot;175&quot; y2=&quot;0&quot; stroke-width=&quot;15&quot;&gt;&lt;&#x2F;line&gt;
                &lt;polygon points=&quot;200,0 170,-20 170,20&quot;&gt;&lt;&#x2F;polygon&gt;
            &lt;&#x2F;g&gt;
        &lt;&#x2F;defs&gt;
        &lt;defs&gt;
            &lt;g id=&quot;arrow-group-large&quot;&gt;
                &lt;line x1=&quot;0&quot; y1=&quot;0&quot; x2=&quot;470&quot; y2=&quot;470&quot; stroke-width=&quot;10&quot;&gt;&lt;&#x2F;line&gt;
                &lt;polygon points=&quot;485,485 475,435 435,475&quot;&gt;&lt;&#x2F;polygon&gt;
            &lt;&#x2F;g&gt;
        &lt;&#x2F;defs&gt;
        &lt;defs&gt;
            &lt;g id=&quot;arrow-group-large-short&quot;&gt;
                &lt;line x1=&quot;0&quot; y1=&quot;0&quot; x2=&quot;330&quot; y2=&quot;330&quot; stroke-width=&quot;10&quot;&gt;&lt;&#x2F;line&gt;
                &lt;polygon points=&quot;345,345 335,295 295,335&quot;&gt;&lt;&#x2F;polygon&gt;
            &lt;&#x2F;g&gt;
        &lt;&#x2F;defs&gt;
    &lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Over the 2013 winter holidays I was looking for a project to work on. I had been interested in learning more about the
canvas element for a while, so, with the snow driving o’er the fields, I decided to make a simple snow simulation to
start learning some canvas basics. Once I had a simple snow program up and running in the canvas, I turned my attention
to implementing a wind system that would allow users to interact with the snow, creating gusts of wind with their mouse.
My initial naive attempts—which mostly involved a mesh of nodes which contained a single wind vector, and some
mechanism to propagate those vectors to the next node in their direction of travel—were fairly unsatisfactory, so I
began to look for ways to improve the wind system. After some cursory googling, I started looking in earnest at
computational fluid dynamics. This led me to the Navier-Stokes equations, which seemed just a little too complicated
for what I was after. Navier-Stokes led me to lattice-gas automata (LGA), which, while conceptually quite simple, has
some inherent issues. Finally, LGA led to the lattice Boltzmann methods (LBM).&lt;&#x2F;p&gt;
&lt;!--more--&gt;
&lt;p&gt;In the 1970s and 1980s, the LGA model was developed to simulate fluid flow. This model uses a lattice comprised of
individual cellular automata. Each cell can be in one of several states, each state representing particles at the cell
moving with different discrete velocities. For example, in one of the most popular forms of the model, in which the
lattice is represented as a hexagonal grid of cells, each cell has six or seven velocities (possibly including the
&#x27;at-rest&#x27; velocity), and each of these velocities can be in either the &#x27;on&#x27; or &#x27;off&#x27; state to indicate if there is a
particle at that node traveling at that velocity. Each discrete time step in the model is comprised of two phases: the
streaming phase, in which particles move from one node to the next in their direction of travel, and the collision
phase, in which the particles within a node collide and bounce off each other and change direction.&lt;&#x2F;p&gt;
&lt;div id=&quot;lattice-gas-illustration&quot;&gt;
    &lt;svg width=&quot;300&quot; height=&quot;200&quot; viewbox=&quot;-20 -20 1230 650&quot;&gt;
        &lt;!-- First row --&gt;
        &lt;g class=&quot;triangle&quot; transform=&quot;translate(0,0)&quot;&gt;
            &lt;use xlink:href=&quot;#triangle&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;triangle&quot; transform=&quot;translate(200,-52) rotate(180 200 200)&quot;&gt;
            &lt;use xlink:href=&quot;#triangle&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;triangle&quot; transform=&quot;translate(400, 0)&quot;&gt;
            &lt;use xlink:href=&quot;#triangle&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;triangle&quot; transform=&quot;translate(600, -52) rotate(180 200 200)&quot;&gt;
            &lt;use xlink:href=&quot;#triangle&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;triangle&quot; transform=&quot;translate(800, 0)&quot;&gt;
            &lt;use xlink:href=&quot;#triangle&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;!-- Second row --&gt;
        &lt;g class=&quot;triangle&quot; transform=&quot;translate(0,294) rotate(180 200 200)&quot;&gt;
            &lt;use xlink:href=&quot;#triangle&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;triangle&quot; transform=&quot;translate(200,345)&quot;&gt;
            &lt;use xlink:href=&quot;#triangle&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;triangle&quot; transform=&quot;translate(400,294) rotate(180 200 200)&quot;&gt;
            &lt;use xlink:href=&quot;#triangle&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;triangle&quot; transform=&quot;translate(600,345)&quot;&gt;
            &lt;use xlink:href=&quot;#triangle&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;triangle&quot; transform=&quot;translate(800,294) rotate(180 200 200)&quot;&gt;
            &lt;use xlink:href=&quot;#triangle&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;!-- Particles --&gt;
        &lt;g class=&quot;particle-arrow&quot; transform=&quot;translate(400,347)&quot;&gt;
            &lt;use xlink:href=&quot;#particle-arrow&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;particle-arrow&quot; transform=&quot;translate(800,347) rotate(-120)&quot;&gt;
            &lt;use xlink:href=&quot;#particle-arrow&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;particle-arrow&quot; transform=&quot;translate(400,347) rotate(60)&quot;&gt;
            &lt;use xlink:href=&quot;#particle-arrow&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;particle-arrow&quot; transform=&quot;translate(400,347) rotate(120)&quot;&gt;
            &lt;use xlink:href=&quot;#particle-arrow&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;particle-arrow&quot; transform=&quot;translate(800,347) rotate(120)&quot;&gt;
            &lt;use xlink:href=&quot;#particle-arrow&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
    &lt;&#x2F;svg&gt;
    &lt;p class=&quot;illustration-label&quot;&gt;Two cells in a lattice-gas automata&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;While its conceptual simplicity is alluring, LGA has some major shortcomings, many of which LBM directly addresses.
And while LBM sacrifices a small amount of LGA&#x27;s simplicity for the sake of increased accuracy and robustness, LBM is
actually still surprisingly quite simple. Like LGA, LBM also consists of a lattice of nodes, but where LGA&#x27;s nodes have
a finite set of possible states, LBM&#x27;s nodes contain a set of particle distribution functions (DFs). In other words,
LBM is continuous where LGA is discrete.&lt;&#x2F;p&gt;
&lt;p&gt;LBM comes in many flavors. It can easily be configured for one-, two-, or three-dimensional spaces, each of which has
its own variants. In this example we will be discussing D2Q9, which means a two-dimensional lattice, with nine discrete
distribution functions per node. Other common configurations include D1Q3, D1Q5, D3Q15, and D3Q19&lt;&#x2F;p&gt;
&lt;p&gt;Each node in the lattice consists of a set of particle DFs. Together, these DFs represent a collection of particles, and
are related to the probability of finding a particle at a node, at a given time, with a particular velocity. For D2Q9,
there are nine DFs per node. The density of these DFs is represented by $n*i$. Each DF is also associated with a
velocity, represented by $\vec{e}*{i}$. These velocities correspond to the four cardinal directions, the four
ordinal directions, as well as the &#x27;at-rest&#x27; velocity. These velocities are chosen such that they carry a particle from
a node in the lattice to one of its neighboring nodes. For convenience, these velocities are each assigned a number, as
seen below.&lt;&#x2F;p&gt;
&lt;div id=&quot;node-distribution-illustration&quot;&gt;
    &lt;svg width=&quot;200&quot; height=&quot;200&quot; viewbox=&quot;-300 -300  1620 1620&quot;&gt;
        &lt;!-- Directions --&gt;
        &lt;rect class=&quot;outer&quot; width=&quot;990&quot; height=&quot;990&quot; x=&quot;20&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;!-- Ordinals --&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,515) rotate(0)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-large&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,515) rotate(90)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-large&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,515) rotate(180)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-large&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,515) rotate(270)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-large&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;!-- Cardinals --&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,515) rotate(45)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-large-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,515) rotate(135)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-large-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,515) rotate(225)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-large-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,515) rotate(315)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-large-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;515&quot; cy=&quot;515&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;text x=&quot;-100&quot; y=&quot;-50&quot;
            font-family=&quot;Verdana&quot;
            font-size=&quot;75&quot;&gt;
            6
        &lt;&#x2F;text&gt;
        &lt;text x=&quot;500&quot; y=&quot;-50&quot;
            font-family=&quot;Verdana&quot;
            font-size=&quot;75&quot;&gt;
            2
        &lt;&#x2F;text&gt;
        &lt;text x=&quot;1100&quot; y=&quot;-50&quot;
            font-family=&quot;Verdana&quot;
            font-size=&quot;75&quot;&gt;
            5
        &lt;&#x2F;text&gt;
        &lt;text x=&quot;-100&quot; y=&quot;550&quot;
            font-family=&quot;Verdana&quot;
            font-size=&quot;75&quot;&gt;
            3
        &lt;&#x2F;text&gt;
        &lt;text x=&quot;600&quot; y=&quot;500&quot;
            font-family=&quot;Verdana&quot;
            font-size=&quot;75&quot;&gt;
            0
        &lt;&#x2F;text&gt;
        &lt;text x=&quot;1100&quot; y=&quot;550&quot;
            font-family=&quot;Verdana&quot;
            font-size=&quot;75&quot;&gt;
            1
        &lt;&#x2F;text&gt;
        &lt;text x=&quot;1100&quot; y=&quot;1120&quot;
            font-family=&quot;Verdana&quot;
            font-size=&quot;75&quot;&gt;
            8
        &lt;&#x2F;text&gt;
        &lt;text x=&quot;500&quot; y=&quot;1120&quot;
            font-family=&quot;Verdana&quot;
            font-size=&quot;75&quot;&gt;
            4
        &lt;&#x2F;text&gt;
        &lt;text x=&quot;-100&quot; y=&quot;1120&quot;
            font-family=&quot;Verdana&quot;
            font-size=&quot;75&quot;&gt;
            7
        &lt;&#x2F;text&gt;
    &lt;&#x2F;svg&gt;
    &lt;p class=&quot;illustration-label&quot;&gt;Discrete velocities for D2Q9 model&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;The $x$ and $y$ components of the velocities for each $\vec{e}_{i}$ are shown below, and as you can see
they correspond to the diagram above.&lt;&#x2F;p&gt;
&lt;p&gt;$$
{\displaystyle
\begin{aligned}
&amp;amp;\vec{e}_{0} = (&amp;amp;0, &amp;amp;&amp;amp;0) \quad \\
&amp;amp;\vec{e}_{1} = (&amp;amp;1, &amp;amp;&amp;amp;0) \quad &amp;amp;\vec{e}_{5} = (&amp;amp; 1, &amp;amp;&amp;amp;1) \\
&amp;amp;\vec{e}_{2} = (&amp;amp;0, &amp;amp;&amp;amp;1) \quad &amp;amp;\vec{e}_{6} = (&amp;amp;-1, &amp;amp;&amp;amp;1) \\
&amp;amp;\vec{e}_{3} = (&amp;amp;-1, &amp;amp;&amp;amp;0) \quad &amp;amp;\vec{e}_{7} = (&amp;amp;-1,&amp;amp;&amp;amp;-1) \\
&amp;amp;\vec{e}_{4} = (&amp;amp;0, &amp;amp;&amp;amp;-1) \quad &amp;amp;\vec{e}_{8} = (&amp;amp; 1,&amp;amp;&amp;amp;-1) \\
\end{aligned}
}
$$&lt;&#x2F;p&gt;
&lt;p&gt;For each node in the lattice, two important properties can be calculated from the DFs. The macroscopic density at a
particular node is described by the equation $\rho = \sum n_{i}$, or the summation of the densities of the
individual distribution functions of a node (i.e. the macroscopic density). Once the density has been calculated, it
can then be used to calculate the macroscopic velocity, $\vec{u} = \frac{1}{\rho} \sum n_{i} \vec{e}_{i}$.&lt;&#x2F;p&gt;
&lt;p&gt;Like the LGA, the LBM consists of two phases which update the DFs: namely, streaming, and collision. In the streaming
phase, the DFs of each node move to the next node in their direction of travel. It is also during this phase that
boundary conditions are considered. If a boundary is encountered, the distributions that would have been streamed into
the boundary are in some way redirected away from that boundary. More will be said of this later.&lt;&#x2F;p&gt;
&lt;div id=&quot;stream-start-illustration&quot;&gt;
    &lt;svg width=&quot;200&quot; height=&quot;200&quot; viewbox=&quot;0 0 1020 1020&quot;&gt;
        &lt;!-- Streaming, start --&gt;
        &lt;!-- First column --&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;20&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(185,185) rotate(0)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;185&quot; cy=&quot;185&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;20&quot; y=&quot;350&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(185,515) rotate(315)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;185&quot; cy=&quot;515&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;20&quot; y=&quot;680&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(185,845) rotate(270)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;185&quot; cy=&quot;845&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;!-- Second column --&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;350&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,185) rotate(45)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;515&quot; cy=&quot;185&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;350&quot; y=&quot;350&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;!-- Ordinal directions --&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(515,515) rotate(0)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(515,515) rotate(90)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(515,515) rotate(180)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(515,515) rotate(270)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;!-- Cardinal directions --&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(515,515) rotate(45)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(515,515) rotate(135)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(515,515) rotate(225)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(515,515) rotate(315)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;515&quot; cy=&quot;515&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;350&quot; y=&quot;680&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,845) rotate(225)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;515&quot; cy=&quot;845&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;!-- Third column --&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;680&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(845,185) rotate(90)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;845&quot; cy=&quot;185&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;680&quot; y=&quot;350&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(845,515) rotate(135)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;845&quot; cy=&quot;515&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;680&quot; y=&quot;680&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(845,845) rotate(180)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;845&quot; cy=&quot;845&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
    &lt;&#x2F;svg&gt;
    &lt;p class=&quot;illustration-label&quot;&gt;Prior to streaming phase&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div id=&quot;stream-end-illustration&quot;&gt;
    &lt;svg width=&quot;200&quot; height=&quot;200&quot; viewbox=&quot;0 0 1020 1020&quot;&gt;
        &lt;!-- Streaming, end --&gt;
        &lt;!-- First column --&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;20&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(185,185) rotate(180)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;185&quot; cy=&quot;185&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;20&quot; y=&quot;350&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(185,515) rotate(135)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;185&quot; cy=&quot;515&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;20&quot; y=&quot;680&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(185,845) rotate(90)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;185&quot; cy=&quot;845&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;!-- Second column --&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;350&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(515,185) rotate(225)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;515&quot; cy=&quot;185&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;350&quot; y=&quot;350&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;!-- Ordinal directions --&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,515) rotate(0)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,515) rotate(90)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,515) rotate(180)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,515) rotate(270)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;!-- Cardinal directions --&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,515) rotate(45)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,515) rotate(135)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,515) rotate(225)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,515) rotate(315)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;515&quot; cy=&quot;515&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;350&quot; y=&quot;680&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(515,845) rotate(45)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;515&quot; cy=&quot;845&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;!-- Third column --&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;680&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(845,185) rotate(270)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;845&quot; cy=&quot;185&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;680&quot; y=&quot;350&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(845,515) rotate(315)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;845&quot; cy=&quot;515&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;680&quot; y=&quot;680&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(845,845) rotate(0)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;845&quot; cy=&quot;845&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
    &lt;&#x2F;svg&gt;
    &lt;p class=&quot;illustration-label&quot;&gt;After streaming phase&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;The collision phase moves the DFs at a node towards a local equilibrium. The collision phase for the LBM is somewhat
more complicated than that of LGA. The most important thing for this phase is that however the collision is calculated,
it must conserve mass, momentum and energy. One common approach to this phase is to make use of the
Bhatnagar-Gross-Krook (BGK) relaxation term. This is described by the equation
$\Omega_{i}=-\tau^{-1}(n_i-n_i^{eq})$, where $n_i^{eq}$ is a local equilibrium value for the DFs.
The term $\tau$ is a relaxation time, and is related to the viscosity. Equilibrium is calculated with the
equation $n_{i}^{eq} = \rho\omega_{i}[1+3\vec{e}_{i}\cdot\vec{u}+\frac{9}{2}(\vec{e}_{i}\cdot\vec{u}^{2})-\frac{3}{2}|\vec{u}|^{2}]$,
where the weights $\omega_{i}$ are as follows:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\begin{cases}\begin{alignat}{2}
\omega_{i=0} = \frac{4}{9} \\
\omega_{i={1..4}}= \frac{1}{9} \\
\omega_{i={5..8}}= \frac{1}{36}
\end{alignat}\end{cases}
$$&lt;&#x2F;p&gt;
&lt;p&gt;The new equilibrium values after collision are calculated with the following equation
$n_{i}^{new} = n_{i}^{old}+\frac{1}{\tau}(n_{i}^{eq}-n_{i}^{old})$&lt;&#x2F;p&gt;
&lt;p&gt;There are many options for handling boundary conditions, but for the sake of brevity we will only discuss a few of the
highlights. One of the most important distinctions with boundary conditions is between slip and no-slip conditions.
These describe the behavior of the fluid at the interface between fluid and solid boundary. The slip condition
represents a non-zero relative velocity between the fluid and the boundary, while no-slip represents a zero velocity
at the boundary.&lt;&#x2F;p&gt;
&lt;p&gt;In terms of implementation in a lattice Boltzmann simulation, these two boundary conditions would look like this: in
this example, before streaming, we have three distribution functions of three different nodes, all with the same
velocity. If boundary conditions were ignored, after streaming, each of these DFs would land within a boundary.&lt;&#x2F;p&gt;
&lt;div id=&quot;bounce-start-illustration-no-slip&quot;&gt;
    &lt;svg width=&quot;200&quot; height=&quot;200&quot; viewbox=&quot;0 0 1020 1020&quot;&gt;
        &lt;!-- Boundary conditions, starting position --&gt;
        &lt;!-- First column --&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;20&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;20&quot; y=&quot;350&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(185,515) rotate(-90)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;185&quot; cy=&quot;515&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;20&quot; y=&quot;680&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;!-- Second column --&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;350&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;350&quot; y=&quot;350&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-2&quot; transform=&quot;translate(515,515) rotate(-90)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;515&quot; cy=&quot;515&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;350&quot; y=&quot;680&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,845) rotate(-90)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;515&quot; cy=&quot;845&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;!-- Third column --&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;680&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;680&quot; y=&quot;350&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;680&quot; y=&quot;680&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
    &lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;After streaming, with the no-slip condition, each of those distributions are still headed in the same direction,
although they are now traveling in the opposite direction as prior to streaming. No-slip, in essence, can be thought
of as a simple reflection of the particles at the boundary. Upon encountering a boundary, a distribution is bounced back
to its source node, but with an opposing velocity.&lt;&#x2F;p&gt;
&lt;div id=&quot;bounce-no-slip-illustration&quot;&gt;
    &lt;svg width=&quot;200&quot; height=&quot;200&quot; viewbox=&quot;0 0 1020 1020&quot;&gt;
        &lt;!-- Boundary conditions, no-slip --&gt;
        &lt;!-- First column --&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;20&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;20&quot; y=&quot;350&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(185,515) rotate(90)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;185&quot; cy=&quot;515&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;20&quot; y=&quot;680&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;!-- Second column --&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;350&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;350&quot; y=&quot;350&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-2&quot; transform=&quot;translate(515,515) rotate(90)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;515&quot; cy=&quot;515&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;350&quot; y=&quot;680&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,845) rotate(90)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;515&quot; cy=&quot;845&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;!-- Third column --&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;680&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;680&quot; y=&quot;350&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;680&quot; y=&quot;680&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
    &lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Boundary slip is a bit more complicated in terms of implementation. In the example below, we start as before, with three
distribution functions of three different nodes, all headed in the same direction towards a boundary.&lt;&#x2F;p&gt;
&lt;div id=&quot;bounce-start-illustration-slip&quot;&gt;
    &lt;svg width=&quot;200&quot; height=&quot;200&quot; viewbox=&quot;0 0 1020 1020&quot;&gt;
        &lt;!-- Boundary conditions, starting position --&gt;
        &lt;!-- First column --&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;20&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;20&quot; y=&quot;350&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(185,515) rotate(-90)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;185&quot; cy=&quot;515&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;20&quot; y=&quot;680&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;!-- Second column --&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;350&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;350&quot; y=&quot;350&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-2&quot; transform=&quot;translate(515,515) rotate(-90)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;515&quot; cy=&quot;515&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;350&quot; y=&quot;680&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,845) rotate(-90)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;515&quot; cy=&quot;845&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;!-- Third column --&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;680&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;680&quot; y=&quot;350&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;680&quot; y=&quot;680&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
    &lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;After streaming we can see the distributions &#x27;slip&#x27; at the boundary.&lt;&#x2F;p&gt;
&lt;div id=&quot;bounce-slip-illustration&quot;&gt;
    &lt;svg width=&quot;200&quot; height=&quot;200&quot; viewbox=&quot;0 0 1020 1020&quot;&gt;
        &lt;!-- Boundary conditions, slip --&gt;
        &lt;!-- First column --&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;20&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;20&quot; y=&quot;350&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;circle cx=&quot;185&quot; cy=&quot;515&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;20&quot; y=&quot;680&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;!-- Second column --&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;350&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;350&quot; y=&quot;350&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-2&quot; transform=&quot;translate(515,515) rotate(90)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(515,515)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,515) rotate(180)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;515&quot; cy=&quot;515&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;350&quot; y=&quot;680&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;circle cx=&quot;515&quot; cy=&quot;845&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;!-- Third column --&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;680&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;680&quot; y=&quot;350&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;680&quot; y=&quot;680&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
    &lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;We can see that, although the three DFs had the same velocity before streaming (i.e. were traveling in the same
direction), after they collide with the boundary, each is headed in a different direction. The direction that a DF is
traveling after encountering a boundary under the slip condition, then, is dependent on the orientation of that
boundary.&lt;&#x2F;p&gt;
&lt;p&gt;Fortunately, not only is no-slip easier to implement, it also generally provides a more accurate simulation. It
simulates the adhesion of a viscous fluid at the boundary, as if the fluid at the edge is sticking to the boundary.
The no-slip condition does not hold in every situation, but for our purposes it is sufficient.&lt;&#x2F;p&gt;
&lt;p&gt;That more or less sums up the lattice Boltzmann method. Of course, it&#x27;s very broad and deep topic, and I have only
provided a short introduction. Hopefully, though, that will provide enough of a background to understand some of the
implementation details I&#x27;m going to discuss below. For more information, &amp;quot;Lattice Boltzmann Simulation for Shallow Water
Flow Applications&amp;quot; (Banda and Seaid) provides a nice, brief introduction, and &amp;quot;Lattice-Gas Cellular Automata and
Lattice Boltzmann Models - An Introduction&amp;quot; (Wolf-Gladrow) presents a much more thorough study of the topic.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;javascript-implementation&quot;&gt;JavaScript Implementation&lt;&#x2F;h2&gt;
&lt;p&gt;You can view a demo &lt;a href=&quot;&#x2F;pages&#x2F;projects&#x2F;lattice-boltzmann.html&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Implementation is not particularly difficult, once you understand the lattice Boltzmann methods. At its most basic,
the LBM requires a lattice of nodes. In this case, for D2Q9, a two-dimensional array suffices to represent our lattice
(technically, an array of length n, with each item consisting of an m length array, where n represents the width of the
lattice, and m represents the height). For each node in the lattice, we must store, at a minimum, the densities of the
DFs. It is also useful, in order to avoid repetition of work, to store the calculated macroscopic density, macroscopic
velocity, the x and y components of that velocity, and the &#x27;curl&#x27;. Additionally, a &lt;code&gt;barrier&lt;&#x2F;code&gt; boolean was stored on each
node, as well as a &lt;code&gt;stream&lt;&#x2F;code&gt; array, used to temporarily store streamed values. Altogether, the constructor looked like
this:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;LatticeNode&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    this.distribution &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Individual densities for
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; each of the nine DFs of a node.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    this.stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Used to temporarily hold streamed values
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    this.density &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Macroscopic density of a node.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    this.ux &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; X component of macroscopic velocity of a node.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    this.uy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Y component of macroscopic velocity of a node.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    this.barrier &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Boolean indicating if node is a barrier.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    this.curl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Curl of node.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A &lt;code&gt;stream&lt;&#x2F;code&gt; and &lt;code&gt;collide&lt;&#x2F;code&gt; function are also required. And an &lt;code&gt;equilibrium&lt;&#x2F;code&gt; function helps avoid some repetition of code.
These are shown below.&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; For each node in the lattice
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;lattice_width; x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;lattice_height; y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;lattice[x][y];
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;node.barrier) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; For each DF on the node
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;; d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Get the velocity for the DF and calculate
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; the coordinates of the node to stream it to
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;node_directions[d];
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;newx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;move.x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;x;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;13&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;newy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;move.y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;y;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;14&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Check if new node is in the lattice
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;15&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(newx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span&gt;newx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;lattice_width &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                        newy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span&gt;newy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;lattice_height) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; If destination node is barrier, bounce distribution back to
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;18&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; originating node in opposite direction.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;19&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(lattice[newx][newy].barrier) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                            lattice[x][y].stream[reflection[d]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;node.distribution[d];
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;21&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;22&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                            lattice[newx][newy].stream[d] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;node.distribution[d];
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;23&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                        }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;25&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;26&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;27&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;28&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;29&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this example, the streamed values are placed in the special &lt;code&gt;node.stream&lt;&#x2F;code&gt; array. This allows us to avoid obliterating
DF values which we will still need to use, while also allowing us to avoid creating an entirely new &lt;code&gt;LatticeNode&lt;&#x2F;code&gt; for
every single node in the lattice.&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;collide&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; For each node in the lattice
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;lattice_width; x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;lattice_height; y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;lattice[x][y];
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;node.barrier) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;node.distribution; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Array of DFs
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;; p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Copy over values from streaming phase.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                    d[p] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;node.stream[p];
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Calculate macroscopic density (rho) and velocity (ux, uy)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;13&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;rho &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;14&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;ux &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;15&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;uy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;direction &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;node_directions[i]
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;18&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                    rho &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span&gt;d[i];
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;19&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                    ux &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span&gt;d[i] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;direction.x;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                    uy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span&gt;d[i] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;direction.x;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;21&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;22&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Update values stored in node.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;23&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                node.density &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;rho;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                node.ux &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ux;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;25&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                node.uy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;uy;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;26&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Set node equilibrium for each velocity
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;27&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;eq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;equilibrium&lt;&#x2F;span&gt;&lt;span&gt;(ux, uy, rho);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;28&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;29&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;old_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;d[i];
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;30&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                    node.distribution[i] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;old_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;(omega &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;(eq[i] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;old_value));
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;31&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;32&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;33&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;34&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;35&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The equilibrium function would look more or less like so:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;equilibrium&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;ux&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;uy&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;rho&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Calculate equilibrium densities of a node
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;eq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Equilibrium values for all velocities in a node.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;u2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(ux &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;ux) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;(uy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;uy); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Magnitude of macroscopic velocity
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;; d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Calculate equilibrium value
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;velocity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;node_directions[d]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Node direction vector
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;eu &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(velocity.x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;ux) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;(velocity.y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;uy); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Macro velocity multiplied by distribution velocity
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        eq.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(node_weight[d] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;rho &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;eu &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;4.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;(eu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;eu) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;u2)); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Equilibrium equation
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;eq;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It is possible to rewrite these functions such that much of the repetition of work is eliminated, but these are the core
algorithms.&lt;&#x2F;p&gt;
&lt;p&gt;And that&#x27;s really more or less all that&#x27;s required at the most basic level. Of course, in order to draw and interact
with the lattice, and do other interesting things, a few more functions are required, and there&#x27;s going to be some glue
code to stick everything together, but those are mostly just implementation details.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;difficulties&quot;&gt;Difficulties&lt;&#x2F;h2&gt;
&lt;p&gt;It took rather a long time to arrive at a proper implementation of the LBM. Not having any prior experience with
computational fluid dynamics, I was learning the material as I was trying to code it. There were a lot of missteps, as
I didn&#x27;t fully understand the topic, but attempting to code implementations as I learned certainly helped to concretize
the material.&lt;&#x2F;p&gt;
&lt;p&gt;One of the biggest bugbears on this project was related to the coordinate system. The literature on the topic naturally
presents examples and equations in the standard Cartesian coordinate system (i.e. with the origin at the bottom left,
with x increasing as you move right, and y increasing as you move up). However, computer graphics typically place the
origin at the top left (i.e. x increasing as you move right, and y increasing as you move down). This is how the canvas
behaves. This was the source of a subtle and pernicious bug, where I had failed to translate between these coordinate
systems in a single equation. The program appeared to behave mostly correctly, but upon close inspection exhibited odd,
incorrect behavior. At this point, where this bug has been (I hope) thoroughly squashed, I am not planning on
re-engineering the program, but if I were to build this from scratch, knowing what I now know, I would try to find a way
to design the program with a single point of failure for this issue, instead of translating between the coordinate
systems every time something happens on the y-axis.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;optimizations-and-improvements&quot;&gt;Optimizations and improvements&lt;&#x2F;h3&gt;
&lt;p&gt;This simulation started out dog-slow. Some optimizations were made here and there (e.g. removing the loop from the
equilibrium function, pre-calculating any shared values, and then calculating each equilibrium value on its own line;
see below), but I believe the most significant speedup came when I added the &lt;code&gt;stream&lt;&#x2F;code&gt; array to the &lt;code&gt;LatticeNode&lt;&#x2F;code&gt;
objects. With the LBM, it is necessary to have somewhere to store the streamed values so that they don&#x27;t obliterate the
values ahead of them (although this isn&#x27;t strictly true... it is possible to achieve the same goal by looping over the
lattice four times, starting from each of the four corners, streaming only a portion of the DFs each time). Previously I
had been creating an entirely new lattice for each time-step. This was very inefficient, and required a lot of extra
work, both to set up and initialize the array, as well as behind the scenes with the extra garbage collection required
when the old array was discarded. So the addition of the &lt;code&gt;stream&lt;&#x2F;code&gt; array, along with a few related optimizations, meant
that, instead of throwing away every single node on every single tick, that each node essentially lived in perpetuity,
for the life of the program, and the values it stored (especially the &lt;code&gt;distribution&lt;&#x2F;code&gt; array) were never destroyed and
recreated, only ever updated. This obviated the need for much of the garbage collection and object instantiation that
the browser had been performing, and it resulted in a very significant speedup.&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Optimized equilibrium function.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Eliminates much repetition of work.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;equilibrium&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;ux&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;uy&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;rho&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;eq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Equilibrium values for all velocities in a node.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;ux3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;ux;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;uy3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;uy;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;ux2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ux &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;ux;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;uy2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;uy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;uy;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;uxuy2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;ux &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;uy;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;u2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ux2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;uy2;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;u215 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1.5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;u2;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    eq[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;four9ths &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;rho &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;u215);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;13&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    eq[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;one9th &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;rho &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;ux3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;4.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ux2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;u215);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;14&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    eq[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;one9th &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;rho &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;uy3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;4.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;uy2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;u215);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;15&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    eq[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;one9th &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;rho &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;ux3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;4.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ux2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;u215);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    eq[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;one9th &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;rho &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;uy3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;4.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;uy2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;u215);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    eq[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;one36th &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;rho &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;ux3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;uy3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;4.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;(u2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;uxuy2) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;u215);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;18&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    eq[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;one36th &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;rho &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;ux3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;uy3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;4.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;(u2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;uxuy2) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;u215);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;19&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    eq[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;one36th &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;rho &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;ux3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;uy3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;4.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;(u2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;uxuy2) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;u215);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    eq[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;one36th &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;rho &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;ux3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;uy3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;4.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;(u2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;uxuy2) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;u215);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;21&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;eq;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;22&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;One of the most significant improvements that I made, in terms of maintainability, clarity, and extensibility, was
refactoring to the module pattern. My early efforts in programming the LBM were not well designed. It can be difficult
to settle on a design before you fully understand the problem at hand. But once I had come to a full understanding of
the problem, and had a more-or-less working (but still poorly designed) implementation, I refactored. Well.. . I say
refactored, but the truth is that it was a complete rewrite. They say &#x27;write one to throw away&#x27;, and that can be a major
boon on a project. It certainly would have taken longer to reshape my initial design than to start from scratch, and
bugs—introduced as a result of my incomplete understanding of the problem—would have almost certainly come along for the
ride. This module-like architecture has also allowed for more rapid extension of the program, such as the addition of a
new draw-mode, or new controls (play&#x2F;pause, etc.), and overall it is far less brittle than the ad-hoc, global-ridden
spaghetti-mess the program began as.&lt;&#x2F;p&gt;
&lt;script type=&quot;text&#x2F;javascript&quot; src=&quot;&#x2F;js&#x2F;MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&gt;
&lt;&#x2F;script&gt;</content>
        
    </entry>
</feed>
