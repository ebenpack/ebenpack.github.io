<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Eben Packwood</title>
    <subtitle>TODO</subtitle>
    <link href="https://ebenpackwood.com/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://ebenpackwood.com"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2023-05-05T16:40:00+00:00</updated>
    <id>https://ebenpackwood.com/atom.xml</id>
    <entry xml:lang="en">
        <title>Schemers</title>
        <published>2023-05-05T16:40:00+00:00</published>
        <updated>2023-05-05T16:40:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://ebenpackwood.com/pages/projects/schemers/" type="text/html"/>
        <id>https://ebenpackwood.com/pages/projects/schemers/</id>
        
        <content type="html">&lt;div&gt;
    &lt;div id=&quot;scheme&quot;&gt;&lt;&#x2F;div&gt;
    &lt;pre id=&quot;output&quot;&gt;&lt;&#x2F;pre&gt;
    &lt;button id=&quot;eval&quot;&gt;Eval&lt;&#x2F;button&gt;
    &lt;script src=&quot;index.js&quot;&gt;&lt;&#x2F;script&gt;
    &lt;script&gt;
    (function(){
        main.initSchemeRs();
    })();
    &lt;&#x2F;script&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Not My Type: A Highly Opinionated and Incomplete Journey Through the Type Systems of Several Programming Languages</title>
        <published>2020-02-14T14:39:00+00:00</published>
        <updated>2020-02-14T14:39:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://ebenpackwood.com/posts/not-my-type.html/" type="text/html"/>
        <id>https://ebenpackwood.com/posts/not-my-type.html/</id>
        
        <content type="html">&lt;p&gt;&lt;em&gt;Wherein I will gently and briefly guide the reader through certain high-level aspects of the type systems of several programming languages, with the intent to demonstrate that a sufficiently strong and expressive type system can be a powerful tool not only for proving the correctness of our programs, but also for assisting and guiding us in the process of the design and implementation of the programs that we write.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;what-even-is-a-type-system&quot;&gt;What even is a type system?&lt;&#x2F;h2&gt;
&lt;p&gt;Informally, programming language type systems provide methods of categorizing values in programs, as well as methods for enforcing rules for how these values can, or cannot, be operated upon.&lt;&#x2F;p&gt;
&lt;p&gt;In our programs, we have values (terms). These can be simple, primitive values, like &lt;code&gt;1729&lt;&#x2F;code&gt;, or &lt;code&gt;True&lt;&#x2F;code&gt;, or they can be complex values composed of different compound, ad-hoc values of our own designs, such as a list of people, or a dictionary mapping the name of an author to the list of books that they have written. Our programs will also define operations on these values, such as integer addition, logical disjunction on boolean values, or sorting a list of people by their age.&lt;&#x2F;p&gt;
&lt;p&gt;Type systems allow us to group these values into categories, and to impose certain constraints on how these values can interact, and on how they may be used in our operations. The purpose of a type system is to help us identify certain kinds of issues (type errors) in our programs, in order to help us identify and eliminate errors that would have otherwise have arisen at runtime.&lt;&#x2F;p&gt;
&lt;p&gt;In very handwavy terms, we will call the groupings of these values into sets &amp;quot;types&amp;quot;. E.g. &lt;code&gt;{&amp;quot;&amp;quot;, &amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;}&lt;&#x2F;code&gt; is a subset of the set of all values that inhabit the type &lt;code&gt;String&lt;&#x2F;code&gt;, whereas &lt;code&gt;{True, False}&lt;&#x2F;code&gt; are the totality of the values that inhabit the type &lt;code&gt;Bool&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Continuing on with the handwavy and incorrect analogy to set theory, we have operations, or functions, which we can perform on the values of our types. If we squint (and much more squinting is required for some languages than for others), we can think of the functions in our code in set-theoretic terms. A function will have a domain (the set of inputs), and a codomain (the set of outputs). &lt;&#x2F;p&gt;
&lt;figure&gt;
&lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; xmlns:xlink=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xlink&quot; version=&quot;1.1&quot; width=&quot;799px&quot;
    height=&quot;540px&quot; viewBox=&quot;-0.5 -0.5 799 550&quot;&gt;
    &lt;defs &#x2F;&gt;
    &lt;g&gt;
        &lt;ellipse cx=&quot;165&quot; cy=&quot;294&quot; rx=&quot;165&quot; ry=&quot;245&quot; fill-opacity=&quot;0.5&quot; fill=&quot;#D7ECFF&quot; stroke=&quot;#A4B9CC&quot;
            stroke-opacity=&quot;0.5&quot; pointer-events=&quot;all&quot; &#x2F;&gt;
        &lt;rect x=&quot;155&quot; y=&quot;150&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#ff6666&quot; stroke=&quot;#b85450&quot; pointer-events=&quot;all&quot; &#x2F;&gt;
        &lt;rect x=&quot;155&quot; y=&quot;284&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#ff6666&quot; stroke=&quot;#b85450&quot; pointer-events=&quot;all&quot; &#x2F;&gt;
        &lt;rect x=&quot;155&quot; y=&quot;420&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#ff6666&quot; stroke=&quot;#b85450&quot; pointer-events=&quot;all&quot; &#x2F;&gt;
        &lt;rect x=&quot;130&quot; y=&quot;0&quot; width=&quot;80&quot; height=&quot;30&quot; fill=&quot;none&quot; stroke=&quot;none&quot; pointer-events=&quot;all&quot; &#x2F;&gt;
        &lt;g transform=&quot;translate(-0.5 -0.5)&quot;&gt;
            &lt;text x=&quot;170&quot; y=&quot;21&quot; fill=&quot;#000000&quot; font-family=&quot;Helvetica&quot; font-size=&quot;20px&quot;
                    text-anchor=&quot;middle&quot;&gt;Input&lt;&#x2F;text&gt;
        &lt;&#x2F;g&gt;
        &lt;ellipse cx=&quot;633&quot; cy=&quot;294&quot; rx=&quot;165&quot; ry=&quot;245&quot; fill-opacity=&quot;0.5&quot; fill=&quot;#D2FFD8&quot; stroke=&quot;#82b366&quot;
            stroke-opacity=&quot;0.5&quot; pointer-events=&quot;all&quot; &#x2F;&gt;
        &lt;rect x=&quot;623&quot; y=&quot;150&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#ff6666&quot; stroke=&quot;#b85450&quot; pointer-events=&quot;all&quot; &#x2F;&gt;
        &lt;rect x=&quot;623&quot; y=&quot;420&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#ff6666&quot; stroke=&quot;#b85450&quot; pointer-events=&quot;all&quot; &#x2F;&gt;
        &lt;rect x=&quot;598&quot; y=&quot;0&quot; width=&quot;80&quot; height=&quot;30&quot; fill=&quot;none&quot; stroke=&quot;none&quot; pointer-events=&quot;all&quot; &#x2F;&gt;
        &lt;g transform=&quot;translate(-0.5 -0.5)&quot;&gt;&lt;text x=&quot;638&quot; y=&quot;21&quot; fill=&quot;#000000&quot; font-family=&quot;Helvetica&quot; font-size=&quot;20px&quot;
                text-anchor=&quot;middle&quot;&gt;Output&lt;&#x2F;text&gt;
        &lt;&#x2F;g&gt;
        &lt;path d=&quot;M 175 160 Q 448 110 616.88 158.25&quot; fill=&quot;none&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot;
            pointer-events=&quot;stroke&quot; &#x2F;&gt;
        &lt;path d=&quot;M 621.93 159.69 L 614.23 161.14 L 616.88 158.25 L 616.16 154.4 Z&quot; fill=&quot;#000000&quot; stroke=&quot;#000000&quot;
            stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot; &#x2F;&gt;
        &lt;path d=&quot;M 175 430 Q 398 640 628.15 444.13&quot; fill=&quot;none&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot;
            pointer-events=&quot;stroke&quot; &#x2F;&gt;
        &lt;path d=&quot;M 632.15 440.72 L 629.09 447.93 L 628.15 444.13 L 624.55 442.6 Z&quot; fill=&quot;#000000&quot; stroke=&quot;#000000&quot;
            stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot; &#x2F;&gt;
        &lt;path d=&quot;M 175 294 Q 388 160 628.63 415.37&quot; fill=&quot;none&quot; stroke=&quot;#000000&quot; stroke-miterlimit=&quot;10&quot;
            pointer-events=&quot;stroke&quot; &#x2F;&gt;
        &lt;path d=&quot;M 632.23 419.19 L 624.89 416.49 L 628.63 415.37 L 629.98 411.69 Z&quot; fill=&quot;#000000&quot; stroke=&quot;#000000&quot;
            stroke-miterlimit=&quot;10&quot; pointer-events=&quot;all&quot; &#x2F;&gt;
        &lt;text x=&quot;165&quot; y=&quot;140&quot; fill=&quot;#000000&quot; font-family=&quot;Helvetica&quot; font-size=&quot;20px&quot;
                text-anchor=&quot;middle&quot;&gt;A&lt;&#x2F;text&gt;
        &lt;text x=&quot;165&quot; y=&quot;275&quot; fill=&quot;#000000&quot; font-family=&quot;Helvetica&quot; font-size=&quot;20px&quot;
                text-anchor=&quot;middle&quot;&gt;B&lt;&#x2F;text&gt;
        &lt;text x=&quot;165&quot; y=&quot;410&quot; fill=&quot;#000000&quot; font-family=&quot;Helvetica&quot; font-size=&quot;20px&quot;
                text-anchor=&quot;middle&quot;&gt;C&lt;&#x2F;text&gt;
        &lt;text x=&quot;633&quot; y=&quot;140&quot; fill=&quot;#000000&quot; font-family=&quot;Helvetica&quot; font-size=&quot;20px&quot;
                text-anchor=&quot;middle&quot;&gt;1&lt;&#x2F;text&gt;
        &lt;text x=&quot;633&quot; y=&quot;410&quot; fill=&quot;#000000&quot; font-family=&quot;Helvetica&quot; font-size=&quot;20px&quot;
                text-anchor=&quot;middle&quot;&gt;3&lt;&#x2F;text&gt;
    &lt;&#x2F;g&gt;
&lt;&#x2F;svg&gt;
&lt;figcaption&gt;Diagram of a function, with domain Input={A, B, C} and codomain Output={1, 3}&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Take for example the function &lt;code&gt;add&lt;&#x2F;code&gt;, which is a binary function that accepts two numbers, and returns a number. Here the domain is the set of all 2-tuples of numbers, and the codomain is the set of all numbers.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dynamic-typing&quot;&gt;Dynamic typing&lt;&#x2F;h2&gt;
&lt;p&gt;In many dynamically typed language, values will carry information about their type around with them, and operations will check these types at runtime.&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;python&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#f92672;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f92672;color:#f8f8f0;&quot;&gt;not&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;False
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;False&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here we have defined a unary function whose domain is &lt;code&gt;bool&lt;&#x2F;code&gt;, and whose codomain is also &lt;code&gt;bool&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Using the example above, in a dynamically typed language the type hints imply that the function should be passed a boolean value, and the function will return a boolean value. We can think of this as a contract between the program and the programmer. If you as a programmer provide a boolean value, this function will provide you back with a boolean value.&lt;&#x2F;p&gt;
&lt;p&gt;However, in dynamically typed languages these contracts are often only very loosely binding, if at all. In some cases, it can be literally impossible to determine what type a function will return when called with a particular value. Even under less dire circumstances, it will still be the programmer&#x27;s responsibility to ensure that any implied contract is not broken when calling a function.&lt;&#x2F;p&gt;
&lt;p&gt;For example, in the function shown above, it is the programmer&#x27;s responsibility to pass a boolean, and to only use the returned value as a boolean (and not as if it&#x27;s a string, or an integer). The language, however, will not prevent us from passing to this function a string, or an integer, or from trying to perform numerical or string operations on the result. In fact, the language won&#x27;t even prevent us (until it is too late!) from calling this function without any arguments at all, even though a single argument is expected.&lt;&#x2F;p&gt;
&lt;p&gt;When the user breaks a contract for operations such as these, in a dynamically typed language this can lead to unexpected values propagating throughout your program (perhaps only to be discovered far from their true origin), or to runtime exceptions, or to other undesirable behavior. Many will be familiar with errors such as these:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;AttributeError: &amp;#39;Foo&amp;#39; object has no attribute &amp;#39;bar&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;or:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;TypeError: foo.bar is not a function
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These errors arise at runtime, because something of one type was used as if it were another type.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;weak-typing&quot;&gt;Weak typing&lt;&#x2F;h2&gt;
&lt;p&gt;Returning to the example of the &lt;code&gt;add&lt;&#x2F;code&gt; function, we can write this function in JavaScript like so:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;n;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;JavaScript does not place on us any restrictions whatsoever in terms of how we can call this function. Let&#x27;s look at a few examples:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; NaN
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; 2
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;({})
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; &amp;quot;[object Object]undefined&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;a&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; &amp;quot;1a&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;13&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;14&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;15&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; 3
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;JavaScript has a dynamic type system, which—as we alluded to earlier—means it does not perform ahead of time any verification that the types in our programs are used correctly. For example, we are able to call &lt;code&gt;add&lt;&#x2F;code&gt; with nonsensical values, such as booleans and objects, and we&#x27;re even able to pass the wrong number of parameters (either too few, in which case the arguments that we did not pass will be undefined, or too many, in which case the extraneous arguments will simply be ignored). &lt;&#x2F;p&gt;
&lt;p&gt;Furthermore, JavaScript is weakly typed, meaning that, rather than balking at receiving such unexpected garbage and crashing with a runtime exception, JavaScript &amp;quot;helpfully&amp;quot; attempts to implicitly convert these nonsensical values that we passed into values of some other type that might make a bit more sense (for some value of &amp;quot;sense&amp;quot;).&lt;&#x2F;p&gt;
&lt;aside&gt;As a brief aside, weak and strong typing tend to be somewhat overloaded, colloquial terms, but in this context we&#x27;ll use these terms strictly in relation to implicit type conversion, as seen in the previous examples.&lt;&#x2F;aside&gt;
&lt;p&gt;JavaScript&#x27;s addition operator &lt;code&gt;+&lt;&#x2F;code&gt; is overloaded to perform both mathematical addition, as well as string concatenation. It is not defined for objects, or booleans, or any other types. When you attempt to use this operator with values of these types, JavaScript invokes an arcane system of type conversions on your behalf in order to avoid throwing an exception. When we called &lt;code&gt;add(1, &#x27;a&#x27;)&lt;&#x2F;code&gt;, JavaScript converted &lt;code&gt;1&lt;&#x2F;code&gt; to the string &lt;code&gt;&#x27;1&#x27;&lt;&#x2F;code&gt;, prior to concatenating it with the second argument of the function &lt;code&gt;&#x27;a&#x27;&lt;&#x2F;code&gt;. Similar conversions are performed for other types, such as objects, booleans, etc., and other sorts of conversions take place in different contexts (the most notable example perhaps being when determining equality with the &lt;code&gt;==&lt;&#x2F;code&gt; operator).&lt;&#x2F;p&gt;
&lt;p&gt;Somewhat infamously, these type conversion rules can be leveraged such that any JavaScript program can be written using only the following six characters: &lt;code&gt;[]()!+&lt;&#x2F;code&gt;. This subset of the language has been affectionately dubbed &amp;quot;JSFuck&amp;quot;. &lt;&#x2F;p&gt;
&lt;p&gt;Here we see some examples of JSFuck in action:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[]])
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Infinity
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]]
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; &amp;#39;a&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;[][(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[][[]])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[]]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]]][([][(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[][[]])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[]]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!+
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;13&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;14&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;15&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[][(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;[][[]])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[]]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;18&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]]])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[]]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;([][[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;19&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;([][[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;21&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;([][(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[][[]])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;22&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;[]]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;23&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;25&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;[][(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[][[]])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[]]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;26&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!+
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;27&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]]])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[]]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;28&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]]]((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;29&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;30&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[][(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;31&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;[][[]])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[]]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;32&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;33&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;[]]])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[]]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[][(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;34&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[][[]])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[]]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;35&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;36&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!+&lt;&#x2F;span&gt;&lt;span&gt;[]]])[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+!+&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;[]]])()
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;37&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; alert(1)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;While at a glance this might appear quite baffling, nevertheless it is a consistent and inevitable outcome of the implicit type conversion rules of the language. This bizarre quirk of the language has notably been exploited to allow arbitrary JavaScript execution on eBay&#x27;s listing pages (although the extreme verbosity of writing JavaScript in this way often limits the extent to which this can be exploited, e.g. when the number of characters that can be entered into an input field is limited).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;strong-typing&quot;&gt;Strong typing&lt;&#x2F;h2&gt;
&lt;p&gt;To some, the idea of the implicit conversions between different types that weak typing provides, as presented in the preceding section, may seem unpalatable. Fortunately for these people, there are type systems which do not perform such implicit conversions. In contrast to weak typing, this is called strong typing. In a strongly typed language, such as python, we might define our &lt;code&gt;add&lt;&#x2F;code&gt; function like this:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;python&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#f92672;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;n
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here again are some examples of how we might call this function, displayed along with the result of these calls:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;python&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;add();
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;# TypeError: add() missing 2 required positional arguments: &amp;#39;m&amp;#39; and &amp;#39;n&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;# 2
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;add({})
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;# TypeError: add() missing 1 required positional argument: &amp;#39;n&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;a&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;# TypeError: unsupported operand type(s) for +: &amp;#39;int&amp;#39; and &amp;#39;str&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;13&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;14&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;# TypeError: add() takes 2 positional arguments but 3 were given
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are two things to note here. First, largely for historical reasons, &lt;code&gt;bool&lt;&#x2F;code&gt; in python is a subclass of &lt;code&gt;int&lt;&#x2F;code&gt;, which is why we were able to add &lt;code&gt;1&lt;&#x2F;code&gt; to &lt;code&gt;True&lt;&#x2F;code&gt; without issue. We will not dwell on this further. Second, python prevented us from calling &lt;code&gt;add&lt;&#x2F;code&gt; in many of the nonsensical ways that JavaScript did not, namely by throwing &lt;code&gt;TypeError&lt;&#x2F;code&gt; exceptions when we did not provide arguments of the correct type, or when we did not provide the correct number of arguments. The type system here has constrained our use of this function, in order to help us avoid incorrect programs.&lt;&#x2F;p&gt;
&lt;p&gt;While this is certainly a step in the right direction, it should be noted that these were runtime exceptions, which occurred only at the moment that the function was called incorrectly. If a call like this were to occur somewhere deep within your program, in some rarely used code path, you might not know about such a problem until it&#x27;s too late and your code is already in production.&lt;&#x2F;p&gt;
&lt;p&gt;One implication we might draw from this is that the knowledge that a dynamic type system was able to provide to us, with respect to certain aspects of the correctness of our program, was in a sense derived a posteriori. I would argue, however, that if we were able to derive this same knowledge a priori, we could have prevented such an exception from ever occurring.&lt;&#x2F;p&gt;
&lt;p&gt;In virtually every programming language, the values that we&#x27;re dealing with in our programs do have types. In dynamically typed languages, we&#x27;re allowed to use values of the wrong type in ways that don&#x27;t make sense, such that meaningless data will propagate throughout our systems—as in the case of weak typing—or our programs will crash at runtime—as we saw with strong typing.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;static-typing&quot;&gt;Static typing&lt;&#x2F;h2&gt;
&lt;p&gt;In a statically typed language, the semantics of the language specify that terms have types, and the language&#x27;s type checker will track these types throughout the program to ensure they are not used in ways that would break any contracts. If the type checker cannot determine that types are used in valid ways throughout the program, the program is rejected as invalid.&lt;&#x2F;p&gt;
&lt;p&gt;This is, as the name implies, a static analysis process. Meaning that this type checking is performed on some static representation of the program (e.g. the source code), and does not involve actually running the code being analyzed. In other words, the problems that were only found at runtime in our strongly, dynamically typed language, can be discovered at compile time in our statically typed language.&lt;&#x2F;p&gt;
&lt;aside&gt;Statically typed languages can also be strongly or weakly typed, with the most notable example of the latter being C. For the purposes of this discussion, however, this topic is not worth any further comment.&lt;&#x2F;aside&gt;
&lt;p&gt;So, building on the example from above, in a statically typed language such as Java, the &lt;code&gt;not&lt;&#x2F;code&gt; function from earlier might look like this:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;java&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;com&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;makeyev&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;sarmat&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;ICBM&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;color:#a6e22e;&quot;&gt;Main &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;public static &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;boolean&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.println(not(a));
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;public static &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;boolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;not&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;boolean &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;; }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        ICBM().launch();
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;13&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;14&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It is not possible to break this contract in the ways that were possible with dynamically typed languages. Attempting to call this function with a string, or an integer, or any other value that is not a boolean will result in a compile time type error, and your code will not be compiled.&lt;&#x2F;p&gt;
&lt;p&gt;Here, the type system has further constrained us. We cannot write programs that call &lt;code&gt;not&lt;&#x2F;code&gt; with anything other than a boolean value, which will help to prevent an entire class of bugs which, as we saw, are possible with dynamically typed languages.&lt;&#x2F;p&gt;
&lt;p&gt;However, there is one small issue with this function. Can you spot it?&lt;&#x2F;p&gt;
&lt;p&gt;If you noted that &lt;code&gt;not&lt;&#x2F;code&gt; does not correctly return the negation of its input, then you are correct. While the type system here can prevent us from making egregious mistakes, like trying to calculate the logical complement of the textual content of Moby Dick, it was not able to prevent us from making a small logical error.&lt;&#x2F;p&gt;
&lt;p&gt;Of course there also one other minor flaw in this function. While the type signature was able to tell us much about the behavior of this function—about the types of values that it would accept as input, and the types of values that it could potentially return to us as output—the type signature did not quite tell us the entire story of this function. When passing &lt;code&gt;false&lt;&#x2F;code&gt; to this function, we can reasonably expect to get some boolean value back (and we might hope, unfortunately to little avail, that this value will be &lt;code&gt;true&lt;&#x2F;code&gt;). To this end, the function will perform serviceably. However, upon closer inspection of the function&#x27;s implementation, we may begin to notice something untoward, perhaps even sinister. Before returning a value, the function also performs some other work, which is neither represented, nor constrained by the type system. In other words, it performed a side-effect.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;side-effects&quot;&gt;Side effects&lt;&#x2F;h2&gt;
&lt;p&gt;The type system in the previous example was neither expressive nor powerful enough to either reflect these side-effects in the type, nor to otherwise prevent the free use of such side-effects. This, however, is a failing of this type system in particular, and not of type systems in general.&lt;&#x2F;p&gt;
&lt;p&gt;In a language such as Haskell, it is not only possible, but also mandatory that side-effects—such as those seen in the previous example—be reflected in a function&#x27;s type. As an example:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;haskell&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;hello &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;hello s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; putStr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;Hello &amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt; s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;add &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;Num &lt;&#x2F;span&gt;&lt;span&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;a
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;add m n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; n
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These functions demonstrate to us, via their signatures, whether they will be performing side effects. Put another way, &lt;code&gt;IO a&lt;&#x2F;code&gt; can perhaps be thought of as the type of values that perform side-effects. And furthermore, values of other types, by definition, cannot perform these side-effects (ignoring shenanigans like &lt;code&gt;unsafePerformIO&lt;&#x2F;code&gt;). At a glance, we can know that &lt;code&gt;hello&lt;&#x2F;code&gt; will be performing some kind of side-effects, whereas &lt;code&gt;add&lt;&#x2F;code&gt; will not (and in fact &lt;strong&gt;cannot&lt;&#x2F;strong&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Whereas in the earlier example there was rather a vast gulf of program behavior that the type system was unable to express to us (e.g. the call to &lt;code&gt;ICBM().launch()&lt;&#x2F;code&gt; went completely unremarked, as far as the type system was concerned), here the types are able to provide us with a richer, more complete description of our programs, which the compiler will enforce at compile time. This is beneficial to us, as programmers, if we wish to have guarantees about what our programs may or may not be doing (e.g. launching ICBM missiles).&lt;&#x2F;p&gt;
&lt;aside&gt;&lt;code&gt;IO a&lt;&#x2F;code&gt; is not a particularly granular or descriptive type. It tells us only that side-effects will be performed, but it tells us nothing of the nature of those side-effects. Disk access, network access, FFI... all side-effects are lumped into a single type. There are type systems that are able to treat side-effects much more granularly (e.g. koka), but we will not be discussing these here.&lt;&#x2F;aside&gt;
&lt;p&gt;While we have come a long way since the wild west of the weakly, dynamically typed languages where we began, we still have not yet reached the end of this journey. To see why, let us look at the example of appending together two lists.&lt;&#x2F;p&gt;
&lt;p&gt;In Haskell, we can define our own list type like this (I will use the GADT extension, as well as some others, for better syntactic consistency with some later examples that we&#x27;ll be seeing in another language):&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;haskell&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;{-# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;LANGUAGE&lt;&#x2F;span&gt;&lt;span&gt; KindSignatures, GADTs #-}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Data.Kind
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Prelude (&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;Char&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;infixr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;7 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:&amp;lt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;List &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Nil  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt; a
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;(:&amp;lt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt; a
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here we have defined a type constructor &lt;code&gt;List&lt;&#x2F;code&gt;. When &lt;code&gt;List&lt;&#x2F;code&gt; is provided with some type, it becomes an inhabited type (e.g. &lt;code&gt;List Int&lt;&#x2F;code&gt; or &lt;code&gt;List String&lt;&#x2F;code&gt;). There are two data constructors for this type: &lt;code&gt;Nil&lt;&#x2F;code&gt;, the empty list, and &lt;code&gt;:&amp;lt;&lt;&#x2F;code&gt; (which we will pronounce &amp;quot;cons&amp;quot;), which appends some value to an already constructed list.&lt;&#x2F;p&gt;
&lt;p&gt;Here are a few example of list values:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;haskell&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;emptyList &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;List Int
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;emptyList &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Nil
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;oneList &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;List Int
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;oneList &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Nil
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;twoList &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;List Char
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;twoList &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;1&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;2&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Nil
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, we can define a function to append two lists together.&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;haskell&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;appendLists &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;List &lt;&#x2F;span&gt;&lt;span&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;List &lt;&#x2F;span&gt;&lt;span&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;List &lt;&#x2F;span&gt;&lt;span&gt;a
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;appendLists &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Nil&lt;&#x2F;span&gt;&lt;span&gt;       ys &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; ys
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;appendLists (x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; xs) ys &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; (appendLists xs ys)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We presented here the correct implementation, but it should be clear that the type of this function would also have allowed for any number of incorrect implementations, such as the following:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;haskell&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;appendLists &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;List &lt;&#x2F;span&gt;&lt;span&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;List &lt;&#x2F;span&gt;&lt;span&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;List &lt;&#x2F;span&gt;&lt;span&gt;a
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;appendLists xs ys &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Nil
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;While this is clearly not what we would like for our list-appending function to be doing, it&#x27;s equally clear that it is nevertheless correct from the perspective of the type system, and this program will compile without issue.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;expressivity&quot;&gt;Expressivity&lt;&#x2F;h2&gt;
&lt;p&gt;Beyond simply using the types that are provided to us by our languages, more advanced type systems can also allow programmers to build their own types, and to encode additional information into these types, providing greater expressivity, as well as stronger guarantees about the correctness of our programs.&lt;&#x2F;p&gt;
&lt;p&gt;E.g.:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;python&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#f92672;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;add_100_feet_to_distance&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;dist&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;dist &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;100
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;distance_in_feet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;328
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;distance_in_meters &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;100
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;add_100_feet_to_distance(distance_in_meters)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here we have a value that is purportedly a distance in meters, but it&#x27;s being passed to a function that claims to add 100 feet to the distance. In this example, however, we&#x27;re using plain integers to represent both values, and from a type perspective the two values cannot be distinguished from each other. While this program as written is apparently well-typed, it&#x27;s nevertheless clear that it is in some way incorrect, and will likely cause problems in our program which could be difficult to identify and locate.&lt;&#x2F;p&gt;
&lt;p&gt;In another language, such as Haskell, we might be able to do something like this:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;haskell&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;newtype &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Feet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;MkFeet Int
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;newtype &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Meters &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;MkMeters Int
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;add100FeetToDistance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;Feet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;Feet
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;add100FeetToDistance (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;MkFeet&lt;&#x2F;span&gt;&lt;span&gt; n) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;MkFeet&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;100 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; n)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;distanceInFeet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;Feet
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;distanceInFeet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;MkFeet 328
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;distanceInMeters &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;Meters
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;distanceInMeters &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;MkMeters 100
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here we have encoded additional information into our types (namely the unit of measure), the consistent use of which the type system will enforce for us. Any attempts to use a value of type &lt;code&gt;Meters&lt;&#x2F;code&gt; where a value of type &lt;code&gt;Feet&lt;&#x2F;code&gt; is expected will be rejected by the type checker, and the program will not compile.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dependent-types&quot;&gt;Dependent types&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;ve seen that much can be done with a sufficiently advanced type system. By encoding information about our programs at the type level, the type system can verify that the properties that we&#x27;ve encoded into our types hold, and if they do not the program will not compile.&lt;&#x2F;p&gt;
&lt;p&gt;So far, we&#x27;ve seen examples of static types being used to encode fairly straightforward properties of the domains that we&#x27;ve been working with. However, there are type systems which allow for even greater expressivity and power when encoding properties of our programs at the type level.&lt;&#x2F;p&gt;
&lt;p&gt;As a motivating example, we will again examine the concatenation of two lists, using a new language, Idris.&lt;&#x2F;p&gt;
&lt;p&gt;For reasons that should become clear later, we will begin by defining a type, &lt;code&gt;Nat&lt;&#x2F;code&gt;, representing the natural numbers, using an inductively defined representation (also known as Peano numbers).&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;haskell&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Nat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Nat
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;S &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Nat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Nat
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By definition, &lt;code&gt;Nat&lt;&#x2F;code&gt; can be either &lt;code&gt;Z&lt;&#x2F;code&gt; (representing zero), or &lt;code&gt;S n&lt;&#x2F;code&gt; (the successor of another &lt;code&gt;Nat&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Some examples:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;haskell&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;zero &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Nat
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;zero &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Z
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;one &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Nat
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;one &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;S Z
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;two &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Nat
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;two &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;S&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;S Z&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;five &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Nat
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;five &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;S&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;S&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;S&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;S&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;S Z&lt;&#x2F;span&gt;&lt;span&gt;))))
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here we have defined several values of type &lt;code&gt;Nat&lt;&#x2F;code&gt;, and assigned them to what seem to be fitting names (&lt;code&gt;zero&lt;&#x2F;code&gt;, &lt;code&gt;one&lt;&#x2F;code&gt;, &lt;code&gt;two&lt;&#x2F;code&gt;, etc.). The names here are arbitrary, however, and nothing would have prevented us from choosing different, less suitable names.&lt;&#x2F;p&gt;
&lt;p&gt;Using this type, we can now define addition:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;haskell&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;(+) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Nat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Nat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Nat
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Z     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; n
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;S&lt;&#x2F;span&gt;&lt;span&gt; m) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;S&lt;&#x2F;span&gt;&lt;span&gt; (m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; n)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So, as we defined in the pattern matches above, zero plus any &lt;code&gt;Nat&lt;&#x2F;code&gt; value &lt;code&gt;n&lt;&#x2F;code&gt; is simply &lt;code&gt;n&lt;&#x2F;code&gt;, whereas the successor of any value &lt;code&gt;m&lt;&#x2F;code&gt; plus any value &lt;code&gt;n&lt;&#x2F;code&gt; will be the successor of &lt;code&gt;m + n&lt;&#x2F;code&gt;. Very simple!&lt;&#x2F;p&gt;
&lt;p&gt;Now that we have natural numbers with which we can count and add, we can define an ordered collection type which is in some ways list-like, but whose type also encodes its length. We will call this type &lt;code&gt;Vect&lt;&#x2F;code&gt; (technically &lt;code&gt;Vect&lt;&#x2F;code&gt; is a type constructor, not a type itself, meaning that you must provide some additional information in order to produce an inhabited type).&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;haskell&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Nat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Nil  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect Zero&lt;&#x2F;span&gt;&lt;span&gt; a
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;(::) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; n a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;S&lt;&#x2F;span&gt;&lt;span&gt; n) a
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To translate this definition: we define a type constructor &lt;code&gt;Vect&lt;&#x2F;code&gt;. When you pass &lt;code&gt;Vect&lt;&#x2F;code&gt; a &lt;code&gt;Nat&lt;&#x2F;code&gt; and any arbitrary type &lt;code&gt;a&lt;&#x2F;code&gt;, it will return to you a type, which in this case will be a &lt;code&gt;Vect&lt;&#x2F;code&gt; of some length and type, like &lt;code&gt;Vect (S Z) String&lt;&#x2F;code&gt;. Note that we are using here a &lt;code&gt;Nat&lt;&#x2F;code&gt; &lt;em&gt;value&lt;&#x2F;em&gt; at the type level.&lt;&#x2F;p&gt;
&lt;p&gt;The two data constructors for &lt;code&gt;Vect&lt;&#x2F;code&gt; are &lt;code&gt;Nil&lt;&#x2F;code&gt;, which is defined as a vector of length zero (an empty vector) of some type, and &lt;code&gt;::&lt;&#x2F;code&gt; (pronounced &amp;quot;cons&amp;quot;), which is a function that takes a value of type &lt;code&gt;a&lt;&#x2F;code&gt;, a vector of type &lt;code&gt;Vect n a&lt;&#x2F;code&gt;, and which returns a vector, of type &lt;code&gt;Vect (S n) a&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s look at some examples:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;haskell&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;emptyVect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect Z Int
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;emptyVect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Nil
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;oneVect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;S Z&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Int
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;oneVect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Nil
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;twoVect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;S&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;S Z&lt;&#x2F;span&gt;&lt;span&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Int
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;twoVect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Nil
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We have now defined a type which, by its very definition, cannot be constructed in such a way that the length described in the type does not match the actual length of the data structure.&lt;&#x2F;p&gt;
&lt;p&gt;This, for example, will not compile:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;haskell&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;threeOrFourVect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;S&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;S&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;S Z&lt;&#x2F;span&gt;&lt;span&gt;))) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Int
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;threeOrFourVect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Nil
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is a type error, and the type checker will not permit such an ill-typed program to be compiled. Instead, it will error with a message like the following:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;haskell&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Type&lt;&#x2F;span&gt;&lt;span&gt; mismatch between
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;S&lt;&#x2F;span&gt;&lt;span&gt; len) elem (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;of&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt; xs)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;and
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect Z Int&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Expected &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Specifically&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Type&lt;&#x2F;span&gt;&lt;span&gt; mismatch between
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;S&lt;&#x2F;span&gt;&lt;span&gt; len
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        and
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Z
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What do we gain by having such a type? As was mentioned earlier, we have encoded more information about our data at the type level. Specifically in this case we have encoded the length of our list-like vector in its type. With this information, the type system can further assist us, by checking that the operations we write are correct with respect to the type signatures that we specify. As an example, if we wish to write an operation to append two vectors together it should be clear that the result will be a vector whose length is the sum of the lengths of the two input vectors. The signature for this function might look like this:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;haskell&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;appendVec &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; m a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; n a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; (m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; n) a
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With the length encoded at the type level, we can leverage the type system to reject incorrect implementations where the important properties of the operation do not hold. In this case, the important property of the append function is that the length of the resulting &lt;code&gt;Vect&lt;&#x2F;code&gt; is the sum of the lengths of the two input &lt;code&gt;Vect&lt;&#x2F;code&gt;s. The type checker can now determine for us that a naive implementation—say, one which simply always returns an empty vector—does not satisfy the length summing property that we have specified in our type signature.&lt;&#x2F;p&gt;
&lt;p&gt;But in fact beyond even just rejecting incorrect implementations, we can leverage the type system to write a complete implementation of this function for us. Through a series of fairly mechanical steps, we can ask the compiler to fill out aspects of our function for us, using the information it knows about our types, until we&#x27;re left with a complete and correct implementation. Here&#x27;s what this looks like in action. Keep in mind that at every step, while we&#x27;re directing the compiler on what we want it to do, it&#x27;s determining how to do it.&lt;&#x2F;p&gt;
&lt;div class=&quot;appendVect&quot;&gt;
&lt;pre data-linenos data-lang=&quot;haskell&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;appendVect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; m a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; n a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; (m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; n) a
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;caption&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;appendVect&quot;&gt;
&lt;pre data-linenos data-lang=&quot;haskell&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;appendVect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; m a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; n a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; (m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; n) a
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;appendVect x        y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= ?&lt;&#x2F;span&gt;&lt;span&gt;appendVect_rhs
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;caption&quot;&gt;Generate an initial pattern match clause&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;appendVect&quot;&gt;
&lt;pre data-linenos data-lang=&quot;haskell&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;appendVect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; m a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; n a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; (m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; n) a
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;appendVect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Nil&lt;&#x2F;span&gt;&lt;span&gt;      y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= ?&lt;&#x2F;span&gt;&lt;span&gt;appendVect_rhs_1
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;appendVect (x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt; z) y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= ?&lt;&#x2F;span&gt;&lt;span&gt;appendVect_rhs_2
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;caption&quot;&gt;Generate a case split for a pattern variable&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;appendVect&quot;&gt;
&lt;pre data-linenos data-lang=&quot;haskell&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;appendVect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; m a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; n a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; (m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; n) a
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;appendVect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Nil&lt;&#x2F;span&gt;&lt;span&gt;      y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; y
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;appendVect (x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt; z) y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= ?&lt;&#x2F;span&gt;&lt;span&gt;appendVect_rhs_2
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;caption&quot;&gt;Attempt to fill a hole&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;appendVect&quot;&gt;
&lt;pre data-linenos data-lang=&quot;haskell&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;appendVect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; m a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; n a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; (m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; n) a
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;appendVect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Nil&lt;&#x2F;span&gt;&lt;span&gt;      y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; y
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;appendVect (x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt; z) y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt; appendVec z y
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;caption&quot;&gt;Attempt to fill a hole&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div id=&quot;controls-appendVect&quot;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Amazing! By providing the type checker with more information about our types, not only can our type checker do more for us to verify the correctness of our programs, but it can also write many of our programs for us!&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s look at another brief example:&lt;&#x2F;p&gt;
&lt;div class=&quot;zipVect&quot;&gt;
&lt;pre data-linenos data-lang=&quot;haskell&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;zipVect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; n a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; n b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; n (a,b)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;caption&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;zipVect&quot;&gt;
&lt;pre data-linenos data-lang=&quot;haskell&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;zipVect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; n a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; n b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; n (a,b)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;zipVect x        y         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= ?&lt;&#x2F;span&gt;&lt;span&gt;zipVect_rhs
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;caption&quot;&gt;Generate an initial pattern match clause&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;zipVect&quot;&gt;
&lt;pre data-linenos data-lang=&quot;haskell&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;zipVect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; n a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; n b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; n (a,b)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;zipVect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Nil&lt;&#x2F;span&gt;&lt;span&gt;      y         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= ?&lt;&#x2F;span&gt;&lt;span&gt;zipVect_rhs_1
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;zipVect (x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt; z) y         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= ?&lt;&#x2F;span&gt;&lt;span&gt;zipVect_rhs_2
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;caption&quot;&gt;Generate a case split for a pattern variable&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;zipVect&quot;&gt;
&lt;pre data-linenos data-lang=&quot;haskell&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;zipVect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; n a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; n b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; n (a,b)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;zipVect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Nil      Nil       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= ?&lt;&#x2F;span&gt;&lt;span&gt;zipVect_rhs_1
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;zipVect (x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt; z) y         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= ?&lt;&#x2F;span&gt;&lt;span&gt;zipVect_rhs_2
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;caption&quot;&gt;Generate a case split for a pattern variable&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;zipVect&quot;&gt;
&lt;pre data-linenos data-lang=&quot;haskell&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;zipVect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; n a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; n b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; n (a,b)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;zipVect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Nil      Nil       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= ?&lt;&#x2F;span&gt;&lt;span&gt;zipVect_rhs_1
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;zipVect (x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt; z) (y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt; ys) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= ?&lt;&#x2F;span&gt;&lt;span&gt;zipVect_rhs_2
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;caption&quot;&gt;Generate a case split for a pattern variable&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;zipVect&quot;&gt;
&lt;pre data-linenos data-lang=&quot;haskell&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;zipVect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; n a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; n b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; n (a,b)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;zipVect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Nil      Nil       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Nil
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;zipVect (x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt; z) (y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt; ys) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= ?&lt;&#x2F;span&gt;&lt;span&gt;zipVect_rhs_2
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;caption&quot;&gt;Attempt to fill a hole&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;zipVect&quot;&gt;
&lt;pre data-linenos data-lang=&quot;haskell&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;zipVect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; n a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; n b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Vect&lt;&#x2F;span&gt;&lt;span&gt; n (a,b)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;zipVect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Nil      Nil       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;Nil
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;zipVect (x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt; z) (y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt; ys) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; (x, y) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt; zipVect z w
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;caption&quot;&gt;Attempt to fill a hole&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div id=&quot;controls-zipVect&quot;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Here the compiler wrote for us the full implementation of a function that zips two vectors together. Note that the type signature specifies the two vectors passed to this function must be of the same length, &lt;code&gt;n&lt;&#x2F;code&gt;, and the vector returned must also be of length &lt;code&gt;n&lt;&#x2F;code&gt;. The compiler was able to determine that, when the first parameter is an empty vector, so too will be the second parameter (their lengths are, after all, equal), and was able to correctly pattern match and provide full, correct implementations for the two cases given the available information. Furthermore, the compiler will enforce these constraints whenever this function is called. It is impossible to call this function with two vectors that the compiler cannot determine to be of the same length. And with only a few more tools in our toolbelt (e.g. a &lt;code&gt;min&lt;&#x2F;code&gt; function for &lt;code&gt;Nat&lt;&#x2F;code&gt; values), we could have implemented a different, equally provably correct function that zips together any two arbitrary length &lt;code&gt;Vect&lt;&#x2F;code&gt;s, producing a new &lt;code&gt;Vect&lt;&#x2F;code&gt; of a length equal to the lesser of the lengths of the two input &lt;code&gt;Vect&lt;&#x2F;code&gt;s.&lt;&#x2F;p&gt;
&lt;aside&gt;Remember that the length checks mentioned above are compile time checks. Since the compiler has already performed these checks, and has verified and proven the correctness of our programs, these checks need not incur any runtime cost. In fact, our types can often be erased entirely during compilation.&lt;&#x2F;aside&gt;
&lt;script&gt;
&#x2F;&#x2F; TODO: Fix this!
(function(){
    function registerPlayButton(selector){
        var TICK = 1100;
        var controls = document.querySelector(&#x27;#controls-&#x27; + selector);
        var els = document.querySelectorAll(&#x27;.&#x27; + selector);
        var end = els.length;
        var currentFrame = 0;
        var tallestCaption = 0;
        els.forEach(function(el){
            var caption = Array.prototype.find.call(el.children, function(child){
                return child.classList.contains(&#x27;caption&#x27;);
            });
            var captionBoundingClientRect = caption.getBoundingClientRect();
            tallestCaption = Math.max(tallestCaption, captionBoundingClientRect.height);
        });

        var caption = document.createElement(&#x27;div&#x27;);        
        caption.style.height = tallestCaption + &#x27;px&#x27;;
        caption.style.margin = &#x27;1em 0&#x27;;


        var controlsContainer = document.createElement(&#x27;div&#x27;);
        controlsContainer.style.display = &#x27;flex&#x27;;
        controlsContainer.style.alignItems = &#x27;center&#x27;;
        controlsContainer.style.gap = &#x27;10px&#x27;;

        var playButton = document.createElement(&#x27;button&#x27;);        
        caption.style.height = tallestCaption + &#x27;px&#x27;;
        caption.style.margin = &#x27;1em 0&#x27;;
        playButton.textContent = &#x27;Play&#x27;;

        var rangeSlider = document.createElement(&#x27;input&#x27;);
        rangeSlider.type = &#x27;range&#x27;;
        rangeSlider.min = 0;
        rangeSlider.max = end - 1;
        rangeSlider.value = 0; 
        rangeSlider.step = 1;

        controls.appendChild(caption);
        controlsContainer.appendChild(playButton);
        controlsContainer.appendChild(rangeSlider);
        controls.appendChild(controlsContainer);

        rangeSlider.addEventListener(&#x27;input&#x27;, function(evt){
            currentFrame = parseInt(event.target.value, 10);
            redraw();
            if (currentFrame &gt;= (end - 1)) {
                currentFrame = 0;
            }
        });

        function redraw() {
            rangeSlider.value = currentFrame;
            for (var m = 0; m &lt; end; m++) {
                var el = els[m];
                if (m === currentFrame) {
                    el.style.display = &#x27;&#x27;;
                    var elCaption = el.querySelector(&#x27;.caption&#x27;);
                    if (elCaption) {
                        elCaption.style.display = &#x27;none&#x27;;
                        caption.textContent = elCaption.textContent;
                    } else {
                        caption.textContent = &#x27;&#x27;;
                    }
                } else {
                    el.style.display = &#x27;none&#x27;;
                }
            }
        }
        function play(){
            &#x2F;&#x2F; TODO - this is kinda bunk. firefox formats it weird, and it&#x27;s a shitty function anyway
            currentFrame = currentFrame % end;
            redraw();
            currentFrame = currentFrame + 1;
            if (currentFrame !== end) {
                setTimeout(function(){play()}, TICK);
            } else {
                playButton.disabled = false;
            }
        }
        playButton.addEventListener(&#x27;click&#x27;, function(){
            if (!playButton.disabled) {
                playButton.disabled = true;
                play();
            }
        });
        redraw();
    }
    registerPlayButton(&#x27;appendVect&#x27;);
    registerPlayButton(&#x27;zipVect&#x27;);
})();
&lt;&#x2F;script&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;We began by demonstrating some of the issues that a weak, dynamic type system will permit. We saw that these type systems, by performing implicit type conversions, can allow nonsensical values to propagate throughout our systems.&lt;&#x2F;p&gt;
&lt;p&gt;We then proceeded to introduce a constraint, in the form of strong typing, whereby our operations would enforce for us the types which they would permit us to operate on. However, we also saw that, while strong typing did much to help ensure the correctness of our programs that weak typing was unable to, when coupled with a dynamic type system, strong typing was unable to reveal to us the correctness (or incorrectness) of our systems without actually running our code. This opened the possibility of edge cases in rarely used code paths, or when unexpected input somehow entered our systems.&lt;&#x2F;p&gt;
&lt;p&gt;Introducing further constraints, we examined static typing. We saw that static typing was able to reject incorrect programs at compile time, which would have only been discovered at runtime using a comparable dynamically typed language. But again, we found deficiencies in the static type system that we were examining; namely, the type system allowed for side-effects which were not represented, or constrained at the type level.&lt;&#x2F;p&gt;
&lt;p&gt;And yet again, we introduced another constraint. Next, we looked at a type system where side-effects were represented and constrained at the type level. We saw how this eliminated the possibility of certain kinds of undesirable behavior, namely the unrestricted use of side-effects in innocuous seeming functions. Exploring this  type system, though, we found further areas for improvement, as the types of our functions often provided too much latitude in our implementations, such as writing a list-appending function that simply always returned an empty list.&lt;&#x2F;p&gt;
&lt;p&gt;We then briefly explored some ways that encoding the important properties of our systems at the type level could allow us to leverage the type system to provide us with additional degrees of safety.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, we introduced a type system that allowed us to define functions where the types of our functions (both the argument types, as well as the output type) could be dependent on values at the type level. This allowed us to define functions where the type precisely encoded some of the most important properties of our data types and functions. Building on the example of appending lists, we defined a list-like type, &lt;code&gt;Vect&lt;&#x2F;code&gt;, which encoded its length at the type level. This allowed us to leverage the newfound power of our dependent type system not only to prevent the sorts of issues we had seen with our earlier attempt at writing a list-appending function, but we also found that the type system was in fact powerful enough to entirely write this function for us.&lt;&#x2F;p&gt;
&lt;p&gt;The recurring motif has been that throughout our journey through different type systems, we have introduced new type systems, we have explored some of their features, and then we have focused on some of the implications—and especially the failings—of their designs, and how these failings would allow us to write incorrect or delinquent programs. Moving on to the next type system, we would then see how, by introducing further constraints on the programs the type system would allow us to write, and by increasing the expressivity and power of what we can encode at the type level, these more advanced type systems were able to help us to prevent entirely some of the undesirable and aberrant behaviour we had seen with the previous, less capable type systems.&lt;&#x2F;p&gt;
&lt;p&gt;In short, with a sufficiently powerful type system, we are often able to make the illegal states in our systems literally unrepresentable. And beyond even this, we&#x27;ve seen that, by encoding the important aspects of our programs at the type level, a sufficiently advanced compiler can in fact write many of our programs for us. By defining &lt;code&gt;Vect&lt;&#x2F;code&gt; as we did, we were able to encapsulate in the type the properties that were important to us (namely its length). With this, we needed only to write a specifications for &lt;code&gt;appendVect&lt;&#x2F;code&gt; and &lt;code&gt;zipVect&lt;&#x2F;code&gt; (i.e. the type signatures), at which point we had provided the compiler with enough information to write the implementation for us. &lt;&#x2F;p&gt;
&lt;p&gt;While the type systems we explored gradually introduced further and further constraints on the programs we were allowed to write, these constraints were, in actuality, preventing us from writing incorrect, nonsensical, and otherwise undesirable programs. And perhaps paradoxically, the more constraints our type system imposed on us, the more powerful they became, and the more confidant we could be in the correctness of our programs.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Profligate</title>
        <published>2019-03-24T12:34:36+00:00</published>
        <updated>2019-03-24T12:34:36+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://ebenpackwood.com/pages/projects/profligate/" type="text/html"/>
        <id>https://ebenpackwood.com/pages/projects/profligate/</id>
        
        <content type="html"></content>
        
    </entry>
    <entry xml:lang="en">
        <title>lidrisp</title>
        <published>2019-01-22T18:16:00+00:00</published>
        <updated>2019-01-22T18:16:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://ebenpackwood.com/pages/projects/lidrisp/" type="text/html"/>
        <id>https://ebenpackwood.com/pages/projects/lidrisp/</id>
        
        <content type="html">&lt;script src=&quot;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;ace&#x2F;1.1.9&#x2F;ace.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;script type=&quot;text&#x2F;javascript&quot; src=&quot;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;ace&#x2F;1.1.9&#x2F;ext-language_tools.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;div style=&quot;font-size:16px;&quot;&gt;
    &lt;pre style=&quot;border:1px solid gray;height:500px;overflow-y: auto;margin-bottom: 5px;&quot; id=&quot;input&quot; contentEditable=&quot;true&quot;&gt;
(define (foldl fn acc ls)
    (if (null? ls)
        acc
        (foldl fn (fn acc (car ls)) (cdr ls))))
(define (foldr fn acc ls)
    (if (null? ls)
        acc
        (fn (car ls) (foldr fn acc (cdr ls)))))
(define (map fn ls)
    (foldr (lambda (x xs) (cons (fn x) xs)) &#x27;() ls))
(define (filter fn ls)
    (foldr (lambda (x xs) (if (fn x) (cons x xs) xs)) &#x27;() ls))
(define (double n) (+ n n))
(define (even?  n) (= 0 (modulo n 2)))
(define (zero?  n) (= 0 n))
(define (sub1   n) (- n 1))
(define (not    b) (if b #f #t))
&lt;p&gt;(foldl  + 0    &#x27;(1 2 3 4 5))
(map    double &#x27;(1 2 3 4 5))
(filter even?  &#x27;(1 2 3 4 5 6 7 8 9 10))
(let* ([a 5] [b (+ a 10)]) (+ b 20))
(letrec
([is-even? 
(lambda (n)
(if (zero? n) #t
(is-odd? (sub1 n))))]
[is-odd? 
(lambda (n)
(if (zero? n) #f
(is-even? (sub1 n))))])
(is-odd? 13))
&lt;&#x2F;pre&gt;
&lt;pre style=&quot;border:1px solid gray;height:200px;overflow-y: auto; color: white;&quot; id=&quot;output&quot;&gt;&lt;&#x2F;pre&gt;
&lt;div style=&quot;clear:both; margin:1em;&quot;&gt;
&lt;button id=&quot;eval&quot;&gt;Eval&lt;&#x2F;button&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;It&#x27;s a lisp! Or maybe a scheme! And it&#x27;s written in idris!&lt;&#x2F;p&gt;
&lt;p&gt;How&#x27;s it work? Write some scheme in the top pane, hit the &#x27;eval&#x27; button, and see the results in the bottom pane.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ebenpack&#x2F;lidrisp&quot; rel=&quot;noreferrer&quot;&gt;Check it out&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;script&gt;
(function(){
    main.initLidrisp().then(function(initLidrisp){
        initLidrisp();
    });
})();
&lt;&#x2F;script&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Lispish</title>
        <published>2015-12-10T18:46:00+00:00</published>
        <updated>2015-12-10T18:46:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://ebenpackwood.com/pages/projects/lispish/" type="text/html"/>
        <id>https://ebenpackwood.com/pages/projects/lispish/</id>
        
        <content type="html">&lt;script src=&quot;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;ace&#x2F;1.1.9&#x2F;ace.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;script type=&quot;text&#x2F;javascript&quot; src=&quot;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;ace&#x2F;1.1.9&#x2F;ext-language_tools.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;div style=&quot;font-size:16px;&quot;&gt;
    &lt;pre style=&quot;border:1px solid gray;height:500px;overflow-y: auto;margin-bottom: 5px;&quot; id=&quot;input&quot; contentEditable=&quot;true&quot;&gt;
list.foldl(
    function(a,b){return a + b;},
    0,
    list.map(
        function(curr){return curr * 2;},
        list.filter(
            function(curr){return curr % 2 === 0;},
            list.range(10)
        )
    )
);
&#x2F;&#x2F;=&gt;
cons.print(
    list.reverse(
        list.sort(
            function (a, b){return a &lt; b},
            list.list(7,89,5,8,43,2,6,1)
        )
    ),
    {prefix: &#x27;&#x27;, suffix: &#x27;&#x27;, separator: &#x27;,&#x27;}
);
&#x2F;&#x2F;=&gt;
function add(){
    return list.foldl(
        function(prev, curr){return curr + prev;},
        0,
        list.list(helpers.args(arguments))
    );
}
fun.curry(add, 5)(1)(2)(3)(4)(5);
&#x2F;&#x2F;=&gt;&lt;&#x2F;pre&gt;
    &lt;div style=&quot;-webkit-columns: 3 auto;-moz-columns: 3 auto;columns: 3 auto;border:1px solid gray;height:500px;overflow-y: auto;&quot; id=&quot;ref&quot;&gt;&lt;&#x2F;div&gt;
    &lt;div style=&quot;clear:both; margin:1em;&quot;&gt;
        &lt;p&gt;Ctrl-Enter &#x2F; Cmd-Enter will print results to the special comment &#x2F;&#x2F;=&gt;. This comment will print the results of the prior statement.&lt;&#x2F;p&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;script&gt;
(function(){
    main.initLispish().then(function(initLispish){
        initLispish(&#x27;input&#x27;, &#x27;ref&#x27;);
    });
})();
&lt;&#x2F;script&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Chrome DevTools Synchronous XHR Redirect Bug</title>
        <published>2015-10-24T10:14:00+00:00</published>
        <updated>2015-10-24T10:14:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://ebenpackwood.com/posts/chrome-devtools-synchronous-xhr-redirect-bug.html/" type="text/html"/>
        <id>https://ebenpackwood.com/posts/chrome-devtools-synchronous-xhr-redirect-bug.html/</id>
        
        <content type="html">&lt;p&gt;There is an unusual, and potentially very frustrating bug in Chrome&#x27;s DevTools (at least as of version 46.0.2490.80).
It does not appear to have been documented elsewhere, so it is being recorded here in the hope that it may prevent some
future hair-pulling.&lt;&#x2F;p&gt;
&lt;!--more--&gt;
&lt;p&gt;When making synchronous XHR requests (*see note below) with 301, 302, etc. redirect responses, the network panel in
Chrome&#x27;s DevTools will collapse all redirected requests into a single request (which can potentially contain mixed
elements of, at the very least, the first and last request). So, for example, if you make a synchronous Ajax request
to &lt;code&gt;&#x2F;1&lt;&#x2F;code&gt;, which redirects to &lt;code&gt;&#x2F;2&lt;&#x2F;code&gt;, which finally redirects to &lt;code&gt;&#x2F;3&lt;&#x2F;code&gt; (where you get a nice 200 response), instead of
seeing these three requests in the network panel, you will only see a single request to &lt;code&gt;&#x2F;3&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Even more frustrating is that, if the request was a &lt;code&gt;POST&lt;&#x2F;code&gt; or a &lt;code&gt;PUT&lt;&#x2F;code&gt; or suchlike, the &#x27;collapsed&#x27; request that is
displayed in the network panel will appear as if it was made with the initial request method (&lt;code&gt;POST&lt;&#x2F;code&gt;, &lt;code&gt;PUT&lt;&#x2F;code&gt;, etc.),
along with any submitted content (a JSON payload, or form data, e.g.), and it will appear as if this request was made
directly to the final redirected URL. In actuality, however, the initial request will be the &lt;code&gt;POST&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;PUT&lt;&#x2F;code&gt;&#x2F;whatever with
the request body, and the final request will be a &lt;code&gt;GET&lt;&#x2F;code&gt; request with (of course) no request body (plus any number of
intermediary redirected &lt;code&gt;GET&lt;&#x2F;code&gt; requests).&lt;&#x2F;p&gt;
&lt;p&gt;As a concrete example, see the quick and dirty node server below.&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;http &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;http&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;http.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;createServer&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;loc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;parseInt&lt;&#x2F;span&gt;&lt;span&gt;(req.url.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(req.url &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;(req, res);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(loc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;redir&lt;&#x2F;span&gt;&lt;span&gt;(req, res, loc);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;finish&lt;&#x2F;span&gt;&lt;span&gt;(req, res);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;listen&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;8000&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;13&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;14&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;15&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    res.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;writeHead&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span&gt;, {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;Content-Type&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;text&#x2F;html; charset=utf-8&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    res.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;18&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;&amp;lt;head&amp;gt;&amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;19&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;&amp;lt;title&amp;gt;Synchronous XHR Bug&amp;lt;&#x2F;title&amp;gt;&amp;lt;&#x2F;head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;script&amp;gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;var request = new XMLHttpRequest();&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;21&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;request.open(&amp;quot;POST&amp;quot;, &amp;quot;&#x2F;1&amp;quot;, false);&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;22&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;request.send(JSON.stringify({foo:&amp;quot;bar&amp;quot;}));&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;23&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;if (request.status === 200) {&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;  console.log(request.responseText);&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;25&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;}&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;26&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;&amp;lt;&#x2F;script&amp;gt;&amp;lt;&#x2F;body&amp;gt;&amp;lt;&#x2F;html&amp;gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;27&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    );
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;28&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;29&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;30&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;redir&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;loc&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;31&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    res.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;writeHead&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;302&lt;&#x2F;span&gt;&lt;span&gt;, {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;location&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;&#x2F;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;(loc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)});
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;32&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    res.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;33&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;34&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;35&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;finish&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;36&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    res.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;writeHead&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span&gt;, {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;Content-Type&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;application&#x2F;javascript&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;37&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    res.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;JSON&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;stringify&lt;&#x2F;span&gt;&lt;span&gt;({baz:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;qux&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;}));
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;38&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When a request is made to &lt;code&gt;&#x2F;&lt;&#x2F;code&gt;, a synchronous Ajax &lt;code&gt;POST&lt;&#x2F;code&gt; request will be made to &lt;code&gt;&#x2F;1&lt;&#x2F;code&gt;, which will redirect (via a &lt;code&gt;GET&lt;&#x2F;code&gt;)
to &lt;code&gt;&#x2F;2&lt;&#x2F;code&gt;, which will redirect to... until finally &lt;code&gt;&#x2F;5&lt;&#x2F;code&gt; is reached, and the JSON string &lt;code&gt;{&amp;quot;baz&amp;quot;:&amp;quot;qux&amp;quot;}&lt;&#x2F;code&gt; is returned. Here
is how this appears in Chrome DevTools network panel (note that this appears as a single &lt;code&gt;POST&lt;&#x2F;code&gt; request directly
to &lt;code&gt;&#x2F;5&lt;&#x2F;code&gt;):&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;chrome-xhr-redirect.jpg&quot; alt=&quot;Chrome XHR redirect&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;And here is how the same request looks from Firefox&#x27;s network panel:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;firefox-xhr-redirect.jpg&quot; alt=&quot;Firefox XHR redirect&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Firefox gives a much more accurate depiction of the actual request that were made.&lt;&#x2F;p&gt;
&lt;p&gt;While this is unlikely to be a common source of issues, in the right circumstances it can be extremely frustrating. In
my case, I was reverse-engineering an internal legacy system in order to provide an API façade which would be easier to
work with. At one point, this system made a synchronous XHR &lt;code&gt;POST&lt;&#x2F;code&gt; request to URL A, which redirected to URL B, which
redirected to URL C. Chrome, however, was telling me that this was simply a single &lt;code&gt;POST&lt;&#x2F;code&gt; to URL C, and my attempts to
perform this particular action (e.g. via cURL or an HTTP request from node) were stymied. It took some time, and
considerable frustration, to realize that my tools were simply lying to me.&lt;&#x2F;p&gt;
&lt;p&gt;* Note: Synchronous requests are generally discouraged, especially on the main thread. Even so, synchronous XHRs do
still exist in the wild.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Lattice Boltzmann</title>
        <published>2015-08-02T20:28:00+00:00</published>
        <updated>2015-08-02T20:28:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://ebenpackwood.com/pages/projects/lattice-boltzmann/" type="text/html"/>
        <id>https://ebenpackwood.com/pages/projects/lattice-boltzmann/</id>
        
        <content type="html">&lt;div class=&quot;main&quot; style=&quot;position:relative;&quot;&gt;
&lt;div class=&quot;canvases&quot; style=&quot;position: relative; height: 240px; width: 600px;&quot;&gt;
    &lt;canvas id=&quot;boltzmann&quot; style=&quot;background-color: #9044FF; position: absolute; left: 0; top: 0;&quot; width=&#x27;600&#x27; height=&#x27;240&#x27;&gt;&lt;&#x2F;canvas&gt;
    &lt;canvas id=&quot;vectorcanvas&quot; style=&quot;position: absolute; left: 0; top: 0;; pointer-events: none&quot; width=&#x27;600&#x27; height=&#x27;240&#x27;&gt;&lt;&#x2F;canvas&gt;
    &lt;canvas id=&quot;particlecanvas&quot; style=&quot;position: absolute; left: 0; top: 0; pointer-events: none&quot; width=&#x27;600&#x27; height=&#x27;240&#x27;&gt;&lt;&#x2F;canvas&gt;
    &lt;canvas id=&quot;barriercanvas&quot; style=&quot;position: absolute; left: 0; top: 0; pointer-events: none&quot; width=&#x27;600&#x27; height=&#x27;240&#x27;&gt;&lt;&#x2F;canvas&gt;
&lt;&#x2F;div&gt;
&lt;div id=&quot;controls&quot; class=&quot;controls&quot;&gt;   
    &lt;select id=&quot;drawmode&quot;&gt;
        &lt;option value=&quot;speed&quot;&gt;Speed&lt;&#x2F;option&gt;
        &lt;option value=&quot;xvelocity&quot;&gt;X Velocity&lt;&#x2F;option&gt;
        &lt;option value=&quot;yvelocity&quot;&gt;Y Velocity&lt;&#x2F;option&gt;
        &lt;option value=&quot;density&quot;&gt;Density&lt;&#x2F;option&gt;
        &lt;option value=&quot;curl&quot;&gt;Curl&lt;&#x2F;option&gt;
        &lt;option value=&quot;nothing&quot;&gt;Nothing&lt;&#x2F;option&gt;
    &lt;&#x2F;select&gt;
    &lt;label&gt;&lt;input id=&quot;flowvectors&quot; type=&quot;checkbox&quot; name=&quot;flowvectors&quot;&gt; Flow Vectors&lt;&#x2F;label&gt;
    &lt;label&gt;&lt;input id=&quot;flowparticles&quot; type=&quot;checkbox&quot; name=&quot;flowparticles&quot;&gt; Flow Particles&lt;&#x2F;label&gt;
    &lt;button id=&quot;play&quot;&gt;Start&lt;&#x2F;button&gt;
    &lt;button id=&quot;reset&quot;&gt;Reset&lt;&#x2F;button&gt;
    &lt;button id=&quot;clearbarriers&quot;&gt;Clear barriers&lt;&#x2F;button&gt;
    &lt;br&gt;
    &lt;br&gt;
    &lt;label&gt;&lt;input id=&quot;viscosity&quot; type=&quot;range&quot; name=&quot;viscosity&quot; min=&quot;2&quot; max=&quot;50&quot;&gt; Viscosity&lt;&#x2F;label&gt;&lt;br&gt;&lt;br&gt;
    &lt;label&gt;&lt;input id=&quot;speed&quot; type=&quot;range&quot; name=&quot;anim-speed&quot; min=&quot;1&quot; max=&quot;15&quot;&gt; Animation Speed&lt;&#x2F;label&gt;
    &lt;br&gt;&lt;br&gt;
    &lt;label&gt;&lt;input id=&quot;flow-speed&quot; type=&quot;range&quot; name=&quot;flow-speed&quot; value=&quot;0&quot; min=&quot;0&quot; max=&quot;100&quot;&gt; Flow Speed&lt;&#x2F;label&gt;
&lt;&#x2F;div&gt;
&lt;div style=&quot;border:1px solid gray; width: 600px; padding: 10px; margin-top:10px;&quot;&gt;
    &lt;p&gt;&lt;b&gt;Left click&lt;&#x2F;b&gt; to drag fluid&lt;&#x2F;p&gt;
    &lt;p&gt;&lt;b&gt;Right click&lt;&#x2F;b&gt; to draw&#x2F;erase barriers&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div id=&quot;debug&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;script&gt;
main.boltzmann().then(function(boltzmann){
    boltzmann({
        boltzId: &quot;boltzmann&quot;,
        latticeWidth: 200,
        latticeHeight: 80,
        vectorcanvasId: &quot;vectorcanvas&quot;,
        particlecanvasId: &quot;particlecanvas&quot;,
        barriercanvasId: &quot;barriercanvas&quot;,
    });
});
&lt;&#x2F;script&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>VU</title>
        <published>2015-07-29T17:18:00+00:00</published>
        <updated>2015-07-29T17:18:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://ebenpackwood.com/pages/projects/vu/" type="text/html"/>
        <id>https://ebenpackwood.com/pages/projects/vu/</id>
        
        <content type="html">&lt;p&gt;&lt;canvas id=&quot;canvas&quot; width=&quot;600&quot; height=&quot;400&quot; style=&quot;background-color:black;&quot;&gt;&lt;&#x2F;canvas&gt;&lt;&#x2F;p&gt;
&lt;div&gt;
    &lt;p&gt;Drop an audio file onto the canvas above (some &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTML&#x2F;Supported_media_formats&quot; rel=&quot;noreferrer&quot;&gt;filetype restrictions&lt;&#x2F;a&gt; may apply). You can also use the audio file that is loaded by default. Once the status reads &#x27;Ready!&#x27;, click the canvas to begin playback.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div&gt;
    &lt;p&gt;Click on the canvas to give it focus. Move with WASDRF keys. Look around with QETG.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;script&gt;
    main.vu().then((vu) =&gt; vu(&quot;&#x2F;audio&#x2F;piano-sonata-no13.ogg&quot;));
&lt;&#x2F;script&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Wireframe</title>
        <published>2015-02-22T15:15:00+00:00</published>
        <updated>2015-02-22T15:15:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://ebenpackwood.com/pages/projects/wireframe/" type="text/html"/>
        <id>https://ebenpackwood.com/pages/projects/wireframe/</id>
        
        <content type="html">&lt;div class=&quot;main&quot; style=&quot;position:relative; width: 600px; margin: 80px auto&quot;&gt;
    &lt;canvas tabindex=&quot;1&quot; id=&quot;wireframe&quot; style=&quot;background-color:black; position:relative; border: 2px solid green;&quot; width=&quot;600&quot; height=&quot;400&quot;&gt;&lt;&#x2F;canvas&gt;
    &lt;p&gt;Click on the canvas to give it focus. Move with WASDRF keys. Look around with QETG. Spin icosahedron with HJKLUI.&lt;&#x2F;p&gt;
    &lt;div id=&quot;controls&quot;&gt;
        &lt;button id=&quot;toggledraw&quot;&gt;Toggle draw mode&lt;&#x2F;button&gt;
        &lt;button id=&quot;togglebfcull&quot;&gt;Toggle backface culling&lt;&#x2F;button&gt;
        &lt;button id=&quot;toggleqdraw&quot;&gt;Toggle quickdraw mode&lt;&#x2F;button&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;script&gt;
    (function () {
    main.wireframe().then(function(wireframe){
        var Mesh = wireframe.geometry.Mesh;
        var Face = wireframe.geometry.Face;
        var Scene = wireframe.engine.Scene;
        var Camera = wireframe.engine.Camera;
        var cubejson = {
            &quot;name&quot;: &quot;cube&quot;,
            &quot;vertices&quot;: [
                [-40, -40,  40],
                [-40, -40, -40],
                [ 40, -40, -40],
                [ 40, -40,  40],
                [-40,  40,  40],
                [-40,  40, -40],
                [ 40,  40, -40],
                [ 40,  40,  40]
            ],
            &quot;faces&quot;: [
                {&quot;face&quot;: [1, 2, 0], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [2, 3, 0], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [7, 6, 4], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [6, 5, 4], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [4, 5, 0], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [5, 1, 0], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [5, 6, 1], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [6, 2, 1], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [6, 7, 2], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [7, 3, 2], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [0, 3, 4], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [3, 7, 4], &quot;color&quot;: &quot;red&quot;}
            ]
        };
        var icosjson = {
            &quot;name&quot;: &quot;ico&quot;,
            &quot;vertices&quot;: [
                [0,-69.03285,0],
                [-49.9527, -30.872850000000003, -36.29235],
                [19.07985, -30.872850000000003, -58.722750000000005],
                [61.7448, -30.8726, 0],
                [19.07985, -30.872850000000003, 58.722750000000005],
                [-49.9527, -30.872850000000003, 36.29235],
                [-19.07985, 30.872850000000003, -58.722750000000005],
                [49.9527, 30.872850000000003, -36.29235],
                [49.9527, 30.872850000000003, 36.29235],
                [-19.07985, 30.872850000000003, 58.722750000000005],
                [-61.7448, 30.8726, 0],
                [0, 69.03285, 0],
                [11.21475, -58.723099999999995, -34.5161],
                [-29.36125, -58.723099999999995, -21.33195],
                [-18.1466, -36.2932, -55.8484],
                [-58.72265, -36.29305, 0],
                [-29.36125, -58.723099999999995, 21.33195],
                [36.29265, -58.72295, 0],
                [47.5077, -36.2931, -34.516200000000005],
                [11.21475, -58.723099999999995, 34.5161],
                [47.5077, -36.2931, 34.516200000000005],
                [-18.1466, -36.2932, 55.8484],
                [-65.65425, 0, -21.33205],
                [-65.65425, 0, 21.33205],
                [0, 0, -69.03285],
                [-40.57655, 0, -55.84875],
                [65.65425, 0, -21.33205],
                [40.57655, 0, -55.84875],
                [40.57655, 0, 55.84875],
                [65.65425, 0, 21.33205],
                [-40.57655, 0, 55.84875],
                [0, 0, 69.03285],
                [-47.5077, 36.2931, -34.516200000000005],
                [18.1466, 36.2932, -55.8484],
                [58.72265, 36.29305, 0],
                [18.1466, 36.2932, 55.8484],
                [-47.5077, 36.2931, 34.516200000000005],
                [-11.21475, 58.723099999999995, -34.5161],
                [-36.29265, 58.72295, 0],
                [29.36125, 58.723099999999995, -21.33195],
                [29.36125, 58.723099999999995, 21.33195],
                [-11.21475,58.723099999999995,34.5161]
            ],
            &quot;faces&quot;: [
                {&quot;face&quot;: [13, 12,  0], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [13, 15,  1], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [12, 17,  0], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [17, 19,  0], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [19, 16,  0], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [15, 22,  1], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [14, 24,  2], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [18, 26,  3], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [20, 28,  4], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [21, 30,  5], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [22, 25,  1], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [24, 27,  2], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [26, 29,  3], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [28, 31,  4], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [30, 23,  5], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [32, 37,  6], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [33, 39,  7], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [34, 40,  8], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [35, 41,  9], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [36, 38, 10], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [14,  2, 12], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [13, 14, 12], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [ 1, 14, 13], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [16,  5, 15], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [13, 16, 15], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [ 0, 16, 13], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [18,  3, 17], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [12, 18, 17], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [ 2, 18, 12], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [20,  4, 19], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [17, 20, 19], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [ 3, 20, 17], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [21,  5, 16], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [19, 21, 16], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [ 4, 21, 19], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [23, 10, 22], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [15, 23, 22], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [ 5, 23, 15], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [25,  6, 24], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [14, 25, 24], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [ 1, 25, 14], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [27,  7, 26], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [18, 27, 26], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [ 2, 27, 18], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [29,  8, 28], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [20, 29, 28], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [ 3, 29, 20], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [31,  9, 30], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [21, 31, 30], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [ 4, 31, 21], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [32,  6, 25], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [22, 32, 25], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [10, 32, 22], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [33,  7, 27], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [24, 33, 27], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [ 6, 33, 24], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [34,  8, 29], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [26, 34, 29], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [ 7, 34, 26], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [35,  9, 31], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [28, 35, 31], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [ 8, 35, 28], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [36, 10, 23], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [30, 36, 23], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [ 9, 36, 30], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [38, 11, 37], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [32, 38, 37], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [10, 38, 32], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [37, 11, 39], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [33, 37, 39], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [ 6, 37, 33], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [39, 11, 40], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [34, 39, 40], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [ 7, 39, 34], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [40, 11, 41], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [35, 40, 41], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [ 8, 40, 35], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [41, 11, 38], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [36, 41, 38], &quot;color&quot;: &quot;red&quot;},
                {&quot;face&quot;: [ 9, 41, 36], &quot;color&quot;: &quot;red&quot;}
             ]
        }
        var icos = Mesh.fromJSON(icosjson);
        var cube = Mesh.fromJSON(cubejson);
        function rotateMesh(){
            if (scene.isKeyDown(&#x27;h&#x27;)) {
                icos.rotation.yaw -= 0.03;
            }
            if (scene.isKeyDown(&#x27;j&#x27;)) {
                icos.rotation.pitch -= 0.03;
            }
            if (scene.isKeyDown(&#x27;l&#x27;)) {
                icos.rotation.yaw += 0.03;
            }
            if (scene.isKeyDown(&#x27;k&#x27;)) {
                icos.rotation.pitch += 0.03;
            }
            if (scene.isKeyDown(&#x27;u&#x27;)) {
                icos.rotation.roll += 0.03;
            }
            if (scene.isKeyDown(&#x27;i&#x27;)) {
                icos.rotation.roll -= 0.03;
            }
        }
        function moveCamera(E, H){
            if (scene.isKeyDown(&#x27;w&#x27;)) {
                scene.camera.moveForward(3);
            }
            if (scene.isKeyDown(&#x27;s&#x27;)) {
                scene.camera.moveBackward(3);
            }
            if (scene.isKeyDown(&#x27;a&#x27;)) {
                scene.camera.moveLeft(3);
            }
            if (scene.isKeyDown(&#x27;d&#x27;)) {
                scene.camera.moveRight(3);
            }
            if (scene.isKeyDown(&#x27;r&#x27;)) {
                scene.camera.moveUp(3);
            }
            if (scene.isKeyDown(&#x27;f&#x27;)) {
                scene.camera.moveDown(3);
            }
            if (scene.isKeyDown(&#x27;t&#x27;)) {
                scene.camera.lookUp(0.02);
            }
            if (scene.isKeyDown(&#x27;g&#x27;)) {
                scene.camera.lookDown(0.02);
            }
            if (scene.isKeyDown(&#x27;q&#x27;)) {
                scene.camera.turnLeft(0.02);
            }
            if (scene.isKeyDown(&#x27;e&#x27;)) {
                scene.camera.turnRight(0.02);
            }
            scene._needs_update = true;
        }
        var scene = new Scene({canvas_id: &#x27;wireframe&#x27;, width:600, height:400});
        scene.addListener(&#x27;keydown&#x27;, rotateMesh);
        scene.addListener(&#x27;keydown&#x27;, moveCamera);
        scene.addListener(&#x27;mousedrag&#x27;, function(e){
            var mouse = e.mouse;
            scene.camera.move(mouse.deltax, mouse.deltay, 0);
            scene._needs_update = true;
        });
        cube.position.x = 200
        scene.camera.moveTo(0, 0, 400);
        scene.addMesh(icos);
        scene.addMesh(cube);
        scene.renderScene();
        document.getElementById(&quot;toggledraw&quot;).addEventListener(&#x27;click&#x27;, function(){
            scene.toggleDrawMode();
        });
        document.getElementById(&quot;togglebfcull&quot;).addEventListener(&#x27;click&#x27;, function(){
            scene.toggleBackfaceCulling();
        });
        document.getElementById(&quot;toggleqdraw&quot;).addEventListener(&#x27;click&#x27;, function(){
            scene.toggleQuickDraw();
        });
    });
})();
&lt;&#x2F;script&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>VideoASCII</title>
        <published>2014-11-22T15:19:00+00:00</published>
        <updated>2014-11-22T15:19:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://ebenpackwood.com/pages/projects/videoascii/" type="text/html"/>
        <id>https://ebenpackwood.com/pages/projects/videoascii/</id>
        
        <content type="html">&lt;canvas id=&quot;canvas&quot; width=&quot;300&quot; height=&quot;300&quot;&gt;
    Sorry, this browser does not support canvas.
&lt;&#x2F;canvas&gt;
&lt;button id=&quot;start&quot;&gt;Start&lt;&#x2F;button&gt;&lt;button id=&quot;pause&quot;&gt;Pause&lt;&#x2F;button&gt;&lt;button id=&quot;restart&quot;&gt;Restart&lt;&#x2F;button&gt;
&lt;label&gt;Monochrome&lt;input id=&quot;monochrome&quot; type=&quot;checkbox&quot; checked=&quot;checked&quot;&gt;&lt;&#x2F;label&gt;
&lt;script&gt;
    (function(){
        main.videoascii().then(function(videoascii){
            var canvas = document.getElementById(&#x27;canvas&#x27;);
            var start = document.getElementById(&#x27;start&#x27;);
            var pause = document.getElementById(&#x27;pause&#x27;);
            var restart = document.getElementById(&#x27;restart&#x27;);
            var monochrome = document.getElementById(&#x27;monochrome&#x27;);
            var ctx = canvas.getContext(&#x27;2d&#x27;);
            &#x2F;&#x2F; Prepare canvas and display instruction
            canvas.style.border = &quot;4px dashed gray&quot;;
            ctx.textAlign = &quot;center&quot;; 
            ctx.font = &quot;14pt Arial&quot;; 
            ctx.fillText(&quot;Drop video files here to asciify&quot;, 150, 150); 
            function make_ascii(canvas, videoSrc){
                canvas.style.border = &quot;&quot;;
                var vid = videoascii({
                    canvas: canvas,
                    output_width: canvas.parentElement.offsetWidth,
                    videoSrc: videoSrc,
                    font_size: 8,
                    monochrome: true,
                    autoplay: false
                });
                start.addEventListener(&#x27;click&#x27;, function(){
                    vid.start();
                });
                pause.addEventListener(&#x27;click&#x27;, function(){
                    vid.pause();
                });
                restart.addEventListener(&#x27;click&#x27;, function(){
                    vid.restart();
                });
                monochrome.addEventListener(&#x27;click&#x27;, function(){
                    vid.toggleMonochrome();
                });
                window.addEventListener(&#x27;resize&#x27;, function() {
                    vid.resize(canvas.parentElement.offsetWidth);
                });
            }
            &#x2F;&#x2F; Register canvas drag &#x27;n&#x27; drop handler
            canvas.addEventListener(&quot;dragover&quot;, function (e) {
                e.preventDefault();
            }, false);
            canvas.addEventListener(&quot;drop&quot;, function (e) {
                e.preventDefault();
                var files = e.dataTransfer.files;
                var tempvid = document.createElement(&#x27;video&#x27;);
                if (files.length &gt; 0) {
                    var file = files[0];
                    if (tempvid.canPlayType(file.type)) {
                        make_ascii(canvas, file);
                    }
                }
                e.preventDefault();
            }, false);
        });
    })()
&lt;&#x2F;script&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Canvas Path Performance</title>
        <published>2014-08-31T12:34:00+00:00</published>
        <updated>2014-08-31T12:34:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://ebenpackwood.com/posts/canvas-path-performance.html/" type="text/html"/>
        <id>https://ebenpackwood.com/posts/canvas-path-performance.html/</id>
        
        <content type="html">&lt;p&gt;If you&#x27;ve done much work with the HTML5 canvas API, and especially if you&#x27;ve ever looked into performance tuning your
canvas apps, you&#x27;ve likely come across the advice to batch your canvas calls together. For example, you may have read
that when drawing multiple lines or shapes, it&#x27;s better to create a single path and only call your draw method once,
drawing all lines and shapes in one go, than it is to draw each line or shape individually. In other words, this:&lt;&#x2F;p&gt;
&lt;!--more--&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;ctx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;beginPath&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;lineArray.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;line&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    ctx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;moveTo&lt;&#x2F;span&gt;&lt;span&gt;(line.startx, line.starty);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    ctx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;lineTo&lt;&#x2F;span&gt;&lt;span&gt;(line.endx, line.endy);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Draw all lines at once.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;ctx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;stroke&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;ctx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;closePath&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;is preferable to this:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt; lineArray.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;line&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    ctx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;beginPath&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    ctx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;moveTo&lt;&#x2F;span&gt;&lt;span&gt;(line.startx, line.starty);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    ctx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;lineTo&lt;&#x2F;span&gt;&lt;span&gt;(line.endx, line.endy);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Draw each line individually.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    ctx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;stroke&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    ctx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;closePath&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As I recently discovered, however, this does not always hold true. Performance in certain browsers actually degrades
very quickly as the number of subpaths increases above a certain threshold. More information about how different
browsers perform can be found at this &lt;a href=&quot;http:&#x2F;&#x2F;jsperf.com&#x2F;canvas-path-performance&#x2F;2&quot;&gt;jsperf&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The following test method was used in order to obtain quantitative data to investigate this issue:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;html&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;&amp;lt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;DOCTYPE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;html &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;lang&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;en&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;meta &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;charset&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Long Path&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;canvas &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;canvas&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;600&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;600&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;canvas&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        (&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;canvas &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;document&lt;&#x2F;span&gt;&lt;span&gt;.getElementById(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;canvas&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;ctx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;canvas.getContext(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;2d&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;13&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            ctx.strokeStyle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;red&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;14&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;15&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;results &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[];
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Draw increasingly long paths
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;18&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;2000&lt;&#x2F;span&gt;&lt;span&gt;; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;19&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                ctx.clearRect(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;600&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;600&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;performance.now();
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;21&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                ctx.beginPath();
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;22&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;j&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; j&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;i; j&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;23&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                    ctx.moveTo(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, j);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                    ctx.lineTo(j, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;25&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;26&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                ctx.stroke();
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;27&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                ctx.closePath();
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;28&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;end &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;performance.now();
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;29&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                results.push(end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;start);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;30&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;31&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        })();
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;32&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;33&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;34&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What this code is doing is drawing paths to the canvas with increasingly many subpaths. &lt;code&gt;performance.now()&lt;&#x2F;code&gt; was used to
measure execution time, as it provides higher resolution timestamps than &lt;code&gt;Date.now()&lt;&#x2F;code&gt;. Results were stored in an array,
which was used to produce the chart below.&lt;&#x2F;p&gt;
&lt;svg viewBox=&quot;0,0,1000,280&quot;&gt;
    &lt;g transform=&quot;translate(80,80)&quot;&gt;
        &lt;g class=&quot;x axis&quot; transform=&quot;translate(0,120)&quot;&gt;
            &lt;line class=&quot;tick minor&quot; y2=&quot;-120&quot; x2=&quot;0&quot; transform=&quot;translate(42,0)&quot; style=&quot;opacity: 1;&quot;&gt;&lt;&#x2F;line&gt;
            &lt;line class=&quot;tick minor&quot; y2=&quot;-120&quot; x2=&quot;0&quot; transform=&quot;translate(126,0)&quot; style=&quot;opacity: 1;&quot;&gt;&lt;&#x2F;line&gt;
            &lt;line class=&quot;tick minor&quot; y2=&quot;-120&quot; x2=&quot;0&quot; transform=&quot;translate(210,0)&quot; style=&quot;opacity: 1;&quot;&gt;&lt;&#x2F;line&gt;
            &lt;line class=&quot;tick minor&quot; y2=&quot;-120&quot; x2=&quot;0&quot; transform=&quot;translate(294,0)&quot; style=&quot;opacity: 1;&quot;&gt;&lt;&#x2F;line&gt;
            &lt;line class=&quot;tick minor&quot; y2=&quot;-120&quot; x2=&quot;0&quot; transform=&quot;translate(378,0)&quot; style=&quot;opacity: 1;&quot;&gt;&lt;&#x2F;line&gt;
            &lt;line class=&quot;tick minor&quot; y2=&quot;-120&quot; x2=&quot;0&quot; transform=&quot;translate(462.00000000000006,0)&quot; style=&quot;opacity: 1;&quot;&gt;&lt;&#x2F;line&gt;
            &lt;line class=&quot;tick minor&quot; y2=&quot;-120&quot; x2=&quot;0&quot; transform=&quot;translate(546,0)&quot; style=&quot;opacity: 1;&quot;&gt;&lt;&#x2F;line&gt;
            &lt;line class=&quot;tick minor&quot; y2=&quot;-120&quot; x2=&quot;0&quot; transform=&quot;translate(630,0)&quot; style=&quot;opacity: 1;&quot;&gt;&lt;&#x2F;line&gt;
            &lt;line class=&quot;tick minor&quot; y2=&quot;-120&quot; x2=&quot;0&quot; transform=&quot;translate(714,0)&quot; style=&quot;opacity: 1;&quot;&gt;&lt;&#x2F;line&gt;
            &lt;line class=&quot;tick minor&quot; y2=&quot;-120&quot; x2=&quot;0&quot; transform=&quot;translate(798,0)&quot; style=&quot;opacity: 1;&quot;&gt;&lt;&#x2F;line&gt;
            &lt;g transform=&quot;translate(0,0)&quot; style=&quot;opacity: 1;&quot;&gt;
                &lt;line class=&quot;tick&quot; y2=&quot;-120&quot; x2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text y=&quot;3&quot; x=&quot;0&quot; dy=&quot;.71em&quot; text-anchor=&quot;middle&quot;&gt;0&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;g transform=&quot;translate(84,0)&quot; style=&quot;opacity: 1;&quot;&gt;
                &lt;line class=&quot;tick&quot; y2=&quot;-120&quot; x2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text y=&quot;3&quot; x=&quot;0&quot; dy=&quot;.71em&quot; text-anchor=&quot;middle&quot;&gt;200&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;g transform=&quot;translate(168,0)&quot; style=&quot;opacity: 1;&quot;&gt;
                &lt;line class=&quot;tick&quot; y2=&quot;-120&quot; x2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text y=&quot;3&quot; x=&quot;0&quot; dy=&quot;.71em&quot; text-anchor=&quot;middle&quot;&gt;400&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;g transform=&quot;translate(252,0)&quot; style=&quot;opacity: 1;&quot;&gt;
                &lt;line class=&quot;tick&quot; y2=&quot;-120&quot; x2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text y=&quot;3&quot; x=&quot;0&quot; dy=&quot;.71em&quot; text-anchor=&quot;middle&quot;&gt;600&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;g transform=&quot;translate(336,0)&quot; style=&quot;opacity: 1;&quot;&gt;
                &lt;line class=&quot;tick&quot; y2=&quot;-120&quot; x2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text y=&quot;3&quot; x=&quot;0&quot; dy=&quot;.71em&quot; text-anchor=&quot;middle&quot;&gt;800&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;g transform=&quot;translate(420,0)&quot; style=&quot;opacity: 1;&quot;&gt;
                &lt;line class=&quot;tick&quot; y2=&quot;-120&quot; x2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text y=&quot;3&quot; x=&quot;0&quot; dy=&quot;.71em&quot; text-anchor=&quot;middle&quot;&gt;1,000&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;g transform=&quot;translate(504,0)&quot; style=&quot;opacity: 1;&quot;&gt;
                &lt;line class=&quot;tick&quot; y2=&quot;-120&quot; x2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text y=&quot;3&quot; x=&quot;0&quot; dy=&quot;.71em&quot; text-anchor=&quot;middle&quot;&gt;1,200&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;g transform=&quot;translate(588,0)&quot; style=&quot;opacity: 1;&quot;&gt;
                &lt;line class=&quot;tick&quot; y2=&quot;-120&quot; x2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text y=&quot;3&quot; x=&quot;0&quot; dy=&quot;.71em&quot; text-anchor=&quot;middle&quot;&gt;1,400&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;g transform=&quot;translate(672,0)&quot; style=&quot;opacity: 1;&quot;&gt;
                &lt;line class=&quot;tick&quot; y2=&quot;-120&quot; x2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text y=&quot;3&quot; x=&quot;0&quot; dy=&quot;.71em&quot; text-anchor=&quot;middle&quot;&gt;1,600&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;g transform=&quot;translate(756,0)&quot; style=&quot;opacity: 1;&quot;&gt;
                &lt;line class=&quot;tick&quot; y2=&quot;-120&quot; x2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text y=&quot;3&quot; x=&quot;0&quot; dy=&quot;.71em&quot; text-anchor=&quot;middle&quot;&gt;1,800&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;g transform=&quot;translate(840,0)&quot; style=&quot;opacity: 1;&quot;&gt;
                &lt;line class=&quot;tick&quot; y2=&quot;-120&quot; x2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text y=&quot;3&quot; x=&quot;0&quot; dy=&quot;.71em&quot; text-anchor=&quot;middle&quot;&gt;2,000&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;path class=&quot;domain&quot; d=&quot;M0,-120V0H840V-120&quot;&gt;&lt;&#x2F;path&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;y axis&quot; transform=&quot;translate(-25,0)&quot;&gt;
            &lt;g transform=&quot;translate(0,120)&quot; style=&quot;opacity: 1;&quot;&gt;
                &lt;line class=&quot;tick&quot; x2=&quot;-6&quot; y2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text x=&quot;-9&quot; y=&quot;0&quot; dy=&quot;.32em&quot; text-anchor=&quot;end&quot;&gt;0&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;g transform=&quot;translate(0,95.24057071334579)&quot; style=&quot;opacity: 1;&quot;&gt;
                &lt;line class=&quot;tick&quot; x2=&quot;-6&quot; y2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text x=&quot;-9&quot; y=&quot;0&quot; dy=&quot;.32em&quot; text-anchor=&quot;end&quot;&gt;200&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;g transform=&quot;translate(0,70.4811414266916)&quot; style=&quot;opacity: 1;&quot;&gt;
                &lt;line class=&quot;tick&quot; x2=&quot;-6&quot; y2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text x=&quot;-9&quot; y=&quot;0&quot; dy=&quot;.32em&quot; text-anchor=&quot;end&quot;&gt;400&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;g transform=&quot;translate(0,45.7217121400374)&quot; style=&quot;opacity: 1;&quot;&gt;
                &lt;line class=&quot;tick&quot; x2=&quot;-6&quot; y2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text x=&quot;-9&quot; y=&quot;0&quot; dy=&quot;.32em&quot; text-anchor=&quot;end&quot;&gt;600&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;g transform=&quot;translate(0,20.962282853383186)&quot; style=&quot;opacity: 1;&quot;&gt;
                &lt;line class=&quot;tick&quot; x2=&quot;-6&quot; y2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text x=&quot;-9&quot; y=&quot;0&quot; dy=&quot;.32em&quot; text-anchor=&quot;end&quot;&gt;800&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;path class=&quot;domain&quot; d=&quot;M-6,0H0V120H-6&quot;&gt;&lt;&#x2F;path&gt;
        &lt;&#x2F;g&gt;
        &lt;text class=&quot;y label&quot; text-anchor=&quot;end&quot; y=&quot;6&quot; dy=&quot;.75em&quot; transform=&quot;rotate(-90)&quot;&gt;execution time&lt;&#x2F;text&gt;
        &lt;text class=&quot;y label&quot; text-anchor=&quot;end&quot; y=&quot;25&quot; dy=&quot;.75em&quot; transform=&quot;rotate(-90)&quot;&gt;(milliseconds)&lt;&#x2F;text&gt;
        &lt;text class=&quot;x label&quot; text-anchor=&quot;end&quot; x=&quot;160&quot; y=&quot;160&quot; dx=&quot;.75em&quot;&gt;number of subpaths&lt;&#x2F;text&gt;
        &lt;rect x=&quot;70&quot; y=&quot;55&quot; width=&quot;10&quot; height=&quot;10&quot; style=&quot;fill: steelblue;&quot;&gt;&lt;&#x2F;rect&gt;
        &lt;rect x=&quot;70&quot; y=&quot;25&quot; width=&quot;10&quot; height=&quot;10&quot; style=&quot;fill: rgb(223, 94, 98);&quot;&gt;&lt;&#x2F;rect&gt;
        &lt;text text-anchor=&quot;start&quot; x=&quot;90&quot; y=&quot;65&quot;&gt;Chrome&lt;&#x2F;text&gt;
        &lt;text text-anchor=&quot;start&quot; x=&quot;90&quot; y=&quot;35&quot;&gt;Firefox&lt;&#x2F;text&gt;
        &lt;path class=&quot;chartline1&quot; d=&quot;M0,119.99715266556885L8.4,119.9870012997277L16.8,119.98997243134718L25.2,119.98353497935483L33.6,119.97474538213508L42,119.96347984159884L50.4,119.95085253289156L58.800000000000004,119.93599687524448L67.2,119.9170559117332L75.6,119.9005908915384L84,119.81380909178408L92.4,119.52251440624426L100.8,119.83237866373032L109.2,119.80402911705758L117.60000000000001,119.76874693053983L126,119.738292832566L134.4,119.7139047945691L142.8,119.67664185348825L151.2,119.61981896340477L159.6,119.43065692356936L168,119.56101531875817L176.4,119.34276094957032L184.8,119.45318800419147L193.20000000000002,119.42483845751872L201.6,119.38274742789397L210,119.32716250924355L218.4,119.27479631613893L226.8,119.24335184110872L235.20000000000002,119.18900489344098L243.6,119.14765664694629L252,119.09677601965141L260.4,119.03970553519125L268.8,118.99588134538007L277.2,118.93484935224404L285.6,118.89795780227784L294,118.83630682365047L302.4,118.7975583163095L310.8,118.75744804124787L319.2,118.70842437132778L327.6,118.66398119602526L336,118.62647066056772L344.40000000000003,117.35395979214475L352.8,118.54488834092231L361.2,118.37231511892041L369.6,118.44547923246071L378,118.43557546054588L386.40000000000003,118.40512136257203L394.8,118.38159990444316L403.2,118.3497840382983L411.59999999999997,118.32527220311306L420,118.31895854875941L428.40000000000003,118.3085595880912L436.8,118.28800926158183L445.20000000000005,118.2777340990027L453.6,118.25755516405836L462.00000000000006,118.24430886940937L470.40000000000003,118.23948078041511L478.80000000000007,118.22722486282248L487.2,117.81287581395424L495.59999999999997,118.21360717705883L504,118.21385477143552L512.4,118.21992083186285L520.8,118.2107598426277L529.2,118.2123692051754L537.6,118.2080363053849L546,118.20357960840603L554.4,118.20902668289163L562.8000000000001,118.20741731989354L571.2,118.210017059948L579.6,118.20345581121768L588,118.20543656533043L596.4,118.19119989362507L604.8,117.79133511083886L613.1999999999999,118.1970183596757L621.6,118.19738975079036L630,118.19738975079036L638.4,118.1940472280562L646.8000000000001,118.19491380792424L655.2,118.19305685054947L663.6,118.19144748755137L672,118.18327687582297L680.4000000000001,118.17312550998182L688.8000000000001,118.1783249905411L697.2,118.09253356784315L705.6,118.08894345073232L714,118.05910833824981L722.4,118.16730704438154L730.8,118.08931484184697L739.2,118.09216217627812L747.6,118.06269845536065L756,118.02667348571286L764.4,118.16520249263009L772.8000000000001,118.16185996989593L781.2,118.15938402702982L789.6,118.15220379190741L798,118.15307037267618L806.4,118.15269898066077L814.8,118.1533179666025L823.1999999999999,118.14081445508356L831.6,118.15282277784912&quot;&gt;&lt;&#x2F;path&gt;
        &lt;path class=&quot;chartline2&quot; d=&quot;M0,119.9912308291324L8.4,119.93999391376089L16.8,119.94360581930523L25.2,119.90974680456713L33.6,119.87566829748843L42,119.82725767097L50.4,119.53072611852409L58.800000000000004,119.75350762553386L67.2,119.72090193310626L75.6,119.61835568103258L84,119.55524278160658L92.4,119.50405129978782L100.8,119.51322144961271L109.2,119.43695720792967L117.60000000000001,119.2900369828913L126,119.27491726600596L134.4,119.13142993583818L142.8,119.00078123633557L151.2,118.96507900588423L159.6,118.85537802152959L168,118.76208870108046L176.4,118.64402682884715L184.8,118.53474997351618L193.20000000000002,118.3230038679366L201.6,118.2931461007684L210,118.15872641638828L218.4,118.02142188710482L226.8,117.88072333525474L235.20000000000002,117.73717732523956L243.6,117.2005280847888L252,117.35293759909716L260.4,113.53191762891937L268.8,110.89718666177275L277.2,107.63527545794592L285.6,104.35110008011594L294,101.0171323758162L302.4,97.60070289708865L310.8,94.36911902300646L319.2,90.6793943448271L327.6,87.55608221704398L336,83.95848440410875L344.40000000000003,80.20568223248725L352.8,77.28288236202775L361.2,74.23344556239297L369.6,70.37056569170028L378,67.10857748604835L386.40000000000003,63.670215857264495L394.8,60.44323352311505L403.2,56.307507465220645L411.59999999999997,53.56912510887422L420,47.83764392968311L428.40000000000003,46.02670646541338L436.8,43.49289827456225L445.20000000000005,40.17975473585841L453.6,36.59497661262485L462.00000000000006,32.873368598367264L470.40000000000003,29.00521311227945L478.80000000000007,25.453203722315394L487.2,21.83521949049407L495.59999999999997,19.685698811483718L504,16.636561229551546L512.4,14.742435425402121L520.8,15.10897636870753L529.2,14.755852931523862L537.6,12.933001848866894L546,12.931146872425032L554.4,14.418725571225323L562.8000000000001,13.544054412295864L571.2,11.614251384718287L579.6,12.094303540951373L588,10.586572152277313L596.4,11.398966042519348L604.8,10.661775823806948L613.1999999999999,10.117330953248143L621.6,11.77077925869709L630,9.823872417368008L638.4,7.789974683008694L646.8000000000001,10.0715295991846L655.2,8.72169144321795L663.6,7.964194654778922L672,5.639081960224502L680.4000000000001,8.914967881129385L688.8000000000001,5.657684833622511L697.2,5.7032650859815135L705.6,6.380235544579136L714,4.908095464115149L722.4,4.899469774139476L730.8,3.6037475599813007L739.2,3.914607889343941L747.6,3.4469436183657365L756,4.266697744151614L764.4,3.4666475435839743L772.8000000000001,4.536972788419362L781.2,3.9160970452180948L789.6,2.7566662044977335L798,1.1558531031896564L806.4,1.372214985373617L814.8,1.626467955355011L823.1999999999999,1.313460859676212L831.6,0&quot;&gt;&lt;&#x2F;path&gt;
    &lt;&#x2F;g&gt;
&lt;&#x2F;svg&gt;
&lt;p&gt;The takeaway, it would seem, is that you may see performance drop off precipitously in some browsers when the number of
subpaths in your path reaches or exceeds ~600. If you encounter this issue, in order to work around it, paths should be
periodically drawn and closed. In other words, paths should not be fully batched together, but should be batched into
chunks. Experimentation has shown that keeping subpaths to &amp;lt;200 provides relatively good performance.&lt;&#x2F;p&gt;
&lt;p&gt;Addendum: Further testing suggests this issue is not very widespread at all, and does not affect all versions of
Firefox. Currently, these results are reproducible in Firefox 31.0 running on Arch Linux. Firefox 31.0 running on
OS X 10.7 does not produce similar results. After further investigation, this sounds like it may be an issue with
&lt;a href=&quot;https:&#x2F;&#x2F;bugzilla.mozilla.org&#x2F;show_bug.cgi?id=703281&quot;&gt;cairo&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A Load of Garbage</title>
        <published>2014-08-28T09:30:00+00:00</published>
        <updated>2014-08-28T09:30:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://ebenpackwood.com/posts/low-garbage-canvas.html/" type="text/html"/>
        <id>https://ebenpackwood.com/posts/low-garbage-canvas.html/</id>
        
        <content type="html">&lt;p&gt;After I completed a working version of my 3D rendering engine &lt;a href=&quot;&#x2F;pages&#x2F;projects&#x2F;wireframe.html&quot;&gt;wireframe.js&lt;&#x2F;a&gt;, I started
looking for ways to make improvements, both in terms of performance, and usability. While both efforts are still
ongoing, there are a few things I have learned with regard to performance that I wanted to get down in writing.&lt;&#x2F;p&gt;
&lt;!--more--&gt;
&lt;p&gt;One of the main areas of focus for performance on this project has been memory management. In order to achieve a smooth,
stable 60 frames per second, you have just under 17ms to complete all of the operations required to get a frame on the
screen. This includes any physics or game logic you might need to execute, as well as the time required to paint the
frame itself. I don&#x27;t know if you&#x27;ve heard, but 17ms is not very much time at all. So when a garbage collection (GC)
event occurs, this takes some time away from the already tight 17ms you have to draw your frame. And if you don&#x27;t have
those extra milliseconds to spare for a GC event (and you don&#x27;t really have much say in when they occur, so you can&#x27;t
exactly plan for them), this can result in skipped frames, which can appear to the user as a stutter or pause. I
believe some folks call it jank.&lt;&#x2F;p&gt;
&lt;p&gt;So how do we avoid this? Well, the obvious answer is: if you want to avoid garbage collection, then don&#x27;t make so much
garbage. It may sound an easy thing, but the details of just how to achieve this can be a little more tricky. First,
just where does garbage come from in JavaScript? If you aren&#x27;t experienced with memory management, the answer may not
be obvious.&lt;&#x2F;p&gt;
&lt;p&gt;Simply put, creating a new object requires the interpreter to allocate memory for that object. But isn&#x27;t everything in
JavaScript an object? Well... yes and no. Strings, numbers, and booleans (so long as they aren&#x27;t instantiated by their
respective &lt;code&gt;String&lt;&#x2F;code&gt;, &lt;code&gt;Number&lt;&#x2F;code&gt; or &lt;code&gt;Boolean&lt;&#x2F;code&gt; constructors) and &lt;code&gt;null&lt;&#x2F;code&gt; and &lt;code&gt;undefined&lt;&#x2F;code&gt; are all primitive types, meaning
they&#x27;re not, strictly speaking, objects. They do, however, behave like objects on occasion. When a method is called on
a primitive type, a wrapper object is quickly created for that value in order to call the method, and then, just as
quickly, it is discarded. And, more importantly, while they may not technically be objects, they still need some memory
allocated in order to store them.&lt;&#x2F;p&gt;
&lt;p&gt;Garbage is what happens to the memory allocated to objects that are no longer in use (or, more specifically, objects
that are no longer referenced). Once an object is no longer referenced in a program, the interpreter can mark this
object as garbage that needs to be collected (i.e. memory which can be deallocated). E.g.:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Memory allocated for first array object.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; foo assigned to second array object. Memory allocated
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; for second array object. First array object
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; no longer referenced, can be marked for GC.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;a&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;b&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;c&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; bar assigned to value of foo. Second array object now
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; referenced by both foo and bar.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;bar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;foo;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;13&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; foo assigned to &amp;#39;bar&amp;#39;, but second array still
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;14&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; referenced by bar, so cannot be marked for GC.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;15&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;bar&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But while virtually anything you do in JavaScript will require the allocation of some amount of memory, the situation
is not so hopeless as it may seem. After all, the goal is to reduce garbage, not necessarily to reduce the total amount
of memory allocated (although memory use should always be kept as low as possible). As garbage is created when an object
is no longer referenced, there are a few strategies to reduce garbage collection.&lt;&#x2F;p&gt;
&lt;p&gt;What it boils down to is that, in order to reduce garbage, it is imperative that, as much as possible, you should not
discard objects once they have been created. wireframe.js provides us with a good case study of how this can be achieved
in a project that makes use of the canvas, and for JavaScript in general.&lt;&#x2F;p&gt;
&lt;p&gt;In the first, &#x27;high-garbage&#x27; iteration, I was using a version of the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ebenpack&#x2F;linearalgea.js&quot;&gt;linearalgea.js&lt;&#x2F;a&gt; math library (which I created especially to perform the
matrix and vector math required by a 3D rendering engine) that created and returned a new matrix, or a new vector, for
virtually every method call. As a general design decision, this mostly made sense. You want your matrices and vectors
to be more or less immutable. You don&#x27;t want the methods you&#x27;re calling to change the value of the object itself, as you
often need to use these matrices and vectors in multiple operations. E.g.:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Old, high-garbage methods
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span&gt;.prototype.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;subtract &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;vector&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;return new &lt;&#x2F;span&gt;&lt;span&gt;Vector(
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        this.x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;vector.x,
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        this.y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;vector.y,
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        this.z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;vector.z
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    );
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span&gt;.prototype.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;cross &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;vector&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;return new &lt;&#x2F;span&gt;&lt;span&gt;Vector(
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        (this.y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;vector.z) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(this.z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;vector.y),
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        (this.z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;vector.x) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(this.x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;vector.z),
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;13&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        (this.x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;vector.y) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(this.y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;vector.x)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;14&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    );
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;15&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Three vertices of a triangle
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;18&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;vertex1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span&gt;Vector(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;19&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;vertex2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span&gt;Vector(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;vertex3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span&gt;Vector(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;21&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;22&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Find vectors representing two sides of the triangle
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;23&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; We may still need to use the vertices later,
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; so an in-place operation would not be appropriate
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;25&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;side1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;vertex2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;subtract&lt;&#x2F;span&gt;&lt;span&gt;(vertex1);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;26&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;side2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;vertex3.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;subtract&lt;&#x2F;span&gt;&lt;span&gt;(vertex1);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;27&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;28&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Find the normal of the triangle, using the two sides
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;29&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;normal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;side1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;cross&lt;&#x2F;span&gt;&lt;span&gt;(side2);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The above code does what we want, but it also creates three new vectors along the way. Assume we run this code just
once per frame (in reality it will run many times per frame, potentially once per triangle of every mesh in our scene).
This means that for every frame, we are adding three new vectors as garbage that will need to be collected (assuming the
interpreter isn&#x27;t smart enough to make some reuse of them, which... are there any interpreters that do that? I don&#x27;t
know).&lt;&#x2F;p&gt;
&lt;p&gt;The solution to this problem was to add &#x27;low-garbage&#x27; versions of all of these methods which do not create a new vector
or matrix, but which rather assign the result of the operation to a matrix or vector object that is passed to the method
call. As JavaScript uses a call-by-sharing evaluation strategy (which means that mutations made to a mutable argument
inside a function will be visible outside of that function), we can pass an object to a function that we will use to
store the results of the function call.&lt;&#x2F;p&gt;
&lt;p&gt;This method of returning results might be familiar to those of you who are have some experience with C. In C, functions
are limited in what they can return; e.g. a function cannot return an array. Instead, a function can return a pointer to
an array, or, alternatively, a pointer to the array can be assigned to a pointer that is passed as an argument to the
function.&lt;&#x2F;p&gt;
&lt;p&gt;The above example, rewritten to use the low-garbage methods, would look something like this:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; New, low-grabage methods
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span&gt;.prototype.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;subtractLG &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;vector&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    result.x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;this.x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;vector.x;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    result.y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;this.y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;vector.y;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    result.z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;this.z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;vector.z;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span&gt;.prototype.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;crossLG &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;vector&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    result.x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(this.y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;vector.z) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(this.z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;vector.y);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    result.y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(this.z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;vector.x) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(this.x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;vector.z);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    result.z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(this.x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;vector.y) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;(this.y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;vector.x);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;13&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Results vectors
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;14&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;side1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span&gt;Vector(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;15&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;side12 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span&gt;Vector(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;normal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span&gt;Vector(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;18&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Three vertices of a triangle
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;19&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;vertex1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span&gt;Vector(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;vertex2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span&gt;Vector(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;21&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;vertex3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span&gt;Vector(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;22&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;23&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Find vectors representing two sides of the triangle
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;vertex2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;subtractLG&lt;&#x2F;span&gt;&lt;span&gt;(vertex1, side1);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;25&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;vertex3.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;subtractLG&lt;&#x2F;span&gt;&lt;span&gt;(vertex1, side2);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;26&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;27&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Find the normal of the triangle, using the two sides
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;28&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;side1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;crossLG&lt;&#x2F;span&gt;&lt;span&gt;(side2, normal);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This example may look very similar to the earlier example. And if it was executed as-is, since the results vectors would
be created anew for every frame, there would be little or no difference between this and the earlier version in terms of
memory use. The key difference comes when these results vectors are created just once, and a reference is kept in order
to prevent them from being garbage collected. So now, instead of creating and discarding a new object for every method
call, multiple times per frame, we&#x27;re creating just a handful of objects upon initialization, and using them over and
over.&lt;&#x2F;p&gt;
&lt;p&gt;Implementing low-garbage versions of all of the matrix and vector methods had a fairly large impact for wireframe.js.
Compare the before and after graphs below.&lt;&#x2F;p&gt;
&lt;svg viewbox=&quot;0 0 835 120&quot;&gt;
    &lt;g transform=&quot;translate(0,50)&quot;&gt;
        &lt;path class=&quot;chartfill&quot; d=&quot;M0,-22L4.2,0L8.4,0L12.6,0L16.8,-6L21,-6L25.2,-6L29.400000000000002,18L33.6,18L37.8,10L42,10L46.2,10L50.4,4L54.6,4L58.800000000000004,-4.0000000000000036L63,-4.0000000000000036L67.2,-10L71.4,14L75.6,14L79.8,5.999999999999998L84,5.999999999999998L88.2,0L92.4,0L96.60000000000001,-8.000000000000004L100.8,16L105,16L109.2,16L113.4,10L117.60000000000001,10L121.8,10L126,2L130.2,2L134.4,-4.0000000000000036L138.6,-4.0000000000000036L142.8,-4.0000000000000036L147,-12L151.2,-12L155.4,-12L159.6,12L163.8,4L168,4L172.20000000000002,4L176.4,-2L180.6,-10L184.8,-10L189,14L193.20000000000002,7.999999999999998L197.4,7.999999999999998L201.6,7.999999999999998L205.79999999999998,0L210,-6L214.20000000000002,-6L218.4,-12L222.60000000000002,18L226.8,10L231.00000000000003,10L235.20000000000002,4L239.40000000000003,4L243.6,4L247.79999999999998,-4.0000000000000036L252,-10L256.2,-10L260.4,-12L264.6,14L268.8,5.999999999999998L273,5.999999999999998L277.2,5.999999999999998L281.40000000000003,5.999999999999998L285.6,0L289.8,0L294,-8.000000000000004L298.2,-8.000000000000004L302.4,-8.000000000000004L306.59999999999997,16L310.8,16L315,10L319.2,10L323.40000000000003,2L327.6,-4.0000000000000036L331.8,-4.0000000000000036L336,-12L340.20000000000005,-12L344.40000000000003,12L348.6,12L352.8,5.999999999999998L357,-2L361.2,-2L365.4,-8.000000000000004L369.6,-8.000000000000004L373.8,14L378,14L382.2,7.999999999999998L386.40000000000003,7.999999999999998L390.6,0L394.8,-6L399,-6L403.2,18L407.4,18L411.59999999999997,10L415.8,10L420,4L424.2,-4.0000000000000036L428.40000000000003,-10L432.6,-10L436.8,14L441,14L445.20000000000005,5.999999999999998L449.40000000000003,0L453.6,0L457.8,-8.000000000000004L462.00000000000006,-8.000000000000004L466.20000000000005,-8.000000000000004L470.40000000000003,16L474.6,16L478.80000000000007,10L483.00000000000006,10L487.2,2L491.4,2L495.59999999999997,-4.0000000000000036L499.79999999999995,-4.0000000000000036L504,-12L508.2,12L512.4,12L516.6,5.999999999999998L520.8,5.999999999999998L525,-2L529.2,-2L533.4,-8.000000000000004L537.6,-8.000000000000004L541.8000000000001,16L546,16L550.2,7.999999999999998L554.4,7.999999999999998L558.6,2L562.8000000000001,-6L567,-6L571.2,18L575.4000000000001,18L579.6,10L583.8000000000001,10L588,4L592.1999999999999,4L596.4,4L600.6,-4.0000000000000036L604.8,-4.0000000000000036L609,-4.0000000000000036L613.1999999999999,-10L617.4,-10L621.6,14L625.8,14L630,5.999999999999998L634.2,5.999999999999998L638.4,0L642.6,-8.000000000000004L646.8000000000001,-8.000000000000004L651,16L655.2,10L659.4,10L663.6,2L667.8000000000001,2L672,-4.0000000000000036L676.2,-12L680.4000000000001,-12L684.6,12L688.8000000000001,12L693,5.999999999999998L697.2,5.999999999999998L701.4,-2L705.6,-8.000000000000004L709.8,16L714,16L718.1999999999999,16L722.4,7.999999999999998L726.6,7.999999999999998L730.8,2L735,-6L739.2,-12L743.4,18L747.6,10L751.8000000000001,10L756,10L760.2,4L764.4,-4.0000000000000036L768.6,-4.0000000000000036L772.8000000000001,-4.0000000000000036L777,-10L781.2,-10L785.4000000000001,14L789.6,14L793.8000000000001,5.999999999999998L798,5.999999999999998L802.2,0L806.4,0L810.6,-8.000000000000004L814.8,-8.000000000000004L819,-12L823.1999999999999,16L827.4,10L831.6,10L835.8,2L835.8,25L0,25L0,-22&quot;&gt;&lt;&#x2F;path&gt;
        &lt;path class=&quot;chartline&quot; d=&quot;M0,-22L4.2,0L8.4,0L12.6,0L16.8,-6L21,-6L25.2,-6L29.400000000000002,18L33.6,18L37.8,10L42,10L46.2,10L50.4,4L54.6,4L58.800000000000004,-4.0000000000000036L63,-4.0000000000000036L67.2,-10L71.4,14L75.6,14L79.8,5.999999999999998L84,5.999999999999998L88.2,0L92.4,0L96.60000000000001,-8.000000000000004L100.8,16L105,16L109.2,16L113.4,10L117.60000000000001,10L121.8,10L126,2L130.2,2L134.4,-4.0000000000000036L138.6,-4.0000000000000036L142.8,-4.0000000000000036L147,-12L151.2,-12L155.4,-12L159.6,12L163.8,4L168,4L172.20000000000002,4L176.4,-2L180.6,-10L184.8,-10L189,14L193.20000000000002,7.999999999999998L197.4,7.999999999999998L201.6,7.999999999999998L205.79999999999998,0L210,-6L214.20000000000002,-6L218.4,-12L222.60000000000002,18L226.8,10L231.00000000000003,10L235.20000000000002,4L239.40000000000003,4L243.6,4L247.79999999999998,-4.0000000000000036L252,-10L256.2,-10L260.4,-12L264.6,14L268.8,5.999999999999998L273,5.999999999999998L277.2,5.999999999999998L281.40000000000003,5.999999999999998L285.6,0L289.8,0L294,-8.000000000000004L298.2,-8.000000000000004L302.4,-8.000000000000004L306.59999999999997,16L310.8,16L315,10L319.2,10L323.40000000000003,2L327.6,-4.0000000000000036L331.8,-4.0000000000000036L336,-12L340.20000000000005,-12L344.40000000000003,12L348.6,12L352.8,5.999999999999998L357,-2L361.2,-2L365.4,-8.000000000000004L369.6,-8.000000000000004L373.8,14L378,14L382.2,7.999999999999998L386.40000000000003,7.999999999999998L390.6,0L394.8,-6L399,-6L403.2,18L407.4,18L411.59999999999997,10L415.8,10L420,4L424.2,-4.0000000000000036L428.40000000000003,-10L432.6,-10L436.8,14L441,14L445.20000000000005,5.999999999999998L449.40000000000003,0L453.6,0L457.8,-8.000000000000004L462.00000000000006,-8.000000000000004L466.20000000000005,-8.000000000000004L470.40000000000003,16L474.6,16L478.80000000000007,10L483.00000000000006,10L487.2,2L491.4,2L495.59999999999997,-4.0000000000000036L499.79999999999995,-4.0000000000000036L504,-12L508.2,12L512.4,12L516.6,5.999999999999998L520.8,5.999999999999998L525,-2L529.2,-2L533.4,-8.000000000000004L537.6,-8.000000000000004L541.8000000000001,16L546,16L550.2,7.999999999999998L554.4,7.999999999999998L558.6,2L562.8000000000001,-6L567,-6L571.2,18L575.4000000000001,18L579.6,10L583.8000000000001,10L588,4L592.1999999999999,4L596.4,4L600.6,-4.0000000000000036L604.8,-4.0000000000000036L609,-4.0000000000000036L613.1999999999999,-10L617.4,-10L621.6,14L625.8,14L630,5.999999999999998L634.2,5.999999999999998L638.4,0L642.6,-8.000000000000004L646.8000000000001,-8.000000000000004L651,16L655.2,10L659.4,10L663.6,2L667.8000000000001,2L672,-4.0000000000000036L676.2,-12L680.4000000000001,-12L684.6,12L688.8000000000001,12L693,5.999999999999998L697.2,5.999999999999998L701.4,-2L705.6,-8.000000000000004L709.8,16L714,16L718.1999999999999,16L722.4,7.999999999999998L726.6,7.999999999999998L730.8,2L735,-6L739.2,-12L743.4,18L747.6,10L751.8000000000001,10L756,10L760.2,4L764.4,-4.0000000000000036L768.6,-4.0000000000000036L772.8000000000001,-4.0000000000000036L777,-10L781.2,-10L785.4000000000001,14L789.6,14L793.8000000000001,5.999999999999998L798,5.999999999999998L802.2,0L806.4,0L810.6,-8.000000000000004L814.8,-8.000000000000004L819,-12L823.1999999999999,16L827.4,10L831.6,10L835.8,2&quot;&gt;&lt;&#x2F;path&gt;
        &lt;line x1=&quot;0&quot; y1=&quot;25&quot; x2=&quot;835&quot; y2=&quot;25&quot; style=&quot;stroke: #8F8F8F;&quot;&#x2F;&gt;
        &lt;text x=&quot;2&quot; y=&quot;45&quot; font-family=&quot;Verdana&quot; font-size=&quot;15&quot; style=&quot;fill:#8F8F8F;&quot;&gt;5.7MB-9.7MB&lt;&#x2F;text&gt;
    &lt;&#x2F;g&gt;
&lt;&#x2F;svg&gt;
&lt;div class=&quot;illustration-label&quot;&gt;Memory usage for &#x27;high-garbage&#x27; math methods&lt;&#x2F;div&gt;
&lt;svg viewbox=&quot;0 0 835 120&quot;&gt;
    &lt;g transform=&quot;translate(0,50)&quot;&gt;
        &lt;path class=&quot;chartfill&quot; d=&quot;M0,-22L4.2,14L8.4,14L12.6,12L16.8,12L21,7.999999999999998L25.2,7.999999999999998L29.400000000000002,5.999999999999998L33.6,4L37.8,4L42,0L46.2,0L50.4,-2L54.6,-2L58.800000000000004,-6L63,-6L67.2,-8.000000000000004L71.4,-8.000000000000004L75.6,-12L79.8,-12L84,18L88.2,18L92.4,14L96.60000000000001,14L100.8,12L105,12L109.2,7.999999999999998L113.4,5.999999999999998L117.60000000000001,5.999999999999998L121.8,2L126,2L130.2,0L134.4,0L138.6,-2L142.8,-2L147,-6L151.2,-6L155.4,-8.000000000000004L159.6,-8.000000000000004L163.8,-12L168,-12L172.20000000000002,18L176.4,18L180.6,14L184.8,14L189,12L193.20000000000002,7.999999999999998L197.4,7.999999999999998L201.6,5.999999999999998L205.79999999999998,5.999999999999998L210,2L214.20000000000002,2L218.4,0L222.60000000000002,0L226.8,-4.0000000000000036L231.00000000000003,-4.0000000000000036L235.20000000000002,-6L239.40000000000003,-6L243.6,-8.000000000000004L247.79999999999998,-8.000000000000004L252,-8.000000000000004L256.2,-12L260.4,-12L264.6,16L268.8,16L273,14L277.2,12L281.40000000000003,12L285.6,7.999999999999998L289.8,7.999999999999998L294,5.999999999999998L298.2,5.999999999999998L302.4,2L306.59999999999997,2L310.8,0L315,0L319.2,-4.0000000000000036L323.40000000000003,-4.0000000000000036L327.6,-6L331.8,-6L336,-8.000000000000004L340.20000000000005,-8.000000000000004L344.40000000000003,-12L348.6,-12L352.8,16L357,16L361.2,14L365.4,14L369.6,10L373.8,10L378,7.999999999999998L382.2,7.999999999999998L386.40000000000003,5.999999999999998L390.6,5.999999999999998L394.8,2L399,2L403.2,0L407.4,0L411.59999999999997,-4.0000000000000036L415.8,-4.0000000000000036L420,-4.0000000000000036L424.2,-6L428.40000000000003,-6L432.6,-6L436.8,-10L441,-10L445.20000000000005,-12L449.40000000000003,-12L453.6,-14L457.8,16L462.00000000000006,14L466.20000000000005,14L470.40000000000003,14L474.6,10L478.80000000000007,10L483.00000000000006,7.999999999999998L487.2,7.999999999999998L491.4,7.999999999999998L495.59999999999997,4L499.79999999999995,4L504,2L508.2,0L512.4,0L516.6,-4.0000000000000036L520.8,-4.0000000000000036L525,-4.0000000000000036L529.2,-6L533.4,-10L537.6,-10L541.8000000000001,-12L546,-12L550.2,16L554.4,14L558.6,14L562.8000000000001,10L567,10L571.2,7.999999999999998L575.4000000000001,7.999999999999998L579.6,7.999999999999998L583.8000000000001,4L588,4L592.1999999999999,2L596.4,2L600.6,-2L604.8,-2L609,-4.0000000000000036L613.1999999999999,-4.0000000000000036L617.4,-6L621.6,-6L625.8,-10L630,-10L634.2,-12L638.4,-12L642.6,16L646.8000000000001,16L651,12L655.2,12L659.4,10L663.6,10L667.8000000000001,7.999999999999998L672,7.999999999999998L676.2,4L680.4000000000001,2L684.6,2L688.8000000000001,-2L693,-2L697.2,-2L701.4,-4.0000000000000036L705.6,-8.000000000000004L709.8,-8.000000000000004L714,-10L718.1999999999999,-10L722.4,-12L726.6,-12L730.8,16L735,16L739.2,12L743.4,12L747.6,12L751.8000000000001,10L756,7.999999999999998L760.2,7.999999999999998L764.4,4L768.6,4L772.8000000000001,2L777,2L781.2,2L785.4000000000001,-2L789.6,-4.0000000000000036L793.8000000000001,-4.0000000000000036L798,-8.000000000000004L802.2,-8.000000000000004L806.4,-8.000000000000004L810.6,-10L814.8,-10L819,-14L823.1999999999999,-14L827.4,16L831.6,16L835.8,12L835.8,25L0,25L0,-22&quot;&gt;&lt;&#x2F;path&gt;
        &lt;path class=&quot;chartline&quot; d=&quot;M0,-22L4.2,14L8.4,14L12.6,12L16.8,12L21,7.999999999999998L25.2,7.999999999999998L29.400000000000002,5.999999999999998L33.6,4L37.8,4L42,0L46.2,0L50.4,-2L54.6,-2L58.800000000000004,-6L63,-6L67.2,-8.000000000000004L71.4,-8.000000000000004L75.6,-12L79.8,-12L84,18L88.2,18L92.4,14L96.60000000000001,14L100.8,12L105,12L109.2,7.999999999999998L113.4,5.999999999999998L117.60000000000001,5.999999999999998L121.8,2L126,2L130.2,0L134.4,0L138.6,-2L142.8,-2L147,-6L151.2,-6L155.4,-8.000000000000004L159.6,-8.000000000000004L163.8,-12L168,-12L172.20000000000002,18L176.4,18L180.6,14L184.8,14L189,12L193.20000000000002,7.999999999999998L197.4,7.999999999999998L201.6,5.999999999999998L205.79999999999998,5.999999999999998L210,2L214.20000000000002,2L218.4,0L222.60000000000002,0L226.8,-4.0000000000000036L231.00000000000003,-4.0000000000000036L235.20000000000002,-6L239.40000000000003,-6L243.6,-8.000000000000004L247.79999999999998,-8.000000000000004L252,-8.000000000000004L256.2,-12L260.4,-12L264.6,16L268.8,16L273,14L277.2,12L281.40000000000003,12L285.6,7.999999999999998L289.8,7.999999999999998L294,5.999999999999998L298.2,5.999999999999998L302.4,2L306.59999999999997,2L310.8,0L315,0L319.2,-4.0000000000000036L323.40000000000003,-4.0000000000000036L327.6,-6L331.8,-6L336,-8.000000000000004L340.20000000000005,-8.000000000000004L344.40000000000003,-12L348.6,-12L352.8,16L357,16L361.2,14L365.4,14L369.6,10L373.8,10L378,7.999999999999998L382.2,7.999999999999998L386.40000000000003,5.999999999999998L390.6,5.999999999999998L394.8,2L399,2L403.2,0L407.4,0L411.59999999999997,-4.0000000000000036L415.8,-4.0000000000000036L420,-4.0000000000000036L424.2,-6L428.40000000000003,-6L432.6,-6L436.8,-10L441,-10L445.20000000000005,-12L449.40000000000003,-12L453.6,-14L457.8,16L462.00000000000006,14L466.20000000000005,14L470.40000000000003,14L474.6,10L478.80000000000007,10L483.00000000000006,7.999999999999998L487.2,7.999999999999998L491.4,7.999999999999998L495.59999999999997,4L499.79999999999995,4L504,2L508.2,0L512.4,0L516.6,-4.0000000000000036L520.8,-4.0000000000000036L525,-4.0000000000000036L529.2,-6L533.4,-10L537.6,-10L541.8000000000001,-12L546,-12L550.2,16L554.4,14L558.6,14L562.8000000000001,10L567,10L571.2,7.999999999999998L575.4000000000001,7.999999999999998L579.6,7.999999999999998L583.8000000000001,4L588,4L592.1999999999999,2L596.4,2L600.6,-2L604.8,-2L609,-4.0000000000000036L613.1999999999999,-4.0000000000000036L617.4,-6L621.6,-6L625.8,-10L630,-10L634.2,-12L638.4,-12L642.6,16L646.8000000000001,16L651,12L655.2,12L659.4,10L663.6,10L667.8000000000001,7.999999999999998L672,7.999999999999998L676.2,4L680.4000000000001,2L684.6,2L688.8000000000001,-2L693,-2L697.2,-2L701.4,-4.0000000000000036L705.6,-8.000000000000004L709.8,-8.000000000000004L714,-10L718.1999999999999,-10L722.4,-12L726.6,-12L730.8,16L735,16L739.2,12L743.4,12L747.6,12L751.8000000000001,10L756,7.999999999999998L760.2,7.999999999999998L764.4,4L768.6,4L772.8000000000001,2L777,2L781.2,2L785.4000000000001,-2L789.6,-4.0000000000000036L793.8000000000001,-4.0000000000000036L798,-8.000000000000004L802.2,-8.000000000000004L806.4,-8.000000000000004L810.6,-10L814.8,-10L819,-14L823.1999999999999,-14L827.4,16L831.6,16L835.8,12&quot;&gt;&lt;&#x2F;path&gt;
        &lt;line x1=&quot;0&quot; y1=&quot;25&quot; x2=&quot;835&quot; y2=&quot;25&quot; style=&quot;stroke: #8F8F8F;&quot;&#x2F;&gt;
        &lt;text x=&quot;2&quot; y=&quot;45&quot; font-family=&quot;Verdana&quot; font-size=&quot;15&quot; style=&quot;fill:#8F8F8F;&quot;&gt;9.9MB-13.9MB&lt;&#x2F;text&gt;
    &lt;&#x2F;g&gt;
&lt;&#x2F;svg&gt;
&lt;div class=&quot;illustration-label&quot;&gt;Memory usage for &#x27;low-garbage&#x27; math methods&lt;&#x2F;div&gt;
&lt;p&gt;While overall these memory graphs have a similar shape, the latter has a far more regular GC pattern. It grows steadily,
and then there&#x27;s a GC event, which produces the characteristic sawtooth pattern. The &#x27;high-garbage&#x27; version, on the
other hand, grows some, then has a GC event, grows, grows, GC, etc. Overall the shape is vaguely sawtooth-like, but
there are far more GC events that occur sporadically between the trough and the peak of the sawtooth, and the memory
graph appears much more erratic.&lt;&#x2F;p&gt;
&lt;p&gt;Depending on what your aims are, in order to fully make use of this sort of approach it may be necessary to implement
object pooling. What this means is that you have a &#x27;pool&#x27; of objects that you have instantiated. When you need a new
object, you pull one from the pool. When you no longer need that object, you return it to the pool. There is a bit more
overhead in this, so if you know ahead of time exactly how many objects you will need, and you are certain that you will
never need more than this, object pooling would likely not be worth the effort.&lt;&#x2F;p&gt;
&lt;p&gt;It should be noted, though that care must be taken when using this method, whether with an object pool or without, to
initialize the results object to ensure that old values from previous calculations are completely removed from your
results object. For example, the following matrix translation static method can cause problems if the results matrix
still carries values from previous calculations:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; If the result matrix still has values in 0-11 or 15 from
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; being used in previous calculations, this will cause problems.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;Matrix.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;translation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;xtrans&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;ytrans&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;ztrans&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    result[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;xtrans;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    result[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;13&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ytrans;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    result[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ztrans;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The way I have implemented the low-garbage methods in these examples also makes method chaining impossible, but chaining
can be achieved by simply explicitly returning the result. This does not have any negative repercussions in terms of
memory usage or performance.&lt;&#x2F;p&gt;
&lt;p&gt;Alright, so far, so good. Implementing the low garbage math methods—and refactoring the main 3D rendering function to
make use of these methods—had a very noticeable effect on the memory-use profile of the program. Garbage collection was
now much less frequent, and at more regular intervals. But garbage can also sneak in where you don&#x27;t expect it, and
there was still work to be done.&lt;&#x2F;p&gt;
&lt;p&gt;The two graphs above represent a ~2 second time slice. So in the &#x27;good&#x27; version, GC events are still occurring
approximately every 200ms. This could be better, and I was certain that there were still areas of the program that were
still making too much garbage. The most obvious place to look was this line, which occurs at the beginning of the
render function:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;back_buffer_img &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;back_buffer_ctx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;createImageData&lt;&#x2F;span&gt;&lt;span&gt;(width, height);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The back buffer is an &lt;code&gt;ImageData&lt;&#x2F;code&gt; array (which is a &lt;code&gt;Uint8ClampedArray&lt;&#x2F;code&gt;, which is a typed array) where pixel data is
written. This image data is then drawn to an offscreen buffer canvas, which is then used to draw to the main canvas.
While this may seem like a lot of extra, unnecessary steps, the main advantage of this is that it allows the 3D scene
to be initially drawn in one resolution, but displayed in a different resolution. So a scene can be upscaled in order
to use fewer resources, or it can be downscaled to provide a better looking image.&lt;&#x2F;p&gt;
&lt;p&gt;As &lt;code&gt;createImageData&lt;&#x2F;code&gt; creates a new &lt;code&gt;ImageData&lt;&#x2F;code&gt; array, in this early version of the program a new back buffer array was
being created for every frame. Naturally, this created a lot of unnecessary garbage. In my first attempt to tackle this
problem, I was running over the entire array, zeroing out all the values.&lt;&#x2F;p&gt;
&lt;p&gt;Backing up a little, an &lt;code&gt;ImageData&lt;&#x2F;code&gt; array is a one-dimensional array representing the RGBA values of all pixels in a 2D
canvas context, with each element representing either a red, green, blue, or alpha value of a pixel. So, for example, a
1x1 pixel &lt;code&gt;ImageData&lt;&#x2F;code&gt; array might look like this &lt;code&gt;[1, 7, 2, 9]&lt;&#x2F;code&gt;, where the RGBA values are 1, 7, 2, and 9 respectively.&lt;&#x2F;p&gt;
&lt;p&gt;So it should be clear that for any &lt;code&gt;ImageData&lt;&#x2F;code&gt; array, its length will be described by canvas width _ canvas height _ 4.
As it turned out, looping over the entire array was actually noticeably slower than just creating a new &lt;code&gt;ImageData&lt;&#x2F;code&gt;
array for every frame, even with all the extra garbage that brought with it. However, if you consider for a moment what
it is we&#x27;re trying to achieve (clearing the back buffer for the next frame), it may become clear that we can actually
get away with doing ¼ of the work. By setting the alpha value to zero, we can ignore the RGB values, just so long as we
make sure to set all RGBA values when we draw a new pixel to the array. With this change, each frame took less time to
draw (meaning fewer resources were used), and GC events became much less frequent. Here is what memory use looked like
after this change (the scale is the same as the previous two graphs):&lt;&#x2F;p&gt;
&lt;svg viewbox=&quot;0 0 835 120&quot;&gt;
    &lt;g transform=&quot;translate(0,50)&quot;&gt;
        &lt;path class=&quot;chartfill&quot; d=&quot;M0,5.999999999999998L4.2,5.999999999999998L8.4,5.999999999999998L12.6,5.999999999999998L16.8,5.999999999999998L21,5.999999999999998L25.2,4L29.400000000000002,4L33.6,4L37.8,4L42,4L46.2,4L50.4,2L54.6,2L58.800000000000004,2L63,2L67.2,2L71.4,2L75.6,0L79.8,0L84,0L88.2,0L92.4,0L96.60000000000001,0L100.8,-2L105,-2L109.2,-2L113.4,-2L117.60000000000001,-2L121.8,-2L126,-2L130.2,-4.0000000000000036L134.4,-4.0000000000000036L138.6,-4.0000000000000036L142.8,-4.0000000000000036L147,-4.0000000000000036L151.2,-6L155.4,-6L159.6,-6L163.8,-6L168,-6L172.20000000000002,-6L176.4,-6L180.6,-8.000000000000004L184.8,-8.000000000000004L189,-8.000000000000004L193.20000000000002,-8.000000000000004L197.4,-8.000000000000004L201.6,-8.000000000000004L205.79999999999998,-8.000000000000004L210,-10L214.20000000000002,-10L218.4,-10L222.60000000000002,-10L226.8,-10L231.00000000000003,-10L235.20000000000002,-10L239.40000000000003,-12L243.6,-12L247.79999999999998,-12L252,-12L256.2,-12L260.4,18L264.6,18L268.8,18L273,18L277.2,16L281.40000000000003,16L285.6,16L289.8,16L294,16L298.2,16L302.4,16L306.59999999999997,14L310.8,14L315,14L319.2,14L323.40000000000003,14L327.6,12L331.8,12L336,12L340.20000000000005,12L344.40000000000003,12L348.6,12L352.8,10L357,10L361.2,10L365.4,10L369.6,10L373.8,10L378,10L382.2,7.999999999999998L386.40000000000003,7.999999999999998L390.6,7.999999999999998L394.8,7.999999999999998L399,7.999999999999998L403.2,5.999999999999998L407.4,5.999999999999998L411.59999999999997,5.999999999999998L415.8,5.999999999999998L420,5.999999999999998L424.2,5.999999999999998L428.40000000000003,5.999999999999998L432.6,4L436.8,4L441,4L445.20000000000005,4L449.40000000000003,4L453.6,4L457.8,4L462.00000000000006,2L466.20000000000005,2L470.40000000000003,2L474.6,2L478.80000000000007,2L483.00000000000006,2L487.2,0L491.4,0L495.59999999999997,0L499.79999999999995,0L504,0L508.2,0L512.4,0L516.6,-2L520.8,-2L525,-2L529.2,-2L533.4,-2L537.6,-2L541.8000000000001,-4.0000000000000036L546,-4.0000000000000036L550.2,-4.0000000000000036L554.4,-4.0000000000000036L558.6,-4.0000000000000036L562.8000000000001,-4.0000000000000036L567,-4.0000000000000036L571.2,-6L575.4000000000001,-6L579.6,-6L583.8000000000001,-6L588,-6L592.1999999999999,-8.000000000000004L596.4,-8.000000000000004L600.6,-8.000000000000004L604.8,-8.000000000000004L609,-8.000000000000004L613.1999999999999,-8.000000000000004L617.4,-8.000000000000004L621.6,-10L625.8,-10L630,-10L634.2,-10L638.4,-10L642.6,-10L646.8000000000001,-12L651,-12L655.2,-12L659.4,18L663.6,18L667.8000000000001,18L672,18L676.2,16L680.4000000000001,16L684.6,16L688.8000000000001,16L693,16L697.2,16L701.4,14L705.6,14L709.8,14L714,14L718.1999999999999,14L722.4,14L726.6,14L730.8,14L735,12L739.2,12L743.4,12L747.6,12L751.8000000000001,12L756,12L760.2,12L764.4,10L768.6,10L772.8000000000001,10L777,10L781.2,10L785.4000000000001,10L789.6,10L793.8000000000001,7.999999999999998L798,7.999999999999998L802.2,7.999999999999998L806.4,7.999999999999998L810.6,7.999999999999998L814.8,5.999999999999998L819,5.999999999999998L823.1999999999999,5.999999999999998L827.4,5.999999999999998L831.6,5.999999999999998L835.8,5.999999999999998L835.8,25L0,25L0,5.999999999999998&quot;&gt;&lt;&#x2F;path&gt;
        &lt;path class=&quot;chartline&quot; d=&quot;M0,5.999999999999998L4.2,5.999999999999998L8.4,5.999999999999998L12.6,5.999999999999998L16.8,5.999999999999998L21,5.999999999999998L25.2,4L29.400000000000002,4L33.6,4L37.8,4L42,4L46.2,4L50.4,2L54.6,2L58.800000000000004,2L63,2L67.2,2L71.4,2L75.6,0L79.8,0L84,0L88.2,0L92.4,0L96.60000000000001,0L100.8,-2L105,-2L109.2,-2L113.4,-2L117.60000000000001,-2L121.8,-2L126,-2L130.2,-4.0000000000000036L134.4,-4.0000000000000036L138.6,-4.0000000000000036L142.8,-4.0000000000000036L147,-4.0000000000000036L151.2,-6L155.4,-6L159.6,-6L163.8,-6L168,-6L172.20000000000002,-6L176.4,-6L180.6,-8.000000000000004L184.8,-8.000000000000004L189,-8.000000000000004L193.20000000000002,-8.000000000000004L197.4,-8.000000000000004L201.6,-8.000000000000004L205.79999999999998,-8.000000000000004L210,-10L214.20000000000002,-10L218.4,-10L222.60000000000002,-10L226.8,-10L231.00000000000003,-10L235.20000000000002,-10L239.40000000000003,-12L243.6,-12L247.79999999999998,-12L252,-12L256.2,-12L260.4,18L264.6,18L268.8,18L273,18L277.2,16L281.40000000000003,16L285.6,16L289.8,16L294,16L298.2,16L302.4,16L306.59999999999997,14L310.8,14L315,14L319.2,14L323.40000000000003,14L327.6,12L331.8,12L336,12L340.20000000000005,12L344.40000000000003,12L348.6,12L352.8,10L357,10L361.2,10L365.4,10L369.6,10L373.8,10L378,10L382.2,7.999999999999998L386.40000000000003,7.999999999999998L390.6,7.999999999999998L394.8,7.999999999999998L399,7.999999999999998L403.2,5.999999999999998L407.4,5.999999999999998L411.59999999999997,5.999999999999998L415.8,5.999999999999998L420,5.999999999999998L424.2,5.999999999999998L428.40000000000003,5.999999999999998L432.6,4L436.8,4L441,4L445.20000000000005,4L449.40000000000003,4L453.6,4L457.8,4L462.00000000000006,2L466.20000000000005,2L470.40000000000003,2L474.6,2L478.80000000000007,2L483.00000000000006,2L487.2,0L491.4,0L495.59999999999997,0L499.79999999999995,0L504,0L508.2,0L512.4,0L516.6,-2L520.8,-2L525,-2L529.2,-2L533.4,-2L537.6,-2L541.8000000000001,-4.0000000000000036L546,-4.0000000000000036L550.2,-4.0000000000000036L554.4,-4.0000000000000036L558.6,-4.0000000000000036L562.8000000000001,-4.0000000000000036L567,-4.0000000000000036L571.2,-6L575.4000000000001,-6L579.6,-6L583.8000000000001,-6L588,-6L592.1999999999999,-8.000000000000004L596.4,-8.000000000000004L600.6,-8.000000000000004L604.8,-8.000000000000004L609,-8.000000000000004L613.1999999999999,-8.000000000000004L617.4,-8.000000000000004L621.6,-10L625.8,-10L630,-10L634.2,-10L638.4,-10L642.6,-10L646.8000000000001,-12L651,-12L655.2,-12L659.4,18L663.6,18L667.8000000000001,18L672,18L676.2,16L680.4000000000001,16L684.6,16L688.8000000000001,16L693,16L697.2,16L701.4,14L705.6,14L709.8,14L714,14L718.1999999999999,14L722.4,14L726.6,14L730.8,14L735,12L739.2,12L743.4,12L747.6,12L751.8000000000001,12L756,12L760.2,12L764.4,10L768.6,10L772.8000000000001,10L777,10L781.2,10L785.4000000000001,10L789.6,10L793.8000000000001,7.999999999999998L798,7.999999999999998L802.2,7.999999999999998L806.4,7.999999999999998L810.6,7.999999999999998L814.8,5.999999999999998L819,5.999999999999998L823.1999999999999,5.999999999999998L827.4,5.999999999999998L831.6,5.999999999999998L835.8,5.999999999999998&quot;&gt;&lt;&#x2F;path&gt;
        &lt;line x1=&quot;0&quot; y1=&quot;25&quot; x2=&quot;835&quot; y2=&quot;25&quot; style=&quot;stroke: #8F8F8F;&quot;&#x2F;&gt;
        &lt;text x=&quot;2&quot; y=&quot;45&quot; font-family=&quot;Verdana&quot; font-size=&quot;15&quot; style=&quot;fill:#8F8F8F;&quot;&gt;4.6MB-6.6MB&lt;&#x2F;text&gt;
    &lt;&#x2F;g&gt;
&lt;&#x2F;svg&gt;
&lt;div class=&quot;illustration-label&quot;&gt;Memory usage using back buffer zeroing&lt;&#x2F;div&gt;
&lt;p&gt;GC events are now happening about once a second. Which can certainly still be improved upon, but it&#x27;s miles ahead of
where it was to begin with.&lt;&#x2F;p&gt;
&lt;p&gt;As a side note: it occurs to me that in order to clear the back buffer, it would be possible to do potentially much less
work than mentioned above. If we kept track of which pixels had been drawn in the previous frame, we could then clear
only those pixels which needed clearing. But I suspect that the increased overhead and complexity of such an approach
would ultimately not be worthwhile. I will leave it as an exercise to the reader to determine the feasibility of this
approach.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Sorting with CSS</title>
        <published>2014-08-22T13:52:00+00:00</published>
        <updated>2014-08-22T13:52:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://ebenpackwood.com/posts/css-sort.html/" type="text/html"/>
        <id>https://ebenpackwood.com/posts/css-sort.html/</id>
        
        <content type="html">&lt;p&gt;Prompted by the following question asked on reddit.com&#x2F;r&#x2F;webdev:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hello, is it possible to sort something by popularity using only CSS and HTML? Or do i need to use something else
like JS etc.?&lt;&#x2F;p&gt;
&lt;p&gt;- &#x2F;u&#x2F;justanewboy&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I have devised the following solution:&lt;&#x2F;p&gt;
&lt;!--more--&gt;
&lt;pre data-linenos data-lang=&quot;html&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;&amp;lt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;DOCTYPE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;html &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;lang&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;en&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;meta &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;charset&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Document&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;.container &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;position&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;relative&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span&gt;;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;.sorted &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;position&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;absolute&lt;&#x2F;span&gt;&lt;span&gt;;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;.sorted&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;data-sort&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;1&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]  {&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;.sorted&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;data-sort&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;2&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]  {&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span&gt;;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;.sorted&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;data-sort&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;3&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]  {&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;40&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span&gt;;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;.sorted&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;data-sort&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;4&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]  {&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span&gt;;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;13&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;.sorted&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;data-sort&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;5&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]  {&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;80&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span&gt;;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;14&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;.sorted&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;data-sort&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;6&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]  {&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span&gt;;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;15&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;.sorted&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;data-sort&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;7&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]  {&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;120&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span&gt;;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;.sorted&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;data-sort&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;8&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]  {&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;140&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span&gt;;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;.sorted&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;data-sort&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;9&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]  {&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;160&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span&gt;;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;18&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;.sorted&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;data-sort&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;10&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] {&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;180&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span&gt;;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;19&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;21&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;22&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;container&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;23&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;sorted&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;data-sort&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;2&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;2&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;sorted&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;data-sort&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;3&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;3&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;25&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;sorted&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;data-sort&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;1&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;26&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;sorted&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;data-sort&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;6&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;6&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;27&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;sorted&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;data-sort&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;4&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;4&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;28&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;sorted&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;data-sort&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;10&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;10&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;29&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;sorted&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;data-sort&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;9&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;9&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;30&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;sorted&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;data-sort&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;5&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;5&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;31&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;sorted&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;data-sort&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;8&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;8&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;32&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;sorted&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;data-sort&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;7&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;7&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;33&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;34&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;35&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here&#x27;s an example of it in action.&lt;&#x2F;p&gt;
&lt;div class=&quot;container&quot; style=&quot;position: relative; height:210px; width:100%;&quot;&gt;
    &lt;style scoped&gt;
        .sorted {height: 20px; position: absolute;}
        .sorted[data-sort=&#x27;1&#x27;]  {top: 0;}
        .sorted[data-sort=&#x27;2&#x27;]  {top: 20px;}
        .sorted[data-sort=&#x27;3&#x27;]  {top: 40px;}
        .sorted[data-sort=&#x27;4&#x27;]  {top: 60px;}
        .sorted[data-sort=&#x27;5&#x27;]  {top: 80px;}
        .sorted[data-sort=&#x27;6&#x27;]  {top: 100px;}
        .sorted[data-sort=&#x27;7&#x27;]  {top: 120px;}
        .sorted[data-sort=&#x27;8&#x27;]  {top: 140px;}
        .sorted[data-sort=&#x27;9&#x27;]  {top: 160px;}
        .sorted[data-sort=&#x27;10&#x27;] {top: 180px;}
    &lt;&#x2F;style&gt;
    &lt;div class=&quot;sorted&quot; data-sort=&quot;2&quot;&gt;2&lt;&#x2F;div&gt;
    &lt;div class=&quot;sorted&quot; data-sort=&quot;3&quot;&gt;3&lt;&#x2F;div&gt;
    &lt;div class=&quot;sorted&quot; data-sort=&quot;1&quot;&gt;1&lt;&#x2F;div&gt;
    &lt;div class=&quot;sorted&quot; data-sort=&quot;6&quot;&gt;6&lt;&#x2F;div&gt;
    &lt;div class=&quot;sorted&quot; data-sort=&quot;4&quot;&gt;4&lt;&#x2F;div&gt;
    &lt;div class=&quot;sorted&quot; data-sort=&quot;10&quot;&gt;10&lt;&#x2F;div&gt;
    &lt;div class=&quot;sorted&quot; data-sort=&quot;9&quot;&gt;9&lt;&#x2F;div&gt;
    &lt;div class=&quot;sorted&quot; data-sort=&quot;5&quot;&gt;5&lt;&#x2F;div&gt;
    &lt;div class=&quot;sorted&quot; data-sort=&quot;8&quot;&gt;8&lt;&#x2F;div&gt;
    &lt;div class=&quot;sorted&quot; data-sort=&quot;7&quot;&gt;7&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Have a look at the HTML and you&#x27;ll see that these items are not represented in the markup in the order that you&#x27;re
seeing them on the page (assuming you&#x27;re using a modern browser, and you don&#x27;t have any sort of user stylesheet
overriding these rules). Or better yet, try to select the text and see what horrors CSS hath wrought.&lt;&#x2F;p&gt;
&lt;p&gt;Of course it should go without saying that you should almost certainly never, ever do such a thing. But it&#x27;s still
interesting to see what CSS is capable of these days. To put it in bold letters: &lt;strong&gt;CSS sort is nowhere close to
cross-browser compatible, and is almost certainly inappropriate for all real-world situations&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;That said, I&#x27;m not sure if this could be generalized a bit more (i.e. to obviate the repetition of
&lt;code&gt;.sorted[data-sort=&#x27;x&#x27;] {top:(20*x)px;}&lt;&#x2F;code&gt;), but I&#x27;ll be sure to edit this post with any new results I discover.
I&#x27;m also curious about the time complexity of such a sorting algorithm. Intuition tells me it&#x27;s likely to be something
like O(n*log(selector)&lt;sup&gt;property&lt;&#x2F;sup&gt;). Don&#x27;t quote me on that, though.&lt;&#x2F;p&gt;
&lt;p&gt;And finally, I apologize if this is old news. I couldn&#x27;t find any references to anything similar to this, but I would
not be surprised if this isn&#x27;t a new discovery. If you know of prior art, let me know by submitting an issue on
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ebenpack&#x2F;ebenpack.github.io&#x2F;issues&quot;&gt;github&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Too Much Recursion!</title>
        <published>2014-07-30T21:00:00+00:00</published>
        <updated>2014-07-30T21:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://ebenpackwood.com/posts/too-much-recursion.html/" type="text/html"/>
        <id>https://ebenpackwood.com/posts/too-much-recursion.html/</id>
        
        <content type="html">&lt;p&gt;I was reading &#x27;Data Structures and Algorithms in JavaScript&#x27; by Michael McMillan the other day. While the book as a
whole is absolutely riddled with errors, this passage struck me as being particularly egregious.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is customary, though not necessary, to implement Mergesort as a recursive algorithm. However, &lt;strong&gt;it is not possible
to do so in JavaScript, as the recursion goes too deep for the language to handle&lt;&#x2F;strong&gt;. [emphasis mine]&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;!--more--&gt;
&lt;p&gt;It is not possible to implement recursive mergesort in JavaScript! Because the recursion goes too deep! What utter
nonsense.&lt;&#x2F;p&gt;
&lt;p&gt;To see why this is such a patently absurd claim, we must first establish a few facts. First, what is the stack depth for
JavaScript? This isn&#x27;t something that is defined by the specification, so it&#x27;s going to be implementation dependent.
User josh3736 reported the stack depths of several browsers in his StackOverflow answer
&lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;7826992&#x2F;browser-javascript-stack-size-limit#7828803&quot;&gt;here&lt;&#x2F;a&gt;. A quick check of the
browsers easily available to hand suggests his assessment to be more or less in the right neighborhood. At worst, we
have a stack depth of ~1,000 (insert IE6 joke here), and at best it could be as high as ~65,000. The mean seems to be
somewhere around ~20,000-30,000.&lt;&#x2F;p&gt;
&lt;p&gt;The next fact we need to establish is how large can a JavaScript array be? This is a lot more straightforward than the
stack depth. The ECMA standard clearly defines the maximum length of an array to be 2&lt;sup&gt;32&lt;&#x2F;sup&gt;-1, or 4,294,967,295.
Which is just a hair north of 4 billion. That&#x27;s a very large array.&lt;&#x2F;p&gt;
&lt;p&gt;So, now that we&#x27;ve sorted out our facts, why is McMillan&#x27;s claim so absurd? To understand that, we need to take a closer
look at mergesort. Mergesort is a textbook divide-and-conquer algorithm. It works by splitting an array in half, then
calling mergesort recursively on each half until it reaches the base case. Then it merges each half back together such
that the result is sorted. For any given array of sufficient size, mergesort will be called twice, once on the lower
half, and once on the upper half. For each of those halves, mergesort will then potentially be called twice again, and
so on.&lt;&#x2F;p&gt;
&lt;p&gt;It should be evident that the number of times an array can be divided in this fashion will be log&lt;sub&gt;2&lt;&#x2F;sub&gt;(n). Not
coincidentally, this is the maximum recursive depth mergesort will reach. Put another way, mergesort will reach a
recursive depth of n when called on an array of length 2&lt;sup&gt;n&lt;&#x2F;sup&gt;. It follows from this that, given our maximum array
length, the maximum recursive depth that mergesort can possibly reach is 32 calls deep (maybe 33 if you count the
original call). This is nowhere close to reaching even the shallowest possible stack depth.&lt;&#x2F;p&gt;
&lt;p&gt;I quickly knocked up a recursive mergesort implementation (which I am including below) and set it to work sorting ever
larger arrays. My implementation (which I&#x27;m sure leaves much room for improvement) crapped out after trying to sort an
array of 2&lt;sup&gt;25&lt;&#x2F;sup&gt; items. Not because of what Firefox rather endearingly refers to as &amp;quot;too much recursion&amp;quot;, but
rather because it takes a heck of a lot of work to sort an array with tens of millions of items. Heck, forget sorting,
Chrome wouldn&#x27;t even let me push more than 2&lt;sup&gt;26&lt;&#x2F;sup&gt; items into an array. So, while it&#x27;s true that mergesort in
JavaScript might have some trouble with arrays of 2&lt;sup&gt;25&lt;&#x2F;sup&gt; items, this has nought to do with the depth of
recursion or the call stack. I&#x27;ll repeat that: any problems mergesort might have with very large arrays are wholly
unrelated to the depth of recursion or the call stack, and any claims otherwise suggest a fundamental misunderstanding
of either how the algorithm works, the basic fundamentals of JavaScript, or both.&lt;&#x2F;p&gt;
&lt;p&gt;Just as a thought experiment, though, how large would an array actually need to be to reach or exceed the stack depth
of, say, IE6? If you recall, IE6 has a stack depth of ~1,000. Let&#x27;s just call it 1,000 even. As we demonstrated, in
order to reach this recursive depth with mergesort, the array would have to have a length of 2&lt;sup&gt;1,000&lt;&#x2F;sup&gt;. In
base-10 this is ~10&lt;sup&gt;301&lt;&#x2F;sup&gt;. This translates to a one followed by 301 other numbers. It looks exactly like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code style=&quot;display:block;white-space: pre-wrap;line-break: anywhere;&quot;&gt;10715086071862673209484250490600018105614048117055336074437503883703510511249361224931983788156958581275946729175531468251871452856923140435984577574698574803934567774824230985421074605062371141877954182153046474983581941267398767559165543946077062914571196477686542167660429831652624386837205668069376
&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s a pretty big number. To give an idea of the scale of this number, it&#x27;s greater than the number of atoms in the
observable universe, which, in case you were wondering, there are approx. 10&lt;sup&gt;80&lt;&#x2F;sup&gt; of, give or take a few orders
of magnitude. So to be a bit technical for a moment, it&#x27;s actually much, much, much greater than the number of atoms in
the universe. In fact, any description I could attempt to give w&#x2F;r&#x2F;t just how much greater than the number of atoms in
the universe this number really is, would just be such a colossal understatement that it would only be an affront to
large numbers, and indeed to the very concept of largeness in general. Just believe me when I say that it&#x27;s wowie big.&lt;&#x2F;p&gt;
&lt;p&gt;The point is, there&#x27;s a good chance you&#x27;re not going to be reaching the maximum call stack depth with mergesort, even
if you really, really believe your array is well above average size. I would actually go so far as to say it is
completely impossible to exceed the stack depth with mergesort in JavaScript, assuming you&#x27;re sorting a standard
JavaScript array and you&#x27;re using a well implemented mergesort function. So there&#x27;s a good chance that anyone who
claims that&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is not possible to [implement Mergesort as a recursive algorithm] in JavaScript, as the recursion goes too deep for
the language to handle.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;might not know what they&#x27;re talking about. Like, at all.&lt;&#x2F;p&gt;
&lt;p&gt;While this certainly is one of the more flagrant errors in the book, it is just one of many. If you&#x27;re on the fence
about getting this book, I would recommend you give it a pass.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, here&#x27;s some code:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; The number of stack traces that will be logged in the console.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; We call console.log() when we reach the base case in our
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; mergesort function, which will be the maximum recursive depth.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; We&amp;#39;re only going to call this the first few times, as
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; it can really bog things down otherwise.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;stacktraces &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; The array we will be sorting.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;big_array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[];
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Build our array with numbers going in descending order.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; The array size, max, can be larger, but things slow down
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;13&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; and start to get wonky at about 2^25.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;14&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;max &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;Math&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;pow&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;15&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;max; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    big_array.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(max &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;i);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;18&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;19&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;big_array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;mergesort&lt;&#x2F;span&gt;&lt;span&gt;(big_array);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;21&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Standard merge
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;22&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;merge&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;23&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[];
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;alen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;a.length;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;25&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;blen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;b.length;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;26&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(alen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span&gt;blen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;27&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(alen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span&gt;blen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;28&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(a[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;b[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;29&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;shift&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;30&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                alen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;31&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;32&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(b[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span&gt;a[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;33&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;shift&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;34&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                blen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;35&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;36&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;37&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(alen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;38&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;shift&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;39&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            alen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;40&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;41&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(blen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;42&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;shift&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;43&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            blen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;44&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;45&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;46&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;result;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;47&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;48&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;49&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Standard recursive mergesort
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;50&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;mergesort&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;lst&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;51&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;lst.length;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;52&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;53&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(stacktraces &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;54&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; This will print a call stack to the console the
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;55&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; first ten times our mergesort reaches the base case.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;56&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; It should be clear that the maximum recursive depth
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;57&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; of our mergesort function is n+1, where our array
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;58&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; has on the order of 2^n items.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;59&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;trace&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;60&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            stacktraces&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;61&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;62&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;lst;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;63&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;64&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;q &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;Math&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;floor&lt;&#x2F;span&gt;&lt;span&gt;(length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;65&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;left &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;mergesort&lt;&#x2F;span&gt;&lt;span&gt;(lst.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;slice&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,q));
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;66&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;right &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;mergesort&lt;&#x2F;span&gt;&lt;span&gt;(lst.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;slice&lt;&#x2F;span&gt;&lt;span&gt;(q));
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;67&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;merge&lt;&#x2F;span&gt;&lt;span&gt;(left, right);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;68&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Addendum: I was curious about the relative performance of the iterative and recursive mergesort implementations.
As you can see, the iterative approach is much faster, and I believe it uses quite a bit less memory as well.&lt;&#x2F;p&gt;
&lt;div id=&quot;graph&quot;&gt;
&lt;style scoped&gt;
    path {
        stroke-width: 3;
        fill: none;
    }
&lt;pre style=&quot;background-color:#272822;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;.iter{
&lt;&#x2F;span&gt;&lt;span&gt;    stroke: steelblue;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;.recurse{
&lt;&#x2F;span&gt;&lt;span&gt;    stroke: rgb(223, 94, 98);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;.axis {
&lt;&#x2F;span&gt;&lt;span&gt;  shape-rendering: crispEdges;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;.x.axis line {
&lt;&#x2F;span&gt;&lt;span&gt;  stroke: lightgrey;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;.x.axis .minor {
&lt;&#x2F;span&gt;&lt;span&gt;  stroke-opacity: .5;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;.x.axis path {
&lt;&#x2F;span&gt;&lt;span&gt;  display: none;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;.y.axis line, .y.axis path {
&lt;&#x2F;span&gt;&lt;span&gt;  fill: none;
&lt;&#x2F;span&gt;&lt;span&gt;  stroke: #000;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;style&gt;
&lt;svg viewBox=&quot;0 0 1000 400&quot;&gt;
    &lt;g transform=&quot;translate(80,80)&quot;&gt;
        &lt;g class=&quot;x axis&quot; transform=&quot;translate(0,240)&quot;&gt;
            &lt;g class=&quot;tick&quot; transform=&quot;translate(0,0)&quot;&gt;
                &lt;line y2=&quot;-240&quot; x2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text y=&quot;10&quot; x=&quot;0&quot; dy=&quot;.71em&quot; style=&quot;text-anchor: middle;&quot;&gt;2⁹&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;g class=&quot;tick&quot; transform=&quot;translate(120,0)&quot;&gt;
                &lt;line y2=&quot;-240&quot; x2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text y=&quot;10&quot; x=&quot;0&quot; dy=&quot;.71em&quot; style=&quot;text-anchor: middle;&quot;&gt;2¹⁰&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;g class=&quot;tick&quot; transform=&quot;translate(240,0)&quot;&gt;
                &lt;line y2=&quot;-240&quot; x2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text y=&quot;10&quot; x=&quot;0&quot; dy=&quot;.71em&quot; style=&quot;text-anchor: middle;&quot;&gt;2¹¹&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;g class=&quot;tick&quot; transform=&quot;translate(360,0)&quot;&gt;
                &lt;line y2=&quot;-240&quot; x2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text y=&quot;10&quot; x=&quot;0&quot; dy=&quot;.71em&quot; style=&quot;text-anchor: middle;&quot;&gt;2¹²&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;g class=&quot;tick&quot; transform=&quot;translate(480,0)&quot;&gt;
                &lt;line y2=&quot;-240&quot; x2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text y=&quot;10&quot; x=&quot;0&quot; dy=&quot;.71em&quot; style=&quot;text-anchor: middle;&quot;&gt;2¹³&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;g class=&quot;tick&quot; transform=&quot;translate(599.9999999999999,0)&quot;&gt;
                &lt;line y2=&quot;-240&quot; x2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text y=&quot;10&quot; x=&quot;0&quot; dy=&quot;.71em&quot; style=&quot;text-anchor: middle;&quot;&gt;2¹⁴&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;g class=&quot;tick&quot; transform=&quot;translate(720,0)&quot;&gt;
                &lt;line y2=&quot;-240&quot; x2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text y=&quot;10&quot; x=&quot;0&quot; dy=&quot;.71em&quot; style=&quot;text-anchor: middle;&quot;&gt;2¹⁵&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;g class=&quot;tick&quot; transform=&quot;translate(840,0)&quot;&gt;
                &lt;line y2=&quot;-240&quot; x2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text y=&quot;10&quot; x=&quot;0&quot; dy=&quot;.71em&quot; style=&quot;text-anchor: middle;&quot;&gt;2¹⁶&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;path class=&quot;domain&quot; d=&quot;M0,-240V0H840V-240&quot;&gt;&lt;&#x2F;path&gt;
        &lt;&#x2F;g&gt;
        &lt;text class=&quot;y label&quot; text-anchor=&quot;end&quot; y=&quot;6&quot; dy=&quot;.75em&quot; transform=&quot;rotate(-90)&quot;&gt;execution time (milliseconds)&lt;&#x2F;text&gt;
        &lt;text class=&quot;x label&quot; text-anchor=&quot;end&quot; x=&quot;200&quot; y=&quot;280&quot; dx=&quot;.75em&quot;&gt;array length&lt;&#x2F;text&gt;
        &lt;rect x=&quot;140&quot; y=&quot;55&quot; width=&quot;10&quot; height=&quot;10&quot; style=&quot;fill: steelblue;&quot;&gt;&lt;&#x2F;rect&gt;
        &lt;rect x=&quot;140&quot; y=&quot;25&quot; width=&quot;10&quot; height=&quot;10&quot; style=&quot;fill: rgb(223, 94, 98);&quot;&gt;&lt;&#x2F;rect&gt;
        &lt;text text-anchor=&quot;start&quot; x=&quot;160&quot; y=&quot;65&quot;&gt;Iterative&lt;&#x2F;text&gt;
        &lt;text text-anchor=&quot;start&quot; x=&quot;160&quot; y=&quot;35&quot;&gt;Recursive&lt;&#x2F;text&gt;
        &lt;g class=&quot;y axis&quot; transform=&quot;translate(-25,0)&quot;&gt;
            &lt;g class=&quot;tick&quot; transform=&quot;translate(0,240)&quot;&gt;
                &lt;line x2=&quot;-6&quot; y2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text x=&quot;-9&quot; y=&quot;0&quot; dy=&quot;.32em&quot; style=&quot;text-anchor: end;&quot;&gt;0&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;g class=&quot;tick&quot; transform=&quot;translate(0,188.4978540772532)&quot;&gt;
                &lt;line x2=&quot;-6&quot; y2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text x=&quot;-9&quot; y=&quot;0&quot; dy=&quot;.32em&quot; style=&quot;text-anchor: end;&quot;&gt;100&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;g class=&quot;tick&quot; transform=&quot;translate(0,136.99570815450642)&quot;&gt;
                &lt;line x2=&quot;-6&quot; y2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text x=&quot;-9&quot; y=&quot;0&quot; dy=&quot;.32em&quot; style=&quot;text-anchor: end;&quot;&gt;200&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;g class=&quot;tick&quot; transform=&quot;translate(0,85.49356223175965)&quot;&gt;
                &lt;line x2=&quot;-6&quot; y2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text x=&quot;-9&quot; y=&quot;0&quot; dy=&quot;.32em&quot; style=&quot;text-anchor: end;&quot;&gt;300&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;g class=&quot;tick&quot; transform=&quot;translate(0,33.99141630901286)&quot;&gt;
                &lt;line x2=&quot;-6&quot; y2=&quot;0&quot;&gt;&lt;&#x2F;line&gt;
                &lt;text x=&quot;-9&quot; y=&quot;0&quot; dy=&quot;.32em&quot; style=&quot;text-anchor: end;&quot;&gt;400&lt;&#x2F;text&gt;
            &lt;&#x2F;g&gt;
            &lt;path class=&quot;domain&quot; d=&quot;M-6,0H0V240H-6&quot;&gt;&lt;&#x2F;path&gt;
        &lt;&#x2F;g&gt;
        &lt;path class=&quot;iter&quot; d=&quot;M0,240L0,240L0,240L0,240L0,240L0,240L0,240L0,240L0,240L0,239.48497854077254L120,238.96995708154506L240,236.90987124463518L360,233.8197424892704L480,228.6695278969957L599.9999999999999,215.27896995708156L720,195.1931330472103L840,146.78111587982832&quot;&gt;&lt;&#x2F;path&gt;
        &lt;path class=&quot;recurse&quot; d=&quot;M0,240L0,240L0,240L0,240L0,240L0,239.48497854077254L0,240L0,240L0,239.48497854077254L0,238.4549356223176L120,237.42489270386267L240,233.3047210300429L360,225.57939914163092L480,214.24892703862662L599.9999999999999,185.40772532188842L720,121.54506437768241L840,0&quot;&gt;&lt;&#x2F;path&gt;
    &lt;&#x2F;g&gt;
&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>LM3000</title>
        <published>2014-02-25T15:15:00+00:00</published>
        <updated>2014-02-25T15:15:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://ebenpackwood.com/pages/projects/lm3000/" type="text/html"/>
        <id>https://ebenpackwood.com/pages/projects/lm3000/</id>
        
        <content type="html"></content>
        
    </entry>
    <entry xml:lang="en">
        <title>Pygular</title>
        <published>2014-02-22T15:15:00+00:00</published>
        <updated>2014-02-22T15:15:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://ebenpackwood.com/pages/projects/pygular/" type="text/html"/>
        <id>https://ebenpackwood.com/pages/projects/pygular/</id>
        
        <content type="html"></content>
        
    </entry>
    <entry xml:lang="en">
        <title>Computational Fluid Dynamics in Under 1K: How I Made My JS1K Entry</title>
        <published>2014-02-17T12:49:00+00:00</published>
        <updated>2014-02-17T12:49:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://ebenpackwood.com/posts/wavybits.html/" type="text/html"/>
        <id>https://ebenpackwood.com/posts/wavybits.html/</id>
        
        <content type="html">&lt;p&gt;&lt;em&gt;Being an attempt to write a computational fluid dynamics simulation using no more than two raised to the power ten bytes.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;First, before I begin, N.B: apparently the extreme brevity required by this project has put me in rather a garrulous
mood, so I apologize for the length of this post-mortem. If you&#x27;re interested in maybe learning a few byte shaving
tricks for your own js1k, though, read on. Also, verbose variable names will be used for the sake of clarity, though
keep in mind that all variables here have a single letter identifier in the final program.&lt;&#x2F;p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;what-it-is&quot;&gt;What it is&lt;&#x2F;h2&gt;
&lt;p&gt;This project, written for the &lt;a href=&quot;http:&#x2F;&#x2F;js1k.com&#x2F;2014-dragons&#x2F;&quot;&gt;JS1K competition&lt;&#x2F;a&gt;
(&lt;a href=&quot;&#x2F;pages&#x2F;projects&#x2F;js1k.html&quot;&gt;demo here&lt;&#x2F;a&gt;), is essentially a complete rewrite of an
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ebenpack&#x2F;lattice-boltzmann.js&quot;&gt;earlier, much more feature rich project&lt;&#x2F;a&gt;. You can
have a look at the &lt;a href=&quot;&#x2F;pages&#x2F;projects&#x2F;lattice-boltzmann.html&quot;&gt;demo&lt;&#x2F;a&gt;, which is probably more interesting
than this 1K version, but which is an order of magnitude larger in the bytes department. If you&#x27;re not familiar with
the lattice Boltzmann method, there&#x27;s a fairly nice introduction
&lt;a href=&quot;http:&#x2F;&#x2F;physics.weber.edu&#x2F;schroeder&#x2F;fluids&#x2F;FluidSimulationsForUndergrads.pdf&quot;&gt;here (pdf)&lt;&#x2F;a&gt;, or you can read
&lt;a href=&quot;&#x2F;posts&#x2F;lattice-boltzmann.html&quot;&gt;my explanation&lt;&#x2F;a&gt;. The TL;DR version, though, is that this is a 2D
computational fluid dynamics simulation. You can think of it as the surface of a pond that you&#x27;re dragging your finger
through.&lt;&#x2F;p&gt;
&lt;p&gt;So what does this have to do with the contest&#x27;s theme, &#x27;here be dragons&#x27;? Well, nothing, really. It&#x27;s just an
interesting problem I was working on recently, and I thought it would be fun to see if it was possible to achieve in 1K.
So let&#x27;s get to it, shall we.&lt;&#x2F;p&gt;
&lt;p&gt;I started this project with a slightly modified version of the original program mentioned earlier. The original program
clocked in just north of 20000 bytes, uncompressed, and the modified version was around about 4000 bytes. It fairly
quickly became clear, though, that I wasn&#x27;t going to be able to cut the size by three-quarters, and a fresh start was
required. I wasn&#x27;t quite so quick to accept this, though, and wasted a few commits trying to make it work. But once I
had started fresh with just the core features (starting at about 1900 bytes), from there it was pretty rough sledding
down to 1K. Strangely, as difficult as it was initially to trim away bytes, once I hit 1K the bytes seemed to keep
melting off. The smallest size I achieved was 944 bytes, although this version was mostly an attempt to test the limits,
and, while it &#x27;worked&#x27;, it had some serious issues. From this low-byte point, I began to add features and improve
performance, while continuing to strip away any extra bytes I could. At this stage, the program oscillated between ~990
and ~1200 bytes. As I added each new feature, the size of the program would balloon up over 1K, and I then had to fret
over whether to keep the feature, swap it for another one, or else find some other way to strip away a few spare bytes.
If I can coin an analogy, the whole process was a bit like throwing tic-tacs and pennies out the window of your Chrysler
K-car to make it go faster. Anyway, here&#x27;s a little of what I learned.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-things-i-m-most-proud-ashamed-of-or-speedups-and-speedbumps&quot;&gt;The things I&#x27;m most proud&#x2F;ashamed of, or, speedups and speedbumps:&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;flatten-all-the-things&quot;&gt;Flatten all the things&lt;&#x2F;h3&gt;
&lt;p&gt;One of the early significant breakthroughs came with flattening every possible nested loop. As the lattice Boltzmann
method makes use of a lattice (shocking, I know), it&#x27;s perhaps most natural to represent this with a multi-dimensional
array. In this case, where we are working with a two-dimensional lattice, a two-dimensional array would be most
appropriate. In JavaScript, this would be represented by an n-length array, each element of which being an m-length
array, where n and m are the width and height respectively (in this program, width and height are equal, to save from
having to cache both the width and the height; further, it was decided that width and height would be 99, as this saves
a single byte vs a triple digit array size... seriously). Accessing this array would look like this: &lt;code&gt;lattice[x][y]&lt;&#x2F;code&gt;.
The simplest way to loop over each of the elements of the lattice would be two nested loops, like so:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;lattice_width; x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;lattice_height; y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        lattice[x][y];
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The lattice Boltzmann method requires looping over the array at least twice per tick, once for the streaming phase, and
once for the collision phase (although it &lt;em&gt;may&lt;&#x2F;em&gt; be possible to do it in a single loop with some additional storage on
each node and some more complicated logic to shuffle around distributions, I never looked into it closely enough to
determine the feasibility of this option, so I leave it as an exercise for the reader). However, while it is necessary
to iterate over the array at least twice, these iterations needn&#x27;t be performed with nested loops. It is possible to
loop over any n-by-m array with a single loop. To do this, you loop from 0 to the total number of items in the the array
(n*m), and determine the x and y coordinates on the fly, like so:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;(lattice_width &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;lattice_height); i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span&gt;lattice_width; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; x-coordinate
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;Math&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;floor&lt;&#x2F;span&gt;&lt;span&gt;(i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span&gt;lattice_width); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; y-coordinate
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    lattice[x][y];
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If it&#x27;s not clear why this works, think of it this way: &lt;code&gt;y&lt;&#x2F;code&gt; is increasing by one every time we go through another
&lt;code&gt;lattice_width&lt;&#x2F;code&gt; values. This corresponds exactly to the row numbers. And &lt;code&gt;x&lt;&#x2F;code&gt; is cycling between 0 and &lt;code&gt;lattice_width&lt;&#x2F;code&gt;,
which corresponds to the column numbers.&lt;&#x2F;p&gt;
&lt;p&gt;Although calculating the x and y coordinates does take a few extra bytes, the elimination of the inner loop more than
makes up for this. For the most part, flattening these nested loops was fairly straightforward. However, I did have some
problems flattening the draw loop. This loop iterates over a square region of the canvas image, and draws a colored
square for each lattice node. Originally this loop looked like this:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;ypx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;y_pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;px_per_node; ypx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;(y_pos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;px_per_node; ypx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;xpx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;x_pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;px_per_node; xpx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;(x_pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;px_per_node; xpx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(xpx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;ypx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;image.width) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            image.data[index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;color.red;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            image.data[index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;color.green;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            image.data[index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;color.blue;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            image.data[index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;color.alpha;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The additional logic in each loop initialization and condition, and in calculating the index, made this one a little
more difficult to figure out. At its core, though, this loop is merely iterating over a square region of the image.
Since I decided to fix the width and height of the image that&#x27;s drawn to the canvas (which also simplified many other
areas of the program and saved quite a few bytes), this loop eventually boiled down to this:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;36&lt;&#x2F;span&gt;&lt;span&gt;; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;Math&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;floor&lt;&#x2F;span&gt;&lt;span&gt;(i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;(x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;x_pos) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;image.width &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;(y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;y_pos)));
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;where 36 is the fixed area of the square to be drawn, and 6 is the width and height of that square (AKA &lt;code&gt;px_per_node&lt;&#x2F;code&gt;).
You may recognize the method of calculating x and y from earlier. The rest of the logic merely calculates the image
index, and is an implementation detail of the image data array. When I was working on this late at night, this extra
logic confounded the problem immensely, but after breaking it down into its essential components it became clear enough.&lt;&#x2F;p&gt;
&lt;p&gt;A related trick that gained a few extra bytes was to flatten the two dimensional array representing the lattice into a
one-dimensional array. This complicates lookup slightly (each node is accessed via &lt;code&gt;lattice[x+y*width]&lt;&#x2F;code&gt; instead of
&lt;code&gt;lattice[x][y]&lt;&#x2F;code&gt;), and you may notice that, even when the width variable is squashed to a single letter, lookup with this
method actually takes one more byte. The small extra lookup cost was worth it, however, as I was able to eliminate an
&lt;code&gt;if&lt;&#x2F;code&gt; test during initialization, which was checking to see if the initialization loop had reached a new column in the
array, and adding a new array if it had (which looked like this):&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(y_pos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    lattice[x_pos]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;[];
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;flows-of-data-more-vast-than-anything-the-world-has-seen&quot;&gt;Flows of data more vast than anything the world has seen&lt;&#x2F;h2&gt;
&lt;p&gt;If you&#x27;re trying to shave bytes, one of the most important things is efficient data storage. If you can eliminate the
need for data storage altogether (e.g. with procedural generation), so much the better. But for this project, there was
a small amount of data that was absolutely critical, and which, so far as I can tell, cannot be succinctly
programmatically generated. These were, namely, the velocities associated with each distribution function (DF) and the
distribution function weights. In the lattice Boltzmann method, each node has a number of distribution functions, each
representing a distribution of particle densities. In this program (which uses the D2Q9 discretization... which just
means a two-dimensional lattice, with 9 velocities per node), each node has nine of these distribution functions.
These are numbered from zero to eight. Zero represents the &#x27;at-rest&#x27; velocity, one through four represent the cardinal
direction velocities, and five through eight represent the ordinal direction velocities. In order for these
distributions to stream in their direction of travel (i.e. move from one node another), each must have some notion of
what that direction is. Originally I had stored these directions as an 8-by-2 array, where each inner array represented
the delta x and y for its respective distribution to travel. This looked something like this:
&lt;code&gt;ND = [[0,0],[1,0],[0,-1],[-1,0],[0,1],[1,-1],[-1,-1],[-1,1],[1,1]]&lt;&#x2F;code&gt;. So, for example, the &#x27;6&#x27; distribution travels -1
in the x direction, and -1 in the y direction. For a node at coordinates (100,100), after streaming the &#x27;6&#x27; distribution
from (100,100) would end up at coordinates (99,99). You may notice that the data above contains a fair number of
non-data characters in the form of brackets and commas. Altogether, this array takes up 61 bytes. My initial solution to
reduce the size of this data, which was one of my largest blunders on this project, was to represent this data as a
string. I will give you a moment to allow that to sink in. If it strikes you that this is an utterly inane solution, you
are correct, but I think there&#x27;s a lesson to be learned here, so let&#x27;s have a look at how I came to it. With this
method, the data would look like this &lt;code&gt;ND = &amp;quot; 0 0 1 0 0-1-1 0 0 1 1-1-1-1-1 1 1 1&amp;quot;&lt;&#x2F;code&gt;. Note the extra spaces, which are
used to pad non negative numbers to a string length of 2. This makes lookup much simpler. Now granted, this storage
method is much more compact (it&#x27;s only 38 bytes), but lookup is more complicated and verbose. It would look something
like this &lt;code&gt;ND.slice(x*4,x*4+2),ND.slice(x*4+2,x*4+4)&lt;&#x2F;code&gt;, where x is the distribution we are looking at from 0 to 8.
Although &lt;code&gt;slice&lt;&#x2F;code&gt; might seem quite expensive, when I was employing this method I was caching the string &#x27;slice&#x27; once and
using bracket notation, like this: &lt;code&gt;X=&#x27;slice&#x27;;ND[X](x*4,x*4+2)&lt;&#x2F;code&gt;, so overall it wasn&#x27;t too terrible, and the extra bytes
needed for lookup were still made up by the relative compactness of the storage method. However, a quick
&lt;a href=&quot;http:&#x2F;&#x2F;jsperf.com&#x2F;string-slice-vs-array-lookup&quot;&gt;jsperf&lt;&#x2F;a&gt; revealed that this method was over 90% slower than a simple
array lookup. Perhaps some of you have by now come to the realization that took me far, far too long. This data can be
stored in a single dimensional array for a few extra bytes (43 total), but with the dual benefits of significantly
faster lookup time, and of saving several bytes per lookup (&lt;code&gt;ND[x*2]&lt;&#x2F;code&gt; vs &lt;code&gt;ND[X](x*4,x*4+2)&lt;&#x2F;code&gt;; keep in mind that the
latter example would almost certainly have cached &lt;code&gt;x*4&lt;&#x2F;code&gt;, and in reality would be &lt;code&gt;ND[X](x,x+2)&lt;&#x2F;code&gt;). Additionally, another
10 bytes are saved by not having to cache &#x27;slice&#x27;. Perhaps the worst part of this whole ordeal is how inordinately
clever I thought I was being at the time. So the lesson here, if there is one, is that you&#x27;re almost certainly never as
clever as you think you are. If you get myopia about a problem and lock into your initial solution, you can close
yourself off to the easier, more elegant solution.&lt;&#x2F;p&gt;
&lt;p&gt;There was also one more savings on data. Each DF has a weight associated with it. Zero has its own weight
(&lt;code&gt;one9th=1&#x2F;9&lt;&#x2F;code&gt;), the cardinal directions share another weight (&lt;code&gt;four9ths=4&#x2F;9&lt;&#x2F;code&gt;), and the ordinal directions share yet
another (&lt;code&gt;one36th=1&#x2F;36&lt;&#x2F;code&gt;). Originally I was storing these velocities in their own array. Of course this was very costly.
Even though tacking them onto the node directions array saved a few extra bytes, there was still a lot of unnecessary
repetition (&lt;code&gt;four9ths&lt;&#x2F;code&gt; and &lt;code&gt;one36th&lt;&#x2F;code&gt; were each stored in four separate locations, each of those instances requiring an
extra comma in the array). Since this data is only used once, in the equilibrium function, it is hard to justify
spending so many bytes on storage. So it was a very obvious candidate for some form of simplification or compression.
The most succinct method I was able to find was to use an if&#x2F;else statement inside the loop over the DFs
(i.e. from 0 to 8), which fails if zero (thus setting else &lt;code&gt;weight&lt;&#x2F;code&gt; to 4&#x2F;9), and otherwise evaluates a conditional
operator. If we are looking at velocities one through four, the weight is 1&#x2F;9, otherwise it is 1&#x2F;36. So like this:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(i) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        weight &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;36&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        weight &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Google&#x27;s closure compiler further compacts this piece of logic in a way I myself probably wouldn&#x27;t have thought of
(&lt;code&gt;weight=i?5&amp;gt;i?1&#x2F;9:1&#x2F;36:4&#x2F;9&lt;&#x2F;code&gt;). Overall a significant byte savings was realized over storing this data in its own array.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sound-trumpets-let-our-bloody-colours-wave&quot;&gt;Sound trumpets! let our bloody colours wave!&lt;&#x2F;h2&gt;
&lt;p&gt;This is a brief point, but I think it&#x27;s an important one. Visually, the program originally drew green &#x27;waves&#x27; on a
black background. In my opinion, this doesn&#x27;t look too bad. Working with any more colors than this was pretty much off
the table, as it would not have been within my byte budget, and there were many more things besides that would have
taken precedence if I had the bytes to spare. For a long time, I was achieving this effect by setting the background
style property of the canvas to black (at a cost of 26 bytes). Eventually, though, it became clear that this was too
expensive, and would have to go. So for a while I was drawing green waves on a white background. This looked... less
nice. I experimented with different colored waves—red, black, blue, everything... light blue—still on a white
background, but they were all lacking. Eventually I realized that I could achieve the exact same effect as I had been
without using any extra bytes. I had been setting the green channel of each pixel to 255 (well, 600, actually, as I
already had 600 cached in a variable anyway, to use for the width and height of the image... setting this well above
the allowed maximum hasn&#x27;t seemed to have any ill effects, and 2 bytes is 2 bytes), and varying the alpha channel
based on speed. This has the effect of drawing each lattice node green, with the alpha channel being proportional to the
speed at that node. Like this:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;image.data[index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Green channel
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;image.data[index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;speed; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Alpha channel
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using this method, if a node has low or no speed, it is essentially transparent. In other words, the background color
can and will shine through. Eventually I came to realize that if I swapped these (in other words, set the alpha channel
to a constant (i.e. fully opaque), and vary the green channel proportionally with the speed at the node), that I could
achieve the same green on black effect I had wanted, but at absolutely no additional cost over what I was already using.
This works primarily because the different channels are defaulted to 0. So when speed is 0, the node would be colored
&lt;code&gt;{r: 0, g: 0, b: 0, a: 255}&lt;&#x2F;code&gt; (black), and when speed is high, it would be &lt;code&gt;{r: 0, g: 255, b: 0, a: 255}&lt;&#x2F;code&gt; (green).
Somewhat embarrassingly, this realization came when trying random color combinations. It was not a stroke of insight so
much as it was a happy accident. The takeaway here being, if something isn&#x27;t working for you, there very well may be
more than one way to achieve the same effect. Don&#x27;t give up on something just because your first attempt failed or was
too costly. Keep experimenting. You&#x27;re almost certainly not so smart that you can&#x27;t stumble your way into something, at
some point, that you couldn&#x27;t have thought your way into.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-point-of-no-returns&quot;&gt;The point of no &lt;code&gt;return&lt;&#x2F;code&gt;s&lt;&#x2F;h2&gt;
&lt;p&gt;This was a small-ish savings, but if you look at my program, you may notice that there isn&#x27;t a single return statement.
Not one. After all, &lt;code&gt;return&lt;&#x2F;code&gt; is pretty costly. To return anything meaningful requires at least nine bytes, plus two more
for assignment upon calling. Streaming and collision don&#x27;t really require a &lt;code&gt;return&lt;&#x2F;code&gt; (they both manipulate the &lt;code&gt;lattice&lt;&#x2F;code&gt;
array which is in the global scope). The mouse function doesn&#x27;t require one. The equilibrium function originally did
return the equilibrium array, but ultimately it didn&#x27;t require one either. To achieve this, an &lt;code&gt;eq&lt;&#x2F;code&gt; array was put into
the global scope. When it is necessary to calculate the equilibrium of a node, the &lt;code&gt;equilibrium&lt;&#x2F;code&gt; function is called on
it&#x27;s own, and on the next line the equilibrium values are accessed from the now updated &lt;code&gt;eq&lt;&#x2F;code&gt; variable. In other words,
it&#x27;s all about the side-effects. In the following example, the equilibrium values are calculated using the node&#x27;s
density and fixed x and y velocity values (0.1); the node&#x27;s streaming array (which is just a place to store streaming
values, to save us having to throw out and rebuild every single node on every single tick) is then set to the recently
calculated equilibrium values.&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Here eq holds outdated values
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;equilibrium&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;, node.density); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; eq values are up to date after this executes
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;node.stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;eq; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Set streaming array to new equilibrium values
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The one important thing to note here is that, since the &lt;code&gt;eq&lt;&#x2F;code&gt; variable is shared quite promiscuously, it is imperative
that a new array be created each and every time the equilibrium value is calculated, otherwise every node would share a
reference to the same array, and madness would ensue. This is the inherent danger of mutable state, but there&#x27;s no way
around it if you want to trim some bytes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;i-ain-t-got-time-to-var&quot;&gt;I ain&#x27;t got time to &lt;code&gt;var&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;If you look carefully at the fully minified version of this program, you may notice something interesting. Every single
variable is in the global scope. Every. Single. One. Well... aside from the arguments to the &lt;code&gt;equilibrium&lt;&#x2F;code&gt; and
&lt;code&gt;mousemove&lt;&#x2F;code&gt; functions. But the point is, there isn&#x27;t a single instance of &lt;code&gt;var&lt;&#x2F;code&gt; in the entire program. Now, Google&#x27;s
closure compiler doesn&#x27;t rename globals, as this could cause serious issues, so this was one of the more difficult
optimizations to achieve. Since the compiler would not have any qualms about using, for example, the local variable
identifier &lt;code&gt;a&lt;&#x2F;code&gt; in two separate functions (as they would each belong to their own scope, neither would ever be in danger
of overwriting the data of the other), it isn&#x27;t possible to simply delete all &lt;code&gt;var&lt;&#x2F;code&gt;&#x27;s from the compiled program without
risking dangerous name collisions. While this may work coincidentally in certain instances, it&#x27;s not a technique that
can be consistently relied upon. So in order to eliminate all local variables, I had to manually rename virtually all
variables to single letter identifiers, making certain that there were no name clashes. This was particularly difficult,
as it required some careful bookkeeping to keep the different variables straight. It is probably best to perform this
step as late as possible, once your program is functioning properly and the functionality has been more or less locked
down, as once this is performed your program will become significantly more difficult to understand and follow, even in
its uncompiled state. Before you reach this step, though, you can make this process much easier for yourself by only
using unique, easily searchable, and easily mechanically replacable identifiers for all your different variables. So as
an example, having the variables &lt;code&gt;lattice&lt;&#x2F;code&gt; and &lt;code&gt;lattice_width&lt;&#x2F;code&gt; could present problems if you were to search&#x2F;replace
&lt;code&gt;lattice&lt;&#x2F;code&gt; before &lt;code&gt;lattice_width&lt;&#x2F;code&gt;. Also, loop variables can generally be reused with impunity, although it&#x27;s best to
perform a quick sanity check to make certain there won&#x27;t ever be conflicts when reusing them before renaming. As an
example, if you are using the loop variable &lt;code&gt;i&lt;&#x2F;code&gt; in both your &lt;code&gt;update&lt;&#x2F;code&gt; function and your &lt;code&gt;stream&lt;&#x2F;code&gt; function, if &lt;code&gt;update&lt;&#x2F;code&gt;
were to call &lt;code&gt;stream&lt;&#x2F;code&gt; inside of a loop using this &lt;code&gt;i&lt;&#x2F;code&gt; variable, this could lead to problems. One other thing that was
helpful was to put the entire program in an immediately invoked function expression. This provides your program with its
own scope, and allows Google&#x27;s closure compiler to freely rename variables therein.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;requestanimationframe-captain&quot;&gt;&lt;code&gt;requestAnimationFrame&lt;&#x2F;code&gt;, captain&lt;&#x2F;h2&gt;
&lt;p&gt;Finally, it&#x27;s important to know when you can&#x27;t get away with trimming bytes. For a long time, I was using &lt;code&gt;setTimeout&lt;&#x2F;code&gt;
instead of either the much superior but much more verbose &lt;code&gt;requestAnimationFrame&lt;&#x2F;code&gt; or the probably not much better but
slightly more verbose &lt;code&gt;setInterval&lt;&#x2F;code&gt;. I thought this was an easy 11 bytes. It worked pretty well in chrome, which is what
I was primarily developing in, but it put firefox into an absolute fit. When it came time to test my program in Firefox,
it took me a while to determine what the actual issue was, and I wasted a fair amount of time chasing red herrings. When
I finally realized that &lt;code&gt;requestAnimationFrame&lt;&#x2F;code&gt; was not optional, it was pretty rough. The program was hovering right
around 1K, and &lt;code&gt;requestAnimationFrame&lt;&#x2F;code&gt; sent it over the top. I had to make some hard decisions as a result, and I had to
dig in even deeper to keep shaving off more bytes. If I had started with &lt;code&gt;requestAnimationFrame&lt;&#x2F;code&gt;, I still would have had
to shave the same number of bytes, but I might have saved myself a mini heartache of going from ~1K up into the 1040
range. That was pretty demoralizing. Now, I&#x27;m not saying every program absolutely needs to use &lt;code&gt;requestAnimationFrame&lt;&#x2F;code&gt;.
I believe it was only essential to this program because of the relatively high computational complexity of the
algorithm. I&#x27;m sure a less taxing program could easily get away with &lt;code&gt;setInterval&lt;&#x2F;code&gt;. The important takeaway here, though,
is that, whenever possible, you should find those things that are absolutely essential to your program as early as you
can, and make them nonnegotiable in your byte-budget. So if you determine early on that you absolutely need
&lt;code&gt;requestAnimationFrame&lt;&#x2F;code&gt; and &lt;code&gt;a.onmousemove=function(){}&lt;&#x2F;code&gt;, then you really only have 977 bytes to play with, not 1024.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;odds-and-bobs&quot;&gt;Odds and bobs&lt;&#x2F;h2&gt;
&lt;p&gt;A few random bits of advice:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Set up a build&#x2F;compile process early, especially if you&#x27;re using a mechanical minification service like Google&#x27;s
closure compiler. They have an easy to use API, and a little regex knowledge should do the rest. I manually
search&#x2F;replaced variables and things far more often than I really should have before I set up a compile script. I set
mine up to send to Google&#x27;s closure compiler, knock some variables off the response that I only kept around to keep the
closure compiler from using those identifiers, wipe out the IIFE I was using for scoping, and then finally print the
final length to the terminal. There were a few more steps I never bothered to automate, too, so I always knew that the
reported length was going to be ~10 bytes higher than the fully minified program.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;If you dig through my repo, you&#x27;ll find one commit message made early in the morning that reads &amp;quot;Had a few beers,
somehow gained 36 bytes?!?; 1100 bytes&amp;quot;. This was prior to reaching 1K, and at the time it was a pretty significant
step towards that goal. It wasn&#x27;t even that many beers, either. Who knows how many bytes could have been shed if it had
been tequila. So, I guess the point is, that it can&#x27;t hurt to get a little drunk? Maybe? Or even just step away for a
minute, take a walk, do whatever you need to to take your mind off the problem, and you might return to it with a new
perspective.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion-or-whatever&quot;&gt;Conclusion, or whatever&lt;&#x2F;h2&gt;
&lt;p&gt;Though this project certainly had its low points, and there were a few moments when I seriously questioned whether what
I had set out to do was even possible, ultimately I achieved my goal: I made a program that was far more functional and
polished than I would have thought possible in such a small number of bytes, I learned a few interesting and useful
things about JavaScript (and a couple of dirty, dirty hacks), and I got a different perspective on programming in
general.&lt;&#x2F;p&gt;
&lt;p&gt;The French Oulipo are a group of writers and mathematicians who are primarily known for their constrained writing.
Georges Perec, for example, wrote a 300 page lipogram novel, &lt;em&gt;La disparition&lt;&#x2F;em&gt;, in which the letter &#x27;e&#x27; is never used.
Like, at all. Ever. In French, the letter &#x27;e&#x27; has a slightly higher frequency than it does in English, so this was no
small feat. While it can be maddening at times, as the Oulipo realized, imposing an arbitrary constraint upon yourself
can force you to focus more clearly on what you are doing, and can lead to brilliant insights you might never have
realized otherwise, as well as a deeper understanding of the boundaries of the system you&#x27;re working in.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Computational Fluid Dynamics Made Easy</title>
        <published>2014-02-16T12:49:00+00:00</published>
        <updated>2014-02-16T12:49:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://ebenpackwood.com/posts/lattice-boltzmann.html/" type="text/html"/>
        <id>https://ebenpackwood.com/posts/lattice-boltzmann.html/</id>
        
        <content type="html">&lt;div style=&quot;height:0&quot;&gt;
    &lt;svg width=&quot;0&quot; height=&quot;0&quot;&gt;
        &lt;!-- Definitions --&gt;
        &lt;defs&gt;
            &lt;!-- Hatching pattern --&gt;
            &lt;pattern id=&quot;diagonalHatch&quot; patternUnits=&quot;userSpaceOnUse&quot; width=&quot;50&quot; height=&quot;50&quot; patternTransform=&quot;rotate(-45)&quot;&gt;
            &lt;rect x=&quot;0&quot; y=&quot;0&quot; width=&quot;100&quot; height=&quot;100&quot; fill=&quot;white&quot;&#x2F;&gt;
            &lt;path d=&quot;M -1,50 H 200&quot; stroke=&quot;#000000&quot; stroke-width=&quot;20&quot;&#x2F;&gt;
            &lt;&#x2F;pattern&gt;
        &lt;&#x2F;defs&gt;
        &lt;defs&gt;
            &lt;g id=&quot;arrow-group&quot;&gt;
                &lt;line x1=&quot;0&quot; y1=&quot;0&quot; x2=&quot;125&quot; y2=&quot;125&quot; stroke-width=&quot;10&quot;&gt;&lt;&#x2F;line&gt;
                &lt;polygon points=&quot;155,155 145,105 105,145&quot;&gt;&lt;&#x2F;polygon&gt;
            &lt;&#x2F;g&gt;
        &lt;&#x2F;defs&gt;
        &lt;defs&gt;
            &lt;g id=&quot;arrow-group-short&quot;&gt;
                &lt;line x1=&quot;0&quot; y1=&quot;0&quot; x2=&quot;85&quot; y2=&quot;85&quot; stroke-width=&quot;10&quot;&gt;&lt;&#x2F;line&gt;
                &lt;polygon points=&quot;110,110 100,60 60,100&quot;&gt;&lt;&#x2F;polygon&gt;
            &lt;&#x2F;g&gt;
        &lt;&#x2F;defs&gt;
        &lt;defs&gt;
            &lt;g id=&quot;triangle&quot;&gt;
                &lt;line x1=&quot;200&quot; y1=&quot;0&quot; x2=&quot;0&quot; y2=&quot;347&quot; stroke-width=&quot;10&quot;&gt;&lt;&#x2F;line&gt;
                &lt;line x1=&quot;200&quot; y1=&quot;0&quot; x2=&quot;400&quot; y2=&quot;347&quot; stroke-width=&quot;10&quot;&gt;&lt;&#x2F;line&gt;
                &lt;line x1=&quot;0&quot; y1=&quot;347&quot; x2=&quot;400&quot; y2=&quot;347&quot; stroke-width=&quot;10&quot;&gt;&lt;&#x2F;line&gt;
            &lt;&#x2F;g&gt;
        &lt;&#x2F;defs&gt;
        &lt;defs&gt;
            &lt;g id=&quot;particle-arrow&quot;&gt;
                &lt;circle cx=&quot;0&quot; cy=&quot;0&quot; r=&quot;30&quot;&gt;&lt;&#x2F;circle&gt;
                &lt;line x1=&quot;0&quot; y1=&quot;0&quot; x2=&quot;175&quot; y2=&quot;0&quot; stroke-width=&quot;15&quot;&gt;&lt;&#x2F;line&gt;
                &lt;polygon points=&quot;200,0 170,-20 170,20&quot;&gt;&lt;&#x2F;polygon&gt;
            &lt;&#x2F;g&gt;
        &lt;&#x2F;defs&gt;
        &lt;defs&gt;
            &lt;g id=&quot;arrow-group-large&quot;&gt;
                &lt;line x1=&quot;0&quot; y1=&quot;0&quot; x2=&quot;470&quot; y2=&quot;470&quot; stroke-width=&quot;10&quot;&gt;&lt;&#x2F;line&gt;
                &lt;polygon points=&quot;485,485 475,435 435,475&quot;&gt;&lt;&#x2F;polygon&gt;
            &lt;&#x2F;g&gt;
        &lt;&#x2F;defs&gt;
        &lt;defs&gt;
            &lt;g id=&quot;arrow-group-large-short&quot;&gt;
                &lt;line x1=&quot;0&quot; y1=&quot;0&quot; x2=&quot;330&quot; y2=&quot;330&quot; stroke-width=&quot;10&quot;&gt;&lt;&#x2F;line&gt;
                &lt;polygon points=&quot;345,345 335,295 295,335&quot;&gt;&lt;&#x2F;polygon&gt;
            &lt;&#x2F;g&gt;
        &lt;&#x2F;defs&gt;
    &lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Over the 2013 winter holidays I was looking for a project to work on. I had been interested in learning more about the
canvas element for a while, so, with the snow driving o’er the fields, I decided to make a simple snow simulation to
start learning some canvas basics. Once I had a simple snow program up and running in the canvas, I turned my attention
to implementing a wind system that would allow users to interact with the snow, creating gusts of wind with their mouse.
My initial naive attempts—which mostly involved a mesh of nodes which contained a single wind vector, and some
mechanism to propagate those vectors to the next node in their direction of travel—were fairly unsatisfactory, so I
began to look for ways to improve the wind system. After some cursory googling, I started looking in earnest at
computational fluid dynamics. This led me to the Navier-Stokes equations, which seemed just a little too complicated
for what I was after. Navier-Stokes led me to lattice-gas automata (LGA), which, while conceptually quite simple, has
some inherent issues. Finally, LGA led to the lattice Boltzmann methods (LBM).&lt;&#x2F;p&gt;
&lt;!--more--&gt;
&lt;p&gt;In the 1970s and 1980s, the LGA model was developed to simulate fluid flow. This model uses a lattice comprised of
individual cellular automata. Each cell can be in one of several states, each state representing particles at the cell
moving with different discrete velocities. For example, in one of the most popular forms of the model, in which the
lattice is represented as a hexagonal grid of cells, each cell has six or seven velocities (possibly including the
&#x27;at-rest&#x27; velocity), and each of these velocities can be in either the &#x27;on&#x27; or &#x27;off&#x27; state to indicate if there is a
particle at that node traveling at that velocity. Each discrete time step in the model is comprised of two phases: the
streaming phase, in which particles move from one node to the next in their direction of travel, and the collision
phase, in which the particles within a node collide and bounce off each other and change direction.&lt;&#x2F;p&gt;
&lt;div id=&quot;lattice-gas-illustration&quot;&gt;
    &lt;svg width=&quot;300&quot; height=&quot;200&quot; viewbox=&quot;-20 -20 1230 650&quot;&gt;
        &lt;!-- First row --&gt;
        &lt;g class=&quot;triangle&quot; transform=&quot;translate(0,0)&quot;&gt;
            &lt;use xlink:href=&quot;#triangle&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;triangle&quot; transform=&quot;translate(200,-52) rotate(180 200 200)&quot;&gt;
            &lt;use xlink:href=&quot;#triangle&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;triangle&quot; transform=&quot;translate(400, 0)&quot;&gt;
            &lt;use xlink:href=&quot;#triangle&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;triangle&quot; transform=&quot;translate(600, -52) rotate(180 200 200)&quot;&gt;
            &lt;use xlink:href=&quot;#triangle&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;triangle&quot; transform=&quot;translate(800, 0)&quot;&gt;
            &lt;use xlink:href=&quot;#triangle&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;!-- Second row --&gt;
        &lt;g class=&quot;triangle&quot; transform=&quot;translate(0,294) rotate(180 200 200)&quot;&gt;
            &lt;use xlink:href=&quot;#triangle&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;triangle&quot; transform=&quot;translate(200,345)&quot;&gt;
            &lt;use xlink:href=&quot;#triangle&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;triangle&quot; transform=&quot;translate(400,294) rotate(180 200 200)&quot;&gt;
            &lt;use xlink:href=&quot;#triangle&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;triangle&quot; transform=&quot;translate(600,345)&quot;&gt;
            &lt;use xlink:href=&quot;#triangle&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;triangle&quot; transform=&quot;translate(800,294) rotate(180 200 200)&quot;&gt;
            &lt;use xlink:href=&quot;#triangle&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;!-- Particles --&gt;
        &lt;g class=&quot;particle-arrow&quot; transform=&quot;translate(400,347)&quot;&gt;
            &lt;use xlink:href=&quot;#particle-arrow&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;particle-arrow&quot; transform=&quot;translate(800,347) rotate(-120)&quot;&gt;
            &lt;use xlink:href=&quot;#particle-arrow&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;particle-arrow&quot; transform=&quot;translate(400,347) rotate(60)&quot;&gt;
            &lt;use xlink:href=&quot;#particle-arrow&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;particle-arrow&quot; transform=&quot;translate(400,347) rotate(120)&quot;&gt;
            &lt;use xlink:href=&quot;#particle-arrow&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;particle-arrow&quot; transform=&quot;translate(800,347) rotate(120)&quot;&gt;
            &lt;use xlink:href=&quot;#particle-arrow&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
    &lt;&#x2F;svg&gt;
    &lt;p class=&quot;illustration-label&quot;&gt;Two cells in a lattice-gas automata&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;While its conceptual simplicity is alluring, LGA has some major shortcomings, many of which LBM directly addresses.
And while LBM sacrifices a small amount of LGA&#x27;s simplicity for the sake of increased accuracy and robustness, LBM is
actually still surprisingly quite simple. Like LGA, LBM also consists of a lattice of nodes, but where LGA&#x27;s nodes have
a finite set of possible states, LBM&#x27;s nodes contain a set of particle distribution functions (DFs). In other words,
LBM is continuous where LGA is discrete.&lt;&#x2F;p&gt;
&lt;p&gt;LBM comes in many flavors. It can easily be configured for one-, two-, or three-dimensional spaces, each of which has
its own variants. In this example we will be discussing D2Q9, which means a two-dimensional lattice, with nine discrete
distribution functions per node. Other common configurations include D1Q3, D1Q5, D3Q15, and D3Q19&lt;&#x2F;p&gt;
&lt;p&gt;Each node in the lattice consists of a set of particle DFs. Together, these DFs represent a collection of particles, and
are related to the probability of finding a particle at a node, at a given time, with a particular velocity. For D2Q9,
there are nine DFs per node. The density of these DFs is represented by $n*i$. Each DF is also associated with a
velocity, represented by $\vec{e}*{i}$. These velocities correspond to the four cardinal directions, the four
ordinal directions, as well as the &#x27;at-rest&#x27; velocity. These velocities are chosen such that they carry a particle from
a node in the lattice to one of its neighboring nodes. For convenience, these velocities are each assigned a number, as
seen below.&lt;&#x2F;p&gt;
&lt;div id=&quot;node-distribution-illustration&quot;&gt;
    &lt;svg width=&quot;200&quot; height=&quot;200&quot; viewbox=&quot;-300 -300  1620 1620&quot;&gt;
        &lt;!-- Directions --&gt;
        &lt;rect class=&quot;outer&quot; width=&quot;990&quot; height=&quot;990&quot; x=&quot;20&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;!-- Ordinals --&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,515) rotate(0)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-large&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,515) rotate(90)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-large&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,515) rotate(180)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-large&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,515) rotate(270)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-large&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;!-- Cardinals --&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,515) rotate(45)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-large-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,515) rotate(135)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-large-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,515) rotate(225)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-large-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,515) rotate(315)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-large-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;515&quot; cy=&quot;515&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;text x=&quot;-100&quot; y=&quot;-50&quot;
            font-family=&quot;Verdana&quot;
            font-size=&quot;75&quot;&gt;
            6
        &lt;&#x2F;text&gt;
        &lt;text x=&quot;500&quot; y=&quot;-50&quot;
            font-family=&quot;Verdana&quot;
            font-size=&quot;75&quot;&gt;
            2
        &lt;&#x2F;text&gt;
        &lt;text x=&quot;1100&quot; y=&quot;-50&quot;
            font-family=&quot;Verdana&quot;
            font-size=&quot;75&quot;&gt;
            5
        &lt;&#x2F;text&gt;
        &lt;text x=&quot;-100&quot; y=&quot;550&quot;
            font-family=&quot;Verdana&quot;
            font-size=&quot;75&quot;&gt;
            3
        &lt;&#x2F;text&gt;
        &lt;text x=&quot;600&quot; y=&quot;500&quot;
            font-family=&quot;Verdana&quot;
            font-size=&quot;75&quot;&gt;
            0
        &lt;&#x2F;text&gt;
        &lt;text x=&quot;1100&quot; y=&quot;550&quot;
            font-family=&quot;Verdana&quot;
            font-size=&quot;75&quot;&gt;
            1
        &lt;&#x2F;text&gt;
        &lt;text x=&quot;1100&quot; y=&quot;1120&quot;
            font-family=&quot;Verdana&quot;
            font-size=&quot;75&quot;&gt;
            8
        &lt;&#x2F;text&gt;
        &lt;text x=&quot;500&quot; y=&quot;1120&quot;
            font-family=&quot;Verdana&quot;
            font-size=&quot;75&quot;&gt;
            4
        &lt;&#x2F;text&gt;
        &lt;text x=&quot;-100&quot; y=&quot;1120&quot;
            font-family=&quot;Verdana&quot;
            font-size=&quot;75&quot;&gt;
            7
        &lt;&#x2F;text&gt;
    &lt;&#x2F;svg&gt;
    &lt;p class=&quot;illustration-label&quot;&gt;Discrete velocities for D2Q9 model&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;The $x$ and $y$ components of the velocities for each $\vec{e}_{i}$ are shown below, and as you can see
they correspond to the diagram above.&lt;&#x2F;p&gt;
&lt;p&gt;$$
{\displaystyle
\begin{aligned}
&amp;amp;\vec{e}_{0} = (&amp;amp;0, &amp;amp;&amp;amp;0) \quad \\
&amp;amp;\vec{e}_{1} = (&amp;amp;1, &amp;amp;&amp;amp;0) \quad &amp;amp;\vec{e}_{5} = (&amp;amp; 1, &amp;amp;&amp;amp;1) \\
&amp;amp;\vec{e}_{2} = (&amp;amp;0, &amp;amp;&amp;amp;1) \quad &amp;amp;\vec{e}_{6} = (&amp;amp;-1, &amp;amp;&amp;amp;1) \\
&amp;amp;\vec{e}_{3} = (&amp;amp;-1, &amp;amp;&amp;amp;0) \quad &amp;amp;\vec{e}_{7} = (&amp;amp;-1,&amp;amp;&amp;amp;-1) \\
&amp;amp;\vec{e}_{4} = (&amp;amp;0, &amp;amp;&amp;amp;-1) \quad &amp;amp;\vec{e}_{8} = (&amp;amp; 1,&amp;amp;&amp;amp;-1) \\
\end{aligned}
}
$$&lt;&#x2F;p&gt;
&lt;p&gt;For each node in the lattice, two important properties can be calculated from the DFs. The macroscopic density at a
particular node is described by the equation $\rho = \sum n_{i}$, or the summation of the densities of the
individual distribution functions of a node (i.e. the macroscopic density). Once the density has been calculated, it
can then be used to calculate the macroscopic velocity, $\vec{u} = \frac{1}{\rho} \sum n_{i} \vec{e}_{i}$.&lt;&#x2F;p&gt;
&lt;p&gt;Like the LGA, the LBM consists of two phases which update the DFs: namely, streaming, and collision. In the streaming
phase, the DFs of each node move to the next node in their direction of travel. It is also during this phase that
boundary conditions are considered. If a boundary is encountered, the distributions that would have been streamed into
the boundary are in some way redirected away from that boundary. More will be said of this later.&lt;&#x2F;p&gt;
&lt;div id=&quot;stream-start-illustration&quot;&gt;
    &lt;svg width=&quot;200&quot; height=&quot;200&quot; viewbox=&quot;0 0 1020 1020&quot;&gt;
        &lt;!-- Streaming, start --&gt;
        &lt;!-- First column --&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;20&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(185,185) rotate(0)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;185&quot; cy=&quot;185&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;20&quot; y=&quot;350&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(185,515) rotate(315)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;185&quot; cy=&quot;515&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;20&quot; y=&quot;680&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(185,845) rotate(270)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;185&quot; cy=&quot;845&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;!-- Second column --&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;350&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,185) rotate(45)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;515&quot; cy=&quot;185&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;350&quot; y=&quot;350&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;!-- Ordinal directions --&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(515,515) rotate(0)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(515,515) rotate(90)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(515,515) rotate(180)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(515,515) rotate(270)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;!-- Cardinal directions --&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(515,515) rotate(45)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(515,515) rotate(135)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(515,515) rotate(225)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(515,515) rotate(315)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;515&quot; cy=&quot;515&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;350&quot; y=&quot;680&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,845) rotate(225)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;515&quot; cy=&quot;845&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;!-- Third column --&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;680&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(845,185) rotate(90)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;845&quot; cy=&quot;185&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;680&quot; y=&quot;350&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(845,515) rotate(135)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;845&quot; cy=&quot;515&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;680&quot; y=&quot;680&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(845,845) rotate(180)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;845&quot; cy=&quot;845&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
    &lt;&#x2F;svg&gt;
    &lt;p class=&quot;illustration-label&quot;&gt;Prior to streaming phase&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div id=&quot;stream-end-illustration&quot;&gt;
    &lt;svg width=&quot;200&quot; height=&quot;200&quot; viewbox=&quot;0 0 1020 1020&quot;&gt;
        &lt;!-- Streaming, end --&gt;
        &lt;!-- First column --&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;20&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(185,185) rotate(180)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;185&quot; cy=&quot;185&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;20&quot; y=&quot;350&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(185,515) rotate(135)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;185&quot; cy=&quot;515&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;20&quot; y=&quot;680&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(185,845) rotate(90)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;185&quot; cy=&quot;845&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;!-- Second column --&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;350&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(515,185) rotate(225)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;515&quot; cy=&quot;185&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;350&quot; y=&quot;350&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;!-- Ordinal directions --&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,515) rotate(0)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,515) rotate(90)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,515) rotate(180)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,515) rotate(270)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;!-- Cardinal directions --&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,515) rotate(45)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,515) rotate(135)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,515) rotate(225)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,515) rotate(315)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;515&quot; cy=&quot;515&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;350&quot; y=&quot;680&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(515,845) rotate(45)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;515&quot; cy=&quot;845&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;!-- Third column --&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;680&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(845,185) rotate(270)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;845&quot; cy=&quot;185&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;680&quot; y=&quot;350&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(845,515) rotate(315)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group-short&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;845&quot; cy=&quot;515&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;680&quot; y=&quot;680&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(845,845) rotate(0)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;845&quot; cy=&quot;845&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
    &lt;&#x2F;svg&gt;
    &lt;p class=&quot;illustration-label&quot;&gt;After streaming phase&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;The collision phase moves the DFs at a node towards a local equilibrium. The collision phase for the LBM is somewhat
more complicated than that of LGA. The most important thing for this phase is that however the collision is calculated,
it must conserve mass, momentum and energy. One common approach to this phase is to make use of the
Bhatnagar-Gross-Krook (BGK) relaxation term. This is described by the equation
$\Omega_{i}=-\tau^{-1}(n_i-n_i^{eq})$, where $n_i^{eq}$ is a local equilibrium value for the DFs.
The term $\tau$ is a relaxation time, and is related to the viscosity. Equilibrium is calculated with the
equation $n_{i}^{eq} = \rho\omega_{i}[1+3\vec{e}_{i}\cdot\vec{u}+\frac{9}{2}(\vec{e}_{i}\cdot\vec{u}^{2})-\frac{3}{2}|\vec{u}|^{2}]$,
where the weights $\omega_{i}$ are as follows:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\begin{cases}\begin{alignat}{2}
\omega_{i=0} = \frac{4}{9} \\
\omega_{i={1..4}}= \frac{1}{9} \\
\omega_{i={5..8}}= \frac{1}{36}
\end{alignat}\end{cases}
$$&lt;&#x2F;p&gt;
&lt;p&gt;The new equilibrium values after collision are calculated with the following equation
$n_{i}^{new} = n_{i}^{old}+\frac{1}{\tau}(n_{i}^{eq}-n_{i}^{old})$&lt;&#x2F;p&gt;
&lt;p&gt;There are many options for handling boundary conditions, but for the sake of brevity we will only discuss a few of the
highlights. One of the most important distinctions with boundary conditions is between slip and no-slip conditions.
These describe the behavior of the fluid at the interface between fluid and solid boundary. The slip condition
represents a non-zero relative velocity between the fluid and the boundary, while no-slip represents a zero velocity
at the boundary.&lt;&#x2F;p&gt;
&lt;p&gt;In terms of implementation in a lattice Boltzmann simulation, these two boundary conditions would look like this: in
this example, before streaming, we have three distribution functions of three different nodes, all with the same
velocity. If boundary conditions were ignored, after streaming, each of these DFs would land within a boundary.&lt;&#x2F;p&gt;
&lt;div id=&quot;bounce-start-illustration-no-slip&quot;&gt;
    &lt;svg width=&quot;200&quot; height=&quot;200&quot; viewbox=&quot;0 0 1020 1020&quot;&gt;
        &lt;!-- Boundary conditions, starting position --&gt;
        &lt;!-- First column --&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;20&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;20&quot; y=&quot;350&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(185,515) rotate(-90)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;185&quot; cy=&quot;515&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;20&quot; y=&quot;680&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;!-- Second column --&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;350&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;350&quot; y=&quot;350&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-2&quot; transform=&quot;translate(515,515) rotate(-90)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;515&quot; cy=&quot;515&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;350&quot; y=&quot;680&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,845) rotate(-90)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;515&quot; cy=&quot;845&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;!-- Third column --&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;680&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;680&quot; y=&quot;350&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;680&quot; y=&quot;680&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
    &lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;After streaming, with the no-slip condition, each of those distributions are still headed in the same direction,
although they are now traveling in the opposite direction as prior to streaming. No-slip, in essence, can be thought
of as a simple reflection of the particles at the boundary. Upon encountering a boundary, a distribution is bounced back
to its source node, but with an opposing velocity.&lt;&#x2F;p&gt;
&lt;div id=&quot;bounce-no-slip-illustration&quot;&gt;
    &lt;svg width=&quot;200&quot; height=&quot;200&quot; viewbox=&quot;0 0 1020 1020&quot;&gt;
        &lt;!-- Boundary conditions, no-slip --&gt;
        &lt;!-- First column --&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;20&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;20&quot; y=&quot;350&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(185,515) rotate(90)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;185&quot; cy=&quot;515&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;20&quot; y=&quot;680&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;!-- Second column --&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;350&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;350&quot; y=&quot;350&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-2&quot; transform=&quot;translate(515,515) rotate(90)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;515&quot; cy=&quot;515&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;350&quot; y=&quot;680&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,845) rotate(90)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;515&quot; cy=&quot;845&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;!-- Third column --&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;680&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;680&quot; y=&quot;350&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;680&quot; y=&quot;680&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
    &lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Boundary slip is a bit more complicated in terms of implementation. In the example below, we start as before, with three
distribution functions of three different nodes, all headed in the same direction towards a boundary.&lt;&#x2F;p&gt;
&lt;div id=&quot;bounce-start-illustration-slip&quot;&gt;
    &lt;svg width=&quot;200&quot; height=&quot;200&quot; viewbox=&quot;0 0 1020 1020&quot;&gt;
        &lt;!-- Boundary conditions, starting position --&gt;
        &lt;!-- First column --&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;20&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;20&quot; y=&quot;350&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(185,515) rotate(-90)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;185&quot; cy=&quot;515&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;20&quot; y=&quot;680&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;!-- Second column --&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;350&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;350&quot; y=&quot;350&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-2&quot; transform=&quot;translate(515,515) rotate(-90)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;515&quot; cy=&quot;515&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;350&quot; y=&quot;680&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,845) rotate(-90)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;515&quot; cy=&quot;845&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;!-- Third column --&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;680&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;680&quot; y=&quot;350&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;680&quot; y=&quot;680&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
    &lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;After streaming we can see the distributions &#x27;slip&#x27; at the boundary.&lt;&#x2F;p&gt;
&lt;div id=&quot;bounce-slip-illustration&quot;&gt;
    &lt;svg width=&quot;200&quot; height=&quot;200&quot; viewbox=&quot;0 0 1020 1020&quot;&gt;
        &lt;!-- Boundary conditions, slip --&gt;
        &lt;!-- First column --&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;20&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;20&quot; y=&quot;350&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;circle cx=&quot;185&quot; cy=&quot;515&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;20&quot; y=&quot;680&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;!-- Second column --&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;350&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;350&quot; y=&quot;350&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;g class=&quot;arrow-2&quot; transform=&quot;translate(515,515) rotate(90)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-1&quot; transform=&quot;translate(515,515)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;g class=&quot;arrow-3&quot; transform=&quot;translate(515,515) rotate(180)&quot;&gt;
            &lt;use xlink:href=&quot;#arrow-group&quot; &#x2F;&gt;
        &lt;&#x2F;g&gt;
        &lt;circle cx=&quot;515&quot; cy=&quot;515&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;350&quot; y=&quot;680&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;white&quot; &#x2F;&gt;
        &lt;circle cx=&quot;515&quot; cy=&quot;845&quot; r=&quot;30&quot; stroke=&quot;black&quot; stroke-width=&quot;10&quot; fill=&quot;white&quot;&gt;&lt;&#x2F;circle&gt;
        &lt;!-- Third column --&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;680&quot; y=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;680&quot; y=&quot;350&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
        &lt;rect class=&quot;inner&quot; width=&quot;330&quot; height=&quot;330&quot; x=&quot;680&quot; y=&quot;680&quot; stroke=&quot;black&quot; stroke-width=&quot;20&quot; fill=&quot;url(#diagonalHatch)&quot; &#x2F;&gt;
    &lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;We can see that, although the three DFs had the same velocity before streaming (i.e. were traveling in the same
direction), after they collide with the boundary, each is headed in a different direction. The direction that a DF is
traveling after encountering a boundary under the slip condition, then, is dependent on the orientation of that
boundary.&lt;&#x2F;p&gt;
&lt;p&gt;Fortunately, not only is no-slip easier to implement, it also generally provides a more accurate simulation. It
simulates the adhesion of a viscous fluid at the boundary, as if the fluid at the edge is sticking to the boundary.
The no-slip condition does not hold in every situation, but for our purposes it is sufficient.&lt;&#x2F;p&gt;
&lt;p&gt;That more or less sums up the lattice Boltzmann method. Of course, it&#x27;s very broad and deep topic, and I have only
provided a short introduction. Hopefully, though, that will provide enough of a background to understand some of the
implementation details I&#x27;m going to discuss below. For more information, &amp;quot;Lattice Boltzmann Simulation for Shallow Water
Flow Applications&amp;quot; (Banda and Seaid) provides a nice, brief introduction, and &amp;quot;Lattice-Gas Cellular Automata and
Lattice Boltzmann Models - An Introduction&amp;quot; (Wolf-Gladrow) presents a much more thorough study of the topic.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;javascript-implementation&quot;&gt;JavaScript Implementation&lt;&#x2F;h2&gt;
&lt;p&gt;You can view a demo &lt;a href=&quot;&#x2F;pages&#x2F;projects&#x2F;lattice-boltzmann.html&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Implementation is not particularly difficult, once you understand the lattice Boltzmann methods. At its most basic,
the LBM requires a lattice of nodes. In this case, for D2Q9, a two-dimensional array suffices to represent our lattice
(technically, an array of length n, with each item consisting of an m length array, where n represents the width of the
lattice, and m represents the height). For each node in the lattice, we must store, at a minimum, the densities of the
DFs. It is also useful, in order to avoid repetition of work, to store the calculated macroscopic density, macroscopic
velocity, the x and y components of that velocity, and the &#x27;curl&#x27;. Additionally, a &lt;code&gt;barrier&lt;&#x2F;code&gt; boolean was stored on each
node, as well as a &lt;code&gt;stream&lt;&#x2F;code&gt; array, used to temporarily store streamed values. Altogether, the constructor looked like
this:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;LatticeNode&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    this.distribution &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Individual densities for
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; each of the nine DFs of a node.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    this.stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Used to temporarily hold streamed values
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    this.density &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Macroscopic density of a node.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    this.ux &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; X component of macroscopic velocity of a node.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    this.uy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Y component of macroscopic velocity of a node.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    this.barrier &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Boolean indicating if node is a barrier.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    this.curl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Curl of node.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A &lt;code&gt;stream&lt;&#x2F;code&gt; and &lt;code&gt;collide&lt;&#x2F;code&gt; function are also required. And an &lt;code&gt;equilibrium&lt;&#x2F;code&gt; function helps avoid some repetition of code.
These are shown below.&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; For each node in the lattice
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;lattice_width; x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;lattice_height; y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;lattice[x][y];
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;node.barrier) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; For each DF on the node
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;; d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Get the velocity for the DF and calculate
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; the coordinates of the node to stream it to
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;node_directions[d];
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;newx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;move.x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;x;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;13&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;newy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;move.y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;y;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;14&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Check if new node is in the lattice
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;15&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(newx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span&gt;newx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;lattice_width &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                        newy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span&gt;newy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;lattice_height) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; If destination node is barrier, bounce distribution back to
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;18&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; originating node in opposite direction.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;19&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(lattice[newx][newy].barrier) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                            lattice[x][y].stream[reflection[d]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;node.distribution[d];
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;21&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;22&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                            lattice[newx][newy].stream[d] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;node.distribution[d];
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;23&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                        }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;25&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;26&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;27&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;28&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;29&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this example, the streamed values are placed in the special &lt;code&gt;node.stream&lt;&#x2F;code&gt; array. This allows us to avoid obliterating
DF values which we will still need to use, while also allowing us to avoid creating an entirely new &lt;code&gt;LatticeNode&lt;&#x2F;code&gt; for
every single node in the lattice.&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;collide&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; For each node in the lattice
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;lattice_width; x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;lattice_height; y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;lattice[x][y];
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;node.barrier) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;node.distribution; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Array of DFs
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;; p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Copy over values from streaming phase.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                    d[p] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;node.stream[p];
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Calculate macroscopic density (rho) and velocity (ux, uy)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;13&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;rho &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;14&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;ux &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;15&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;uy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;direction &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;node_directions[i]
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;18&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                    rho &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span&gt;d[i];
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;19&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                    ux &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span&gt;d[i] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;direction.x;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                    uy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span&gt;d[i] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;direction.x;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;21&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;22&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Update values stored in node.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;23&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                node.density &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;rho;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                node.ux &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ux;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;25&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                node.uy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;uy;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;26&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Set node equilibrium for each velocity
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;27&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;eq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;equilibrium&lt;&#x2F;span&gt;&lt;span&gt;(ux, uy, rho);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;28&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;29&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;old_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;d[i];
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;30&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                    node.distribution[i] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;old_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;(omega &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;(eq[i] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;old_value));
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;31&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;32&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;33&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;34&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;35&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The equilibrium function would look more or less like so:&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;equilibrium&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;ux&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;uy&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;rho&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Calculate equilibrium densities of a node
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;eq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Equilibrium values for all velocities in a node.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;u2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(ux &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;ux) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;(uy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;uy); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Magnitude of macroscopic velocity
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;; d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Calculate equilibrium value
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;velocity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;node_directions[d]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Node direction vector
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;eu &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(velocity.x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;ux) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;(velocity.y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;uy); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Macro velocity multiplied by distribution velocity
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;        eq.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(node_weight[d] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;rho &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;eu &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;4.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;(eu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;eu) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;u2)); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Equilibrium equation
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;eq;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It is possible to rewrite these functions such that much of the repetition of work is eliminated, but these are the core
algorithms.&lt;&#x2F;p&gt;
&lt;p&gt;And that&#x27;s really more or less all that&#x27;s required at the most basic level. Of course, in order to draw and interact
with the lattice, and do other interesting things, a few more functions are required, and there&#x27;s going to be some glue
code to stick everything together, but those are mostly just implementation details.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;difficulties&quot;&gt;Difficulties&lt;&#x2F;h2&gt;
&lt;p&gt;It took rather a long time to arrive at a proper implementation of the LBM. Not having any prior experience with
computational fluid dynamics, I was learning the material as I was trying to code it. There were a lot of missteps, as
I didn&#x27;t fully understand the topic, but attempting to code implementations as I learned certainly helped to concretize
the material.&lt;&#x2F;p&gt;
&lt;p&gt;One of the biggest bugbears on this project was related to the coordinate system. The literature on the topic naturally
presents examples and equations in the standard Cartesian coordinate system (i.e. with the origin at the bottom left,
with x increasing as you move right, and y increasing as you move up). However, computer graphics typically place the
origin at the top left (i.e. x increasing as you move right, and y increasing as you move down). This is how the canvas
behaves. This was the source of a subtle and pernicious bug, where I had failed to translate between these coordinate
systems in a single equation. The program appeared to behave mostly correctly, but upon close inspection exhibited odd,
incorrect behavior. At this point, where this bug has been (I hope) thoroughly squashed, I am not planning on
re-engineering the program, but if I were to build this from scratch, knowing what I now know, I would try to find a way
to design the program with a single point of failure for this issue, instead of translating between the coordinate
systems every time something happens on the y-axis.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;optimizations-and-improvements&quot;&gt;Optimizations and improvements&lt;&#x2F;h3&gt;
&lt;p&gt;This simulation started out dog-slow. Some optimizations were made here and there (e.g. removing the loop from the
equilibrium function, pre-calculating any shared values, and then calculating each equilibrium value on its own line;
see below), but I believe the most significant speedup came when I added the &lt;code&gt;stream&lt;&#x2F;code&gt; array to the &lt;code&gt;LatticeNode&lt;&#x2F;code&gt;
objects. With the LBM, it is necessary to have somewhere to store the streamed values so that they don&#x27;t obliterate the
values ahead of them (although this isn&#x27;t strictly true... it is possible to achieve the same goal by looping over the
lattice four times, starting from each of the four corners, streaming only a portion of the DFs each time). Previously I
had been creating an entirely new lattice for each time-step. This was very inefficient, and required a lot of extra
work, both to set up and initialize the array, as well as behind the scenes with the extra garbage collection required
when the old array was discarded. So the addition of the &lt;code&gt;stream&lt;&#x2F;code&gt; array, along with a few related optimizations, meant
that, instead of throwing away every single node on every single tick, that each node essentially lived in perpetuity,
for the life of the program, and the values it stored (especially the &lt;code&gt;distribution&lt;&#x2F;code&gt; array) were never destroyed and
recreated, only ever updated. This obviated the need for much of the garbage collection and object instantiation that
the browser had been performing, and it resulted in a very significant speedup.&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;js&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Optimized equilibrium function.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Eliminates much repetition of work.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;equilibrium&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;ux&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;uy&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;rho&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;eq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Equilibrium values for all velocities in a node.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;ux3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;ux;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;uy3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;uy;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;ux2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ux &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;ux;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;uy2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;uy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;uy;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;uxuy2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;ux &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;uy;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;u2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ux2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;uy2;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;u215 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1.5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;u2;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    eq[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;four9ths &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;rho &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;u215);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;13&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    eq[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;one9th &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;rho &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;ux3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;4.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ux2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;u215);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;14&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    eq[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;one9th &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;rho &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;uy3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;4.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;uy2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;u215);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;15&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    eq[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;one9th &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;rho &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;ux3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;4.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ux2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;u215);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    eq[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;one9th &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;rho &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;uy3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;4.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;uy2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;u215);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    eq[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;one36th &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;rho &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;ux3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;uy3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;4.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;(u2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;uxuy2) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;u215);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;18&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    eq[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;one36th &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;rho &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;ux3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;uy3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;4.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;(u2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;uxuy2) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;u215);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;19&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    eq[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;one36th &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;rho &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;ux3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;uy3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;4.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;(u2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;uxuy2) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;u215);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    eq[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;one36th &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;rho &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;ux3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;uy3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;4.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;(u2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;uxuy2) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;u215);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;21&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;eq;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;22&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;One of the most significant improvements that I made, in terms of maintainability, clarity, and extensibility, was
refactoring to the module pattern. My early efforts in programming the LBM were not well designed. It can be difficult
to settle on a design before you fully understand the problem at hand. But once I had come to a full understanding of
the problem, and had a more-or-less working (but still poorly designed) implementation, I refactored. Well.. . I say
refactored, but the truth is that it was a complete rewrite. They say &#x27;write one to throw away&#x27;, and that can be a major
boon on a project. It certainly would have taken longer to reshape my initial design than to start from scratch, and
bugs—introduced as a result of my incomplete understanding of the problem—would have almost certainly come along for the
ride. This module-like architecture has also allowed for more rapid extension of the program, such as the addition of a
new draw-mode, or new controls (play&#x2F;pause, etc.), and overall it is far less brittle than the ad-hoc, global-ridden
spaghetti-mess the program began as.&lt;&#x2F;p&gt;
&lt;script type=&quot;text&#x2F;javascript&quot; src=&quot;&#x2F;js&#x2F;MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&gt;
&lt;&#x2F;script&gt;</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A*</title>
        <published>2014-02-15T20:28:00+00:00</published>
        <updated>2014-02-15T20:28:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://ebenpackwood.com/pages/projects/a-star/" type="text/html"/>
        <id>https://ebenpackwood.com/pages/projects/a-star/</id>
        
        <content type="html">&lt;div class=&quot;main&quot; style=&quot;position:relative;&quot;&gt;
    &lt;canvas id=&quot;map&quot; style=&quot;background-color: black;&quot; width=&#x27;600&#x27; height=&#x27;240&#x27;&gt;&lt;&#x2F;canvas&gt;
    &lt;canvas id=&quot;particles&quot; style=&quot;position: absolute; left: 0; top:0;&quot; width=&#x27;600&#x27; height=&#x27;240&#x27;&gt;&lt;&#x2F;canvas&gt;
&lt;&#x2F;div&gt;
&lt;script&gt;
(function(){
    main.astar().then(function(astar){
        new astar(&quot;map&quot;, &quot;particles&quot;);
    });
})();
&lt;&#x2F;script&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Conway&#x27;s Game of Life</title>
        <published>2014-02-15T20:28:00+00:00</published>
        <updated>2014-02-15T20:28:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://ebenpackwood.com/pages/projects/game-of-life/" type="text/html"/>
        <id>https://ebenpackwood.com/pages/projects/game-of-life/</id>
        
        <content type="html">&lt;div id=&quot;game&quot; class=&quot;game&quot;&gt;
    &lt;canvas id=&quot;gol&quot; style=&quot;border: 1px solid black;position:relative;&quot; width=&#x27;600&#x27; height=&#x27;400&#x27;&gt;&lt;&#x2F;canvas&gt;
&lt;&#x2F;div&gt;
&lt;script&gt;
(function(){
    main.conway().then(function(conway){
        new conway(&#x27;gol&#x27;, 50);
    });
})();
&lt;&#x2F;script&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>JS1K Lattice Boltzmann</title>
        <published>2014-02-15T20:28:00+00:00</published>
        <updated>2014-02-15T20:28:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://ebenpackwood.com/pages/projects/js1k/" type="text/html"/>
        <id>https://ebenpackwood.com/pages/projects/js1k/</id>
        
        <content type="html">&lt;p&gt;&lt;canvas id=&quot;c&quot; style=&quot;position: relative;&quot;&gt;&lt;&#x2F;canvas&gt;&lt;&#x2F;p&gt;
&lt;script&gt;
(function(){
    var a = document.getElementsByTagName(&#x27;canvas&#x27;)[0];
    var b = document.body;
    var c = a.getContext(&#x27;2d&#x27;);
    a.width = a.height = 600;
    main.projectwavybits().then(function(projectwavybits){
        projectwavybits();
    });
})();
&lt;&#x2F;script&gt;
</content>
        
    </entry>
</feed>
